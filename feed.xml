<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/FastRobots/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/FastRobots/" rel="alternate" type="text/html" /><updated>2024-05-15T23:55:44-04:00</updated><id>http://localhost:4000/FastRobots/feed.xml</id><title type="html">Fast Robots 2024 Spring</title><subtitle>This website displays the content in the course Fast Robots (Cornell ECE 5160 Spring 2024).</subtitle><entry><title type="html">Lab12</title><link href="http://localhost:4000/FastRobots/jekyll/update/2024/05/15/Lab12.html" rel="alternate" type="text/html" title="Lab12" /><published>2024-05-15T00:00:00-04:00</published><updated>2024-05-15T00:00:00-04:00</updated><id>http://localhost:4000/FastRobots/jekyll/update/2024/05/15/Lab12</id><content type="html" xml:base="http://localhost:4000/FastRobots/jekyll/update/2024/05/15/Lab12.html"><![CDATA[<h2 id="introduction">Introduction</h2>

<p>The final piece of puzzle is to have the robot navigate through a set of waypoints in that environment as quickly and accurately as possible. I decided to implement the full Bayes filter or a high level path planningg algorithm.</p>

<p>The waypoints are as follows, there are minor adjustions from the recommended waypoints of the lab guide:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(-2, -3)    &lt;-- start
(-1, -1)
(2, -1)
(2, -3)
(5, -3)
(5, -1)
(5, 3)
(3, 3)
(0, 3)
(0, 0)      &lt;-- end
</code></pre></div></div>

<p><img src="/FastRobots/images/Lab12/target.png" alt="target" style="zoom:50%;" /></p>

<h2 id="code-implementation">Code Implementation</h2>

<h3 id="arduino">Arduino</h3>

<p>The biggest change in code of Lab12 is that I add a state machine to control the robot:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">switch</span> <span class="p">(</span><span class="n">curr_status</span><span class="p">)</span>
<span class="p">{</span>
<span class="k">case</span> <span class="n">Status</span><span class="o">::</span><span class="n">ROTATE_TO_ORIENT</span><span class="p">:</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">reachedTargetYaw</span><span class="p">(</span><span class="n">target_yaw</span><span class="p">))</span> <span class="p">{</span>
        <span class="n">keepYaw</span><span class="p">(</span><span class="n">target_yaw</span><span class="p">,</span> <span class="n">yaw</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="p">{</span>
        <span class="kt">uint16_t</span> <span class="n">dist_to_next_pos</span> <span class="o">=</span> <span class="n">getPositionDist</span><span class="p">(</span><span class="n">curr_pos</span><span class="p">,</span> <span class="n">target_pos</span><span class="p">);</span>
        <span class="kt">uint16_t</span> <span class="n">max_distance</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
      
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">getExactDistance</span><span class="p">(</span><span class="n">max_distance</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">break</span><span class="p">;</span>    
        <span class="p">}</span>
        <span class="n">target_distance</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">max_distance</span> <span class="o">-</span> <span class="n">dist_to_next_pos</span><span class="p">,</span> <span class="mi">80</span><span class="p">);</span>

        <span class="n">resetPIDController</span><span class="p">();</span>
        <span class="n">start_ms</span> <span class="o">=</span> <span class="n">millis</span><span class="p">();</span>
        <span class="n">stop</span><span class="p">();</span>
        <span class="n">curr_status</span> <span class="o">=</span> <span class="n">Status</span><span class="o">::</span><span class="n">MOVE_FORWARD</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">break</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">case</span> <span class="n">Status</span><span class="o">::</span><span class="n">MOVE_FORWARD</span><span class="p">:</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">reachedTargetDist</span><span class="p">(</span><span class="n">target_distance</span><span class="p">))</span> <span class="p">{</span>
        <span class="n">forwardKeepYawAndDistance</span><span class="p">(</span><span class="n">target_yaw</span><span class="p">,</span> <span class="n">yaw</span><span class="p">,</span> <span class="n">target_distance</span><span class="p">,</span> <span class="n">distance</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="p">{</span>
        <span class="n">yaw_before_spin</span> <span class="o">=</span> <span class="n">yaw</span><span class="p">;</span>
        <span class="n">target_yaw_ptr</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="n">resetPIDController</span><span class="p">();</span>
        <span class="n">start_ms</span> <span class="o">=</span> <span class="n">millis</span><span class="p">();</span>
        <span class="n">stop</span><span class="p">();</span>
        <span class="n">curr_status</span> <span class="o">=</span> <span class="n">Status</span><span class="o">::</span><span class="n">SCAN_SPIN</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">break</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">case</span> <span class="n">Status</span><span class="o">::</span><span class="n">SCAN_SPIN</span><span class="p">:</span> <span class="p">{</span>
    <span class="n">target_yaw</span> <span class="o">=</span> <span class="n">yaw_before_spin</span> <span class="o">+</span> <span class="n">target_yaws_increment</span><span class="p">[</span><span class="n">target_yaw_ptr</span><span class="p">];</span>

    <span class="n">keepYaw</span><span class="p">(</span><span class="n">target_yaw</span><span class="p">,</span> <span class="n">yaw</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">elapsed_ms</span> <span class="o">&gt;=</span> <span class="n">STAY_YAW_INTERVAL_MS</span> <span class="o">*</span> <span class="n">target_yaw_ptr</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">target_yaw_ptr</span> <span class="o">&lt;</span> <span class="n">SCANS_LEN</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">saveCurrRecordToArray</span><span class="p">();</span>
        <span class="p">}</span>
        <span class="n">target_yaw_ptr</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// if keep spinning, target yaw will exceed 360</span>
    <span class="c1">// so stop the car, end current loop</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">target_yaw_ptr</span> <span class="o">&gt;=</span> <span class="n">SCANS_LEN</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">stop</span><span class="p">();</span>
        <span class="n">auto_running</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
        <span class="n">yaw</span> <span class="o">-=</span> <span class="mi">360</span><span class="p">;</span>
        <span class="n">sendBackAString</span><span class="p">(</span><span class="s">"Scan End"</span><span class="p">);</span>
        <span class="n">resetPIDController</span><span class="p">();</span>
        <span class="n">start_ms</span> <span class="o">=</span> <span class="n">millis</span><span class="p">();</span>
        <span class="n">curr_status</span> <span class="o">=</span> <span class="n">Status</span><span class="o">::</span><span class="n">IDLE</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">break</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">default</span><span class="o">:</span>
    <span class="k">break</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The robot has four states:</p>

<ul>
  <li><strong>IDLE</strong>: The robot stops until receiving command from laptop.</li>
  <li><strong>ROTATE_TO_ORIENT</strong>: Rotate until the head of the car is aligned with the target pose.</li>
  <li><strong>MOVE_FORWARD</strong>: Move forward while keep yaw unchanged until reached the target pose.</li>
  <li><strong>SCAN_SPIN</strong>: Now the car has reached the setpoint, spin the car 360 degrees to scan the map and tell the laptop that it has finished scanning.</li>
</ul>

<p>The most important controller function is <code class="language-plaintext highlighter-rouge">forwardKeepYawAndDistance()</code>, which have 4 parameters:</p>

<ul>
  <li>setpoint of yaw</li>
  <li>current yaw</li>
  <li>setpoint of distance</li>
  <li>current distance</li>
</ul>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">forwardKeepYawAndDistance</span><span class="p">(</span><span class="kt">int16_t</span> <span class="n">setpoint_yaw</span><span class="p">,</span> <span class="kt">int16_t</span> <span class="n">yaw</span><span class="p">,</span> <span class="kt">uint16_t</span> <span class="n">setpoint_distance</span><span class="p">,</span> <span class="kt">uint16_t</span> <span class="n">distance</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int16_t</span><span class="p">,</span> <span class="kt">int16_t</span><span class="o">&gt;</span> <span class="n">two_straight_controls</span> <span class="o">=</span> <span class="n">position_pid</span><span class="p">(</span><span class="n">distance</span> <span class="o">-</span> <span class="n">setpoint_distance</span><span class="p">);</span>
    <span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int16_t</span><span class="p">,</span> <span class="kt">int16_t</span><span class="o">&gt;</span> <span class="n">two_angle_controls</span> <span class="o">=</span> <span class="n">angle_pid</span><span class="p">(</span><span class="n">yaw</span> <span class="o">-</span> <span class="n">setpoint_yaw</span><span class="p">);</span>

    <span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int16_t</span><span class="p">,</span> <span class="kt">int16_t</span><span class="o">&gt;</span> <span class="n">two_controls</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">two_straight_controls</span><span class="p">.</span><span class="n">first</span> <span class="o">+</span> <span class="n">two_angle_controls</span><span class="p">.</span><span class="n">first</span><span class="p">,</span>
        <span class="n">two_straight_controls</span><span class="p">.</span><span class="n">second</span> <span class="o">+</span> <span class="n">two_angle_controls</span><span class="p">.</span><span class="n">second</span>
    <span class="p">};</span>

    <span class="n">limitTwoControls</span><span class="p">(</span><span class="n">two_controls</span><span class="p">);</span>
    <span class="n">left_wheel_control</span><span class="p">(</span><span class="n">two_controls</span><span class="p">.</span><span class="n">first</span><span class="p">);</span>
    <span class="n">right_wheel_control</span><span class="p">(</span><span class="n">two_controls</span><span class="p">.</span><span class="n">second</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In the code, <code class="language-plaintext highlighter-rouge">position_pid</code> is the pid function to control distance, <code class="language-plaintext highlighter-rouge">angle_pid</code> is the pid function to control yaw angle, they share the same structure but different parameters and return values.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// PID parameters for position control</span>
<span class="n">PIDParam</span> <span class="n">pos_param</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">.</span><span class="n">Kp</span> <span class="o">=</span> <span class="mf">0.7</span><span class="p">,</span>
    <span class="p">.</span><span class="n">Ki</span> <span class="o">=</span> <span class="mf">0.1</span><span class="p">,</span>
    <span class="p">.</span><span class="n">Kd</span> <span class="o">=</span> <span class="mi">8</span>
<span class="p">};</span>

<span class="c1">// PID parameters for angle control</span>
<span class="n">PIDParam</span> <span class="n">angle_param</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">.</span><span class="n">Kp</span> <span class="o">=</span> <span class="mi">45</span><span class="p">,</span>
    <span class="p">.</span><span class="n">Ki</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span>
    <span class="p">.</span><span class="n">Kd</span> <span class="o">=</span> <span class="mi">10</span>
<span class="p">};</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">two_straight_controls</code> is the returned value of position pid, it has same value for both left and right motors. <code class="language-plaintext highlighter-rouge">two_angle_controls</code> is the returned value of angle pid, it has opposite value for left and right motors. By adding these two control values together, the robot will have the ability to both move forward towards a given distance and keep the given yaw angle unchanged.</p>

<p>When the robot start to move, it will update its current position by the best belief position and update its current yaw angle by the best estimated yaw angle.</p>

<p>Then it calculates the orientation to move to the next target pose.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">yaw</span> <span class="o">=</span> <span class="n">belief_yaw</span><span class="p">;</span>
<span class="n">curr_pos</span> <span class="o">=</span> <span class="n">belief_pos</span><span class="p">;</span>

<span class="n">target_yaw</span> <span class="o">=</span> <span class="n">atan2</span><span class="p">(</span><span class="n">target_pos</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="n">curr_pos</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="n">target_pos</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="n">curr_pos</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="o">*</span> <span class="mf">180.0</span> <span class="o">/</span> <span class="n">PI</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="jupyter">Jupyter</h3>

<p>The <code class="language-plaintext highlighter-rouge">perform_observation_loop</code> function is almost the same as Lab11.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">perform_observation_loop</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">rot_vel</span><span class="o">=</span><span class="mi">120</span><span class="p">):</span>

    <span class="n">timestamps_ms</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">distances</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">yaws</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="n">scanning</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="n">transfering</span> <span class="o">=</span> <span class="bp">True</span>

    <span class="k">def</span> <span class="nf">notification_handler</span><span class="p">(</span><span class="n">uuid</span><span class="p">,</span> <span class="n">byte_array</span><span class="p">):</span>
        <span class="k">nonlocal</span> <span class="n">scanning</span>
        <span class="k">nonlocal</span> <span class="n">transfering</span>
        <span class="n">ss</span> <span class="o">=</span> <span class="n">ble</span><span class="p">.</span><span class="nf">bytearray_to_string</span><span class="p">(</span><span class="n">byte_array</span><span class="p">)</span>

        <span class="c1"># Scan has ended
</span>
        <span class="c1"># Normal message
</span>        <span class="k">if</span> <span class="n">ss</span><span class="p">.</span><span class="nf">count</span><span class="p">(</span><span class="sh">'</span><span class="s">|</span><span class="sh">'</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="n">ss</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">ss</span> <span class="o">==</span> <span class="sh">"</span><span class="s">Scan End</span><span class="sh">"</span><span class="p">:</span>
                <span class="n">scanning</span> <span class="o">=</span> <span class="bp">False</span>
            <span class="k">elif</span> <span class="n">ss</span> <span class="o">==</span> <span class="sh">"</span><span class="s">Transfer End</span><span class="sh">"</span><span class="p">:</span>
                <span class="n">transfering</span> <span class="o">=</span> <span class="bp">False</span>
            <span class="k">return</span>

        <span class="n">idx</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="n">ss</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">:</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">timestamp</span><span class="p">,</span> <span class="n">distance</span><span class="p">,</span> <span class="n">yaw</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">|</span><span class="sh">'</span><span class="p">)</span>

        <span class="n">timestamps_ms</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">timestamp</span><span class="p">))</span>
        <span class="n">distances</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">distance</span><span class="p">))</span>
        <span class="n">yaws</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">yaw</span><span class="p">))</span>

    <span class="n">observations_count</span> <span class="o">=</span> <span class="mi">18</span>

    <span class="n">self</span><span class="p">.</span><span class="n">ble</span><span class="p">.</span><span class="nf">start_notify</span><span class="p">(</span><span class="n">ble</span><span class="p">.</span><span class="n">uuid</span><span class="p">[</span><span class="sh">'</span><span class="s">RX_STRING</span><span class="sh">'</span><span class="p">],</span> <span class="n">notification_handler</span><span class="p">)</span>

    <span class="n">self</span><span class="p">.</span><span class="n">ble</span><span class="p">.</span><span class="nf">send_command</span><span class="p">(</span><span class="n">CMD</span><span class="p">.</span><span class="n">START_AUTO</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>

    <span class="k">while</span> <span class="n">scanning</span><span class="p">:</span>
        <span class="c1"># print("scanning")
</span>        <span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>

    <span class="n">self</span><span class="p">.</span><span class="n">ble</span><span class="p">.</span><span class="nf">send_command</span><span class="p">(</span><span class="n">CMD</span><span class="p">.</span><span class="n">GET_HISTORY_DATA</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>

    <span class="k">while</span> <span class="n">transfering</span><span class="p">:</span>
        <span class="c1"># print("transfering")
</span>        <span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>

    <span class="n">ble</span><span class="p">.</span><span class="nf">stop_notify</span><span class="p">(</span><span class="n">ble</span><span class="p">.</span><span class="n">uuid</span><span class="p">[</span><span class="sh">'</span><span class="s">RX_STRING</span><span class="sh">'</span><span class="p">])</span>

    <span class="n">sensor_ranges</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">divide</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="n">distances</span><span class="p">),</span> <span class="mi">1000</span><span class="p">)[</span><span class="n">np</span><span class="p">.</span><span class="n">newaxis</span><span class="p">].</span><span class="n">T</span>
    <span class="n">sensor_bearings</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="n">yaws</span><span class="p">)[</span><span class="n">np</span><span class="p">.</span><span class="n">newaxis</span><span class="p">].</span><span class="n">T</span>

    <span class="nf">print</span><span class="p">(</span><span class="n">sensor_ranges</span><span class="p">.</span><span class="n">T</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">sensor_bearings</span><span class="p">.</span><span class="n">T</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">sensor_ranges</span><span class="p">,</span> <span class="n">sensor_bearings</span>
</code></pre></div></div>

<p>I modified the update step:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ble</span><span class="p">.</span><span class="nf">send_command</span><span class="p">(</span><span class="n">CMD</span><span class="p">.</span><span class="n">SET_TARGET_POS</span><span class="p">,</span> <span class="sh">"</span><span class="s">-1|-1</span><span class="sh">"</span><span class="p">)</span>

<span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">cmdr</span><span class="p">.</span><span class="nf">plot_gt</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span> <span class="o">*</span> <span class="mf">0.3048</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span> <span class="o">*</span> <span class="mf">0.3048</span><span class="p">)</span>

<span class="c1"># Get Observation Data by executing a 360 degree rotation motion
</span><span class="n">loc</span><span class="p">.</span><span class="nf">get_observation_data</span><span class="p">()</span>

<span class="c1"># Run Update Step
</span><span class="n">loc</span><span class="p">.</span><span class="nf">update_step</span><span class="p">()</span>
<span class="n">curr_belief</span> <span class="o">=</span> <span class="n">loc</span><span class="p">.</span><span class="nf">plot_update_step_data</span><span class="p">(</span><span class="n">plot_data</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="n">ble</span><span class="p">.</span><span class="nf">send_command</span><span class="p">(</span><span class="n">CMD</span><span class="p">.</span><span class="n">SET_CURR_BELIEF</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">curr_belief</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="si">:</span><span class="p">.</span><span class="mi">3</span><span class="n">f</span><span class="si">}</span><span class="s">|</span><span class="si">{</span><span class="n">curr_belief</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="si">:</span><span class="p">.</span><span class="mi">3</span><span class="n">f</span><span class="si">}</span><span class="s">|</span><span class="si">{</span><span class="n">curr_belief</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="si">:</span><span class="p">.</span><span class="mi">3</span><span class="n">f</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<p>The jupyter notebook will send the target position for the robot, and wait one second to make sure that the robot has successfully updated its new target.</p>

<p>Then it calls <code class="language-plaintext highlighter-rouge">get_observation_data()</code>, which will make robots transfer from state IDLE to ROTATE_TO_ORIENT, that is to say, make the robot start to move.</p>

<p>The distance data send back by robot will be processed by <code class="language-plaintext highlighter-rouge">notification_handler(uuid, byte_array)</code> function to be stored in the distance array.</p>

<p>When the bayes filter successfully updated the belief map, it will plot the maximum belief position on the traj ploter in blue line and send it to robot to make the robot updates its current position.</p>

<p>The above code block is repeated several times like this:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ble</span><span class="p">.</span><span class="nf">send_command</span><span class="p">(</span><span class="n">CMD</span><span class="p">.</span><span class="n">SET_TARGET_POS</span><span class="p">,</span> <span class="sh">"</span><span class="s">2|-3</span><span class="sh">"</span><span class="p">)</span>

<span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">cmdr</span><span class="p">.</span><span class="nf">plot_gt</span><span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="mf">0.3048</span><span class="p">,</span> <span class="o">-</span><span class="mi">3</span> <span class="o">*</span> <span class="mf">0.3048</span><span class="p">)</span>

<span class="c1"># Get Observation Data by executing a 360 degree rotation motion
</span><span class="n">loc</span><span class="p">.</span><span class="nf">get_observation_data</span><span class="p">()</span>

<span class="c1"># Run Update Step
</span><span class="n">loc</span><span class="p">.</span><span class="nf">update_step</span><span class="p">()</span>
<span class="n">curr_belief</span> <span class="o">=</span> <span class="n">loc</span><span class="p">.</span><span class="nf">plot_update_step_data</span><span class="p">(</span><span class="n">plot_data</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="n">ble</span><span class="p">.</span><span class="nf">send_command</span><span class="p">(</span><span class="n">CMD</span><span class="p">.</span><span class="n">SET_CURR_BELIEF</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">curr_belief</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="si">:</span><span class="p">.</span><span class="mi">3</span><span class="n">f</span><span class="si">}</span><span class="s">|</span><span class="si">{</span><span class="n">curr_belief</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="si">:</span><span class="p">.</span><span class="mi">3</span><span class="n">f</span><span class="si">}</span><span class="s">|</span><span class="si">{</span><span class="n">curr_belief</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="si">:</span><span class="p">.</span><span class="mi">3</span><span class="n">f</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="demonstration">Demonstration</h2>

<p>Video of the whole process:</p>

<iframe width="1606" height="683" src="https://www.youtube.com/embed/PLv82viuRhk" title="Fast Robot Lab12" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>

<p>Final display of both ground truth and belief:</p>

<p><img src="/FastRobots/images/Lab12/final.png" alt="final" style="zoom:50%;" /></p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Introduction]]></summary></entry><entry><title type="html">Lab11</title><link href="http://localhost:4000/FastRobots/jekyll/update/2024/05/11/Lab11.html" rel="alternate" type="text/html" title="Lab11" /><published>2024-05-11T00:00:00-04:00</published><updated>2024-05-11T00:00:00-04:00</updated><id>http://localhost:4000/FastRobots/jekyll/update/2024/05/11/Lab11</id><content type="html" xml:base="http://localhost:4000/FastRobots/jekyll/update/2024/05/11/Lab11.html"><![CDATA[<h2 id="introduction">Introduction</h2>

<p>In this lab I perform localization with the Bayes filter on your actual robot. We only use the update step based on full 360 degree scans with the ToF sensor. The point of the lab is to appreciate the difference between simulation and real-world systems.</p>

<p>The result of this lab is pretty good, which provides a solid foundation to carry on Lab12.</p>

<h2 id="tasks">Tasks</h2>

<h3 id="1-test-localization-in-simulation-run-the-notebook-lab11_simipynb-and-attach-a-single-screenshot-of-the-final-plot-odom-ground-truth-and-belief">1. Test Localization in Simulation: Run the notebook <strong>lab11_sim.ipynb</strong> and attach a single screenshot of the final plot (odom, ground truth and belief).</h3>

<p><img src="/FastRobots/images/Lab11/sim.png" alt="sim" style="zoom:50%;" /></p>

<h3 id="2-using-a-uniform-prior-on-the-pose-run-only-the-update-step-using-the-sensor-measurement-data-to-localize-your-robot">2. Using a uniform prior on the pose, run (only) the update step using the sensor measurement data to localize your robot</h3>

<h4 id="a-implement-member-function-perform_observation_loop-of-class-realrobot">a) Implement member function <strong>perform_observation_loop</strong> of class <strong>RealRobot</strong></h4>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">def</span> <span class="n">perform_observation_loop</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">rot_vel</span><span class="o">=</span><span class="mi">120</span><span class="p">)</span><span class="o">:</span>

    <span class="n">timestamps_ms</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">distances</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">yaws</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="n">scanning</span> <span class="o">=</span> <span class="n">True</span>
    <span class="n">transfering</span> <span class="o">=</span> <span class="n">True</span>
    
    <span class="n">def</span> <span class="n">notification_handler</span><span class="p">(</span><span class="n">uuid</span><span class="p">,</span> <span class="n">byte_array</span><span class="p">)</span><span class="o">:</span>
        <span class="n">nonlocal</span> <span class="n">scanning</span>
        <span class="n">nonlocal</span> <span class="n">transfering</span>
        <span class="n">ss</span> <span class="o">=</span> <span class="n">ble</span><span class="p">.</span><span class="n">bytearray_to_string</span><span class="p">(</span><span class="n">byte_array</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">ss</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="sc">'|'</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="o">:</span>
            <span class="n">print</span><span class="p">(</span><span class="n">ss</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">ss</span> <span class="o">==</span> <span class="s">"Scan End"</span><span class="o">:</span>
                <span class="n">scanning</span> <span class="o">=</span> <span class="n">False</span>
            <span class="n">elif</span> <span class="n">ss</span> <span class="o">==</span> <span class="s">"Transfer End"</span><span class="o">:</span>
                <span class="n">transfering</span> <span class="o">=</span> <span class="n">False</span>
            <span class="k">return</span>
            
        <span class="n">idx</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="n">ss</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="sc">':'</span><span class="p">)</span>
        <span class="n">timestamp</span><span class="p">,</span> <span class="n">distance</span><span class="p">,</span> <span class="n">yaw</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="sc">'|'</span><span class="p">)</span>
        
        <span class="n">timestamps_ms</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="kt">int</span><span class="p">(</span><span class="n">timestamp</span><span class="p">))</span>
        <span class="n">distances</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="kt">int</span><span class="p">(</span><span class="n">distance</span><span class="p">))</span>
        <span class="n">yaws</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="kt">int</span><span class="p">(</span><span class="n">yaw</span><span class="p">))</span>
    
    <span class="n">observations_count</span> <span class="o">=</span> <span class="mi">18</span>

    <span class="n">self</span><span class="p">.</span><span class="n">ble</span><span class="p">.</span><span class="n">start_notify</span><span class="p">(</span><span class="n">ble</span><span class="p">.</span><span class="n">uuid</span><span class="p">[</span><span class="err">'</span><span class="n">RX_STRING</span><span class="err">'</span><span class="p">],</span> <span class="n">notification_handler</span><span class="p">)</span>
    
    <span class="n">self</span><span class="p">.</span><span class="n">ble</span><span class="p">.</span><span class="n">send_command</span><span class="p">(</span><span class="n">CMD</span><span class="p">.</span><span class="n">START_AUTO</span><span class="p">,</span> <span class="s">""</span><span class="p">)</span>

    <span class="k">while</span> <span class="n">scanning</span><span class="o">:</span>
        <span class="n">print</span><span class="p">(</span><span class="s">"scanning"</span><span class="p">)</span>
        <span class="n">asyncio</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
    
    <span class="n">self</span><span class="p">.</span><span class="n">ble</span><span class="p">.</span><span class="n">send_command</span><span class="p">(</span><span class="n">CMD</span><span class="p">.</span><span class="n">GET_HISTORY_DATA</span><span class="p">,</span> <span class="s">""</span><span class="p">)</span>

    <span class="k">while</span> <span class="n">transfering</span><span class="o">:</span>
        <span class="n">print</span><span class="p">(</span><span class="s">"transfering"</span><span class="p">)</span>
        <span class="n">asyncio</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
    
    <span class="n">ble</span><span class="p">.</span><span class="n">stop_notify</span><span class="p">(</span><span class="n">ble</span><span class="p">.</span><span class="n">uuid</span><span class="p">[</span><span class="err">'</span><span class="n">RX_STRING</span><span class="err">'</span><span class="p">])</span>
    
    <span class="n">sensor_ranges</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">divide</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">distances</span><span class="p">),</span> <span class="mi">1000</span><span class="p">)[</span><span class="n">np</span><span class="p">.</span><span class="n">newaxis</span><span class="p">].</span><span class="n">T</span>
    <span class="n">sensor_bearings</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">yaws</span><span class="p">)[</span><span class="n">np</span><span class="p">.</span><span class="n">newaxis</span><span class="p">].</span><span class="n">T</span>

    <span class="n">print</span><span class="p">(</span><span class="n">sensor_ranges</span><span class="p">.</span><span class="n">T</span><span class="p">)</span>
    <span class="n">print</span><span class="p">(</span><span class="n">sensor_bearings</span><span class="p">.</span><span class="n">T</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">sensor_ranges</span><span class="p">,</span> <span class="n">sensor_bearings</span>
</code></pre></div></div>

<h4 id="b-place-robot-in-all-four-marked-poses-and-run-the-update-step-of-the-bayes-filter">b) Place robot in all four marked poses and run the update step of the Bayes filter</h4>

<p>I tested all four marked poses:</p>

<ul>
  <li><strong>-3, -2</strong></li>
</ul>

<p><img src="/FastRobots/images/Lab11/-3,-2.png" alt="-3,-2" style="zoom: 40%;" /></p>

<p>This result given by bayes filter is exactly the same as grond truth.</p>

<ul>
  <li><strong>0, 3</strong></li>
</ul>

<p><img src="/FastRobots/images/Lab11/0,3.png" alt="0,3" style="zoom:40%;" /></p>

<p>This result given by bayes filter is exactly the same as grond truth.</p>

<ul>
  <li><strong>5, 3</strong></li>
</ul>

<p><img src="/FastRobots/images/Lab11/5, 3.png" alt="5, 3" style="zoom:40%;" /></p>

<p>This result given by bayes filter is (5, 2), which is one block away from the ground truth (5, 3). But not bad anyway.</p>

<ul>
  <li><strong>5, -3</strong></li>
</ul>

<p><img src="/FastRobots/images/Lab11/5,-3.png" alt="5,-3" style="zoom:40%;" /></p>

<p>This result given by bayes filter is exactly the same as grond truth.</p>

<p>The video of robot working at pose (5, -3) is attached below:</p>

<iframe width="407" height="724" src="https://www.youtube.com/embed/6odRjmYjLyI" title="Fast Robot Lab11" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>

<h2 id="discussion">Discussion</h2>

<h3 id="how-close-is-the-localized-pose-wrt-to-the-ground-truth">How close is the localized pose w.r.t to the ground truth?</h3>

<p>In conclusion, 3 of the 4 marked pose give perfect estimation through bayes filter, 1 has an error of one block, which is also good enough.</p>

<h3 id="does-the-robot-localize-better-in-certain-poses-if-so-why">Does the robot localize better in certain poses? If so, why?</h3>

<p>No, it performs almost equally well in all tested poses on my robot.</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Introduction]]></summary></entry><entry><title type="html">Lab10</title><link href="http://localhost:4000/FastRobots/jekyll/update/2024/05/01/Lab10.html" rel="alternate" type="text/html" title="Lab10" /><published>2024-05-01T00:00:00-04:00</published><updated>2024-05-01T00:00:00-04:00</updated><id>http://localhost:4000/FastRobots/jekyll/update/2024/05/01/Lab10</id><content type="html" xml:base="http://localhost:4000/FastRobots/jekyll/update/2024/05/01/Lab10.html"><![CDATA[<h2 id="introduction">Introduction</h2>

<p>In this lab, we implemented grid localization using Bayes filter. The robot is simulated following a preplanned trajectory and we determine where the robot is using Bayes filter at every iteration.</p>

<p>The structure Bayes filter is shown below:</p>

<p><img src="/FastRobots/images/Lab10/bayes-formula.png" alt="bayes-formula" style="zoom: 33%;" /></p>

<p>In order to use Bayes filter to increase the accuracy, we need the following parts:</p>

<ul>
  <li><strong>State Space</strong>: The size in this lab is 12 x 9 x 18, 12 and 9 are the size of the plane, 18 is the size of angular space</li>
  <li><strong>Belief</strong>: The belief of the robot at a given state</li>
  <li><strong>Action Model</strong>: The probability that the robot arrive at state x’ from previous state x given input u</li>
  <li><strong>Sensor Model</strong>: The probability that the robot has sensor reading z from state x</li>
</ul>

<p>The prediction belief is calculated by prior belief and action model at the entire state space. Then it is corrected and normalized by the sensor model.</p>

<h2 id="code-implementation">Code Implementation</h2>

<h3 id="compute-control">Compute Control</h3>

<p>It calculates <code class="language-plaintext highlighter-rouge">u</code> based on a current and previous position. The principle is ilustrated in the graph below:</p>

<p><img src="/FastRobots/images/Lab10/compute control.png" alt="compute control" style="zoom: 40%;" /></p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">def</span> <span class="n">compute_control</span><span class="p">(</span><span class="n">cur_pose</span><span class="p">,</span> <span class="n">prev_pose</span><span class="p">)</span><span class="o">:</span>

    <span class="n">cur_x</span><span class="p">,</span> <span class="n">cur_y</span><span class="p">,</span> <span class="n">cur_yaw</span> <span class="o">=</span> <span class="n">cur_pose</span>
    <span class="n">prev_x</span><span class="p">,</span> <span class="n">prev_y</span><span class="p">,</span> <span class="n">prev_yaw</span> <span class="o">=</span> <span class="n">prev_pose</span>

    <span class="n">delta_x</span> <span class="o">=</span> <span class="n">cur_x</span> <span class="o">-</span> <span class="n">prev_x</span>
    <span class="n">delta_y</span> <span class="o">=</span> <span class="n">cur_y</span> <span class="o">-</span> <span class="n">prev_y</span>

    <span class="n">delta_rot_1</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">degrees</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">arctan2</span><span class="p">(</span><span class="n">delta_y</span><span class="p">,</span> <span class="n">delta_x</span><span class="p">))</span> <span class="o">-</span> <span class="n">prev_yaw</span>
    <span class="n">delta_trans</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">delta_x</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="n">delta_y</span><span class="o">**</span><span class="mi">2</span> <span class="p">)</span>
    <span class="n">delta_rot_2</span> <span class="o">=</span> <span class="n">cur_yaw</span> <span class="o">-</span> <span class="n">prev_yaw</span> <span class="o">-</span> <span class="n">delta_rot_1</span>

    <span class="k">return</span> <span class="n">delta_rot_1</span><span class="p">,</span> <span class="n">delta_trans</span><span class="p">,</span> <span class="n">delta_rot_2</span>
</code></pre></div></div>

<h3 id="odometry-motion-model">Odometry Motion Model</h3>

<p>This describes the likelihood of achieving a current position given a control input and a previous position. <code class="language-plaintext highlighter-rouge">u</code> represents the actual control input calculated from odometry sensor reading. <code class="language-plaintext highlighter-rouge">curr_pose</code> and <code class="language-plaintext highlighter-rouge">prev_pose</code> are utilized to calculate <code class="language-plaintext highlighter-rouge">u_compute</code> for proposed control input.</p>

<p>We model the probability of the kinematic model of the Gaussian distribution.</p>

<ul>
  <li>mu: mean value</li>
  <li>sigma: degree of dispersion</li>
  <li>x: the value that the probability is calculated</li>
</ul>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">def</span> <span class="n">odom_motion_model</span><span class="p">(</span><span class="n">cur_pose</span><span class="p">,</span> <span class="n">prev_pose</span><span class="p">,</span> <span class="n">u</span><span class="p">)</span><span class="o">:</span>

    <span class="n">u_compute</span> <span class="o">=</span> <span class="n">compute_control</span><span class="p">(</span><span class="n">cur_pose</span><span class="p">,</span> <span class="n">prev_pose</span><span class="p">)</span>
    
    <span class="n">rot1_val</span> <span class="o">=</span> <span class="n">mapper</span><span class="p">.</span><span class="n">normalize_angle</span><span class="p">(</span><span class="n">u_compute</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    <span class="n">trans1_val</span> <span class="o">=</span> <span class="n">u_compute</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
    <span class="n">rot2_val</span> <span class="o">=</span> <span class="n">mapper</span><span class="p">.</span><span class="n">normalize_angle</span><span class="p">(</span><span class="n">u_compute</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>

    <span class="n">rot1_mu</span> <span class="o">=</span> <span class="n">mapper</span><span class="p">.</span><span class="n">normalize_angle</span><span class="p">(</span><span class="n">u</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    <span class="n">trans1_mu</span> <span class="o">=</span> <span class="n">u</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
    <span class="n">rot2_mu</span> <span class="o">=</span> <span class="n">mapper</span><span class="p">.</span><span class="n">normalize_angle</span><span class="p">(</span><span class="n">u</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>

    <span class="n">prob_rot1</span>   <span class="o">=</span> <span class="n">loc</span><span class="p">.</span><span class="n">gaussian</span><span class="p">(</span><span class="n">rot1_val</span><span class="p">,</span> <span class="n">rot1_mu</span><span class="p">,</span> <span class="n">loc</span><span class="p">.</span><span class="n">odom_rot_sigma</span><span class="p">)</span>
    <span class="n">prob_trans1</span> <span class="o">=</span> <span class="n">loc</span><span class="p">.</span><span class="n">gaussian</span><span class="p">(</span><span class="n">trans1_val</span><span class="p">,</span> <span class="n">trans1_mu</span><span class="p">,</span> <span class="n">loc</span><span class="p">.</span><span class="n">odom_trans_sigma</span><span class="p">)</span>
    <span class="n">prob_rot2</span>   <span class="o">=</span> <span class="n">loc</span><span class="p">.</span><span class="n">gaussian</span><span class="p">(</span><span class="n">rot2_val</span><span class="p">,</span> <span class="n">rot2_mu</span><span class="p">,</span> <span class="n">loc</span><span class="p">.</span><span class="n">odom_rot_sigma</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">prob_rot1</span> <span class="o">*</span> <span class="n">prob_trans1</span> <span class="o">*</span> <span class="n">prob_rot2</span>
</code></pre></div></div>

<h3 id="prediction-step">Prediction Step</h3>

<p>The prediction step requires two inputs: <code class="language-plaintext highlighter-rouge">cur_odom</code> and <code class="language-plaintext highlighter-rouge">prev_odom</code>, which represent the current and previous positions of the robot as detected by sensors. These positions are used to compute the control input <code class="language-plaintext highlighter-rouge">u</code>.</p>

<p>We have two groups of 3 layers loop in this function. The outside 3 layers loop traverse all the previous states. The inside 3 layers loop traverse all the current states. The transition probability is calculated by the previous state and current state.</p>

<p>Every prediction belief is the summation of all prior belief times transition probability. In order to accelerate the process, we only calculate the states that <code class="language-plaintext highlighter-rouge">loc.bel</code> (prior belief) is not zero.</p>

<p>Finally we normalize <code class="language-plaintext highlighter-rouge">loc.bel_bar</code> to make sure that the probability distribution add up to one.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">def</span> <span class="n">prediction_step</span><span class="p">(</span><span class="n">cur_odom</span><span class="p">,</span> <span class="n">prev_odom</span><span class="p">)</span><span class="o">:</span>
    <span class="s">""" Prediction step of the Bayes Filter.</span><span class="err">
</span><span class="s">    """</span>
    <span class="cp"># get the control value given curr odom and prev odom
</span>    <span class="n">u</span> <span class="o">=</span> <span class="n">compute_control</span><span class="p">(</span> <span class="n">cur_odom</span><span class="p">,</span> <span class="n">prev_odom</span> <span class="p">)</span>

    <span class="cp"># init bel bar to all zeroes
</span>    <span class="n">bel_bar_tmp</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">mapper</span><span class="p">.</span><span class="n">MAX_CELLS_X</span><span class="p">,</span> <span class="n">mapper</span><span class="p">.</span><span class="n">MAX_CELLS_Y</span><span class="p">,</span> <span class="n">mapper</span><span class="p">.</span><span class="n">MAX_CELLS_A</span><span class="p">))</span>

    <span class="n">threshold</span> <span class="o">=</span> <span class="mf">0.0001</span>
    
    <span class="k">for</span> <span class="n">prev_x</span> <span class="n">in</span> <span class="n">range</span><span class="p">(</span><span class="n">mapper</span><span class="p">.</span><span class="n">MAX_CELLS_X</span><span class="p">)</span><span class="o">:</span>
        <span class="k">for</span> <span class="n">prev_y</span> <span class="n">in</span> <span class="n">range</span><span class="p">(</span><span class="n">mapper</span><span class="p">.</span><span class="n">MAX_CELLS_Y</span><span class="p">)</span><span class="o">:</span>
            <span class="k">for</span> <span class="n">prev_yaw</span> <span class="n">in</span> <span class="n">range</span><span class="p">(</span><span class="n">mapper</span><span class="p">.</span><span class="n">MAX_CELLS_A</span><span class="p">)</span><span class="o">:</span>

                <span class="k">if</span> <span class="p">(</span><span class="n">loc</span><span class="p">.</span><span class="n">bel</span><span class="p">[</span><span class="n">prev_x</span><span class="p">,</span> <span class="n">prev_y</span><span class="p">,</span> <span class="n">prev_yaw</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">threshold</span><span class="p">)</span><span class="o">:</span>
                    <span class="k">continue</span>

                <span class="k">for</span> <span class="n">cur_x</span> <span class="n">in</span> <span class="n">range</span><span class="p">(</span><span class="n">mapper</span><span class="p">.</span><span class="n">MAX_CELLS_X</span><span class="p">)</span><span class="o">:</span>
                    <span class="k">for</span> <span class="n">cur_y</span> <span class="n">in</span> <span class="n">range</span><span class="p">(</span><span class="n">mapper</span><span class="p">.</span><span class="n">MAX_CELLS_Y</span><span class="p">)</span><span class="o">:</span>
                        <span class="k">for</span> <span class="n">cur_yaw</span> <span class="n">in</span> <span class="n">range</span><span class="p">(</span><span class="n">mapper</span><span class="p">.</span><span class="n">MAX_CELLS_A</span><span class="p">)</span><span class="o">:</span>
                            <span class="n">cur_pose</span> <span class="o">=</span> <span class="n">mapper</span><span class="p">.</span><span class="n">from_map</span><span class="p">(</span><span class="n">cur_x</span><span class="p">,</span> <span class="n">cur_y</span><span class="p">,</span> <span class="n">cur_yaw</span><span class="p">)</span>
                            <span class="n">prev_pose</span> <span class="o">=</span> <span class="n">mapper</span><span class="p">.</span><span class="n">from_map</span><span class="p">(</span><span class="n">prev_x</span><span class="p">,</span> <span class="n">prev_y</span><span class="p">,</span> <span class="n">prev_yaw</span><span class="p">)</span>
                            <span class="n">transition_prob</span> <span class="o">=</span> <span class="n">odom_motion_model</span><span class="p">(</span><span class="n">cur_pose</span><span class="p">,</span> <span class="n">prev_pose</span><span class="p">,</span> <span class="n">u</span><span class="p">)</span>

                            <span class="n">bel_prior</span> <span class="o">=</span> <span class="n">loc</span><span class="p">.</span><span class="n">bel</span><span class="p">[</span><span class="n">prev_x</span><span class="p">,</span> <span class="n">prev_y</span><span class="p">,</span> <span class="n">prev_yaw</span><span class="p">]</span>
                            <span class="n">bel_bar_tmp</span><span class="p">[</span><span class="n">cur_x</span><span class="p">,</span> <span class="n">cur_y</span><span class="p">,</span> <span class="n">cur_yaw</span><span class="p">]</span> <span class="o">+=</span> <span class="n">transition_prob</span> <span class="o">*</span> <span class="n">bel_prior</span>
    
    <span class="cp"># normalize to 1
</span>    <span class="n">loc</span><span class="p">.</span><span class="n">bel_bar</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">true_divide</span><span class="p">(</span><span class="n">bel_bar_tmp</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">sum</span><span class="p">(</span><span class="n">bel_bar_tmp</span><span class="p">))</span>
</code></pre></div></div>

<h3 id="sensor-model">Sensor Model</h3>

<p>The sensor model computes the probability that the sensor reading is correct given a state. It requires to return a 1D array of size 18 which is the likelihoods of each individual sensor measurement.</p>

<p>Like the motion model, we also model the sensor model as gaussian distribution. The input of gaussian function is the current sensor measurements that we took every 20 degrees during the turing around, which are stored in <code class="language-plaintext highlighter-rouge">loc.obs_range_data</code>.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">def</span> <span class="n">sensor_model</span><span class="p">(</span><span class="n">obs</span><span class="p">)</span><span class="o">:</span>
    <span class="s">""" This is the equivalent of p(z|x).</span><span class="err">
</span><span class="s">    """</span>

    <span class="n">prob_array</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="n">in</span> <span class="n">range</span><span class="p">(</span><span class="n">mapper</span><span class="p">.</span><span class="n">OBS_PER_CELL</span><span class="p">)</span><span class="o">:</span>
        <span class="n">prob_array</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">loc</span><span class="p">.</span><span class="n">gaussian</span><span class="p">(</span><span class="n">loc</span><span class="p">.</span><span class="n">obs_range_data</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">obs</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">loc</span><span class="p">.</span><span class="n">sensor_sigma</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">prob_array</span>
</code></pre></div></div>

<h3 id="update-step">Update Step</h3>

<p>We dpdate the probabilities in <code class="language-plaintext highlighter-rouge">loc.bel</code> based on <code class="language-plaintext highlighter-rouge">loc.bel_bar</code> and the sensor model. It combines all the above functions.</p>

<p>we iterate through all the possible current poses of the robot by 3 layers of loops. For every possible pose, we find the prediction belief and multiply that by the measurement probability. Then we get the post probability.</p>

<p>Finally, we need to normalize <code class="language-plaintext highlighter-rouge">loc.bel</code> to make sure all its elements add up to one.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">def</span> <span class="n">update_step</span><span class="p">()</span><span class="o">:</span>
    <span class="s">""" Update step of the Bayes Filter.</span><span class="err">
</span><span class="s">    """</span>
    <span class="k">for</span> <span class="n">cur_x</span> <span class="n">in</span> <span class="n">range</span><span class="p">(</span><span class="n">mapper</span><span class="p">.</span><span class="n">MAX_CELLS_X</span><span class="p">)</span><span class="o">:</span>
        <span class="k">for</span> <span class="n">cur_y</span> <span class="n">in</span> <span class="n">range</span><span class="p">(</span><span class="n">mapper</span><span class="p">.</span><span class="n">MAX_CELLS_Y</span><span class="p">)</span><span class="o">:</span>
            <span class="k">for</span> <span class="n">cur_yaw</span> <span class="n">in</span> <span class="n">range</span><span class="p">(</span><span class="n">mapper</span><span class="p">.</span><span class="n">MAX_CELLS_A</span><span class="p">)</span><span class="o">:</span>
                <span class="n">bel_bar</span> <span class="o">=</span> <span class="n">loc</span><span class="p">.</span><span class="n">bel_bar</span><span class="p">[</span><span class="n">cur_x</span><span class="p">,</span> <span class="n">cur_y</span><span class="p">,</span> <span class="n">cur_yaw</span><span class="p">]</span>
                <span class="n">obs</span> <span class="o">=</span> <span class="n">mapper</span><span class="p">.</span><span class="n">get_views</span><span class="p">(</span><span class="n">cur_x</span><span class="p">,</span> <span class="n">cur_y</span><span class="p">,</span> <span class="n">cur_yaw</span><span class="p">)</span> 

                <span class="n">measure_probs</span> <span class="o">=</span> <span class="n">sensor_model</span><span class="p">(</span><span class="n">obs</span><span class="p">)</span>
                <span class="n">measure_prob_mul</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">prod</span><span class="p">(</span><span class="n">measure_probs</span><span class="p">)</span>
                
                <span class="n">loc</span><span class="p">.</span><span class="n">bel</span><span class="p">[</span><span class="n">cur_x</span><span class="p">,</span> <span class="n">cur_y</span><span class="p">,</span> <span class="n">cur_yaw</span><span class="p">]</span> <span class="o">=</span> <span class="n">measure_prob_mul</span> <span class="o">*</span> <span class="n">bel_bar</span>
    
    <span class="cp"># normalize to 1
</span>    <span class="n">loc</span><span class="p">.</span><span class="n">bel</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">true_divide</span><span class="p">(</span><span class="n">loc</span><span class="p">.</span><span class="n">bel</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">sum</span><span class="p">(</span><span class="n">loc</span><span class="p">.</span><span class="n">bel</span><span class="p">))</span>
</code></pre></div></div>

<h2 id="demonstration">Demonstration</h2>

<p>Green trajectory is ground truth; red trajectory is sensor reading; blue trajectory is calculated by Bayes filter.</p>

<p><img src="/FastRobots/images/Lab10/map.png" alt="map" style="zoom:40%;" /></p>

<p>We can also see the distribution of probabilities that different grids have.</p>

<p><img src="/FastRobots/images/Lab10/belif.png" alt="belif" style="zoom:40%;" /></p>

<p>This video demonstrate the whole process of how bayes filter works.</p>

<iframe width="1727" height="847" src="https://www.youtube.com/embed/w9LM0d6LvbY" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Introduction]]></summary></entry><entry><title type="html">Lab9</title><link href="http://localhost:4000/FastRobots/jekyll/update/2024/04/20/Lab9.html" rel="alternate" type="text/html" title="Lab9" /><published>2024-04-20T00:00:00-04:00</published><updated>2024-04-20T00:00:00-04:00</updated><id>http://localhost:4000/FastRobots/jekyll/update/2024/04/20/Lab9</id><content type="html" xml:base="http://localhost:4000/FastRobots/jekyll/update/2024/04/20/Lab9.html"><![CDATA[<h2 id="control">Control</h2>

<h3 id="angular-speed-control">Angular speed control</h3>

<blockquote>
  <p>You will likely need to low pass filter the gyroscope values - read up on how we did that with a complementary LPF in <a href="https://fastrobotscornell.github.io/FastRobots/lectures/FastRobots-4-IMU.pdf">Lecture 4, slide 23</a>.</p>
</blockquote>

<p>Low pass filter:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">const</span> <span class="kt">float</span> <span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.1</span><span class="p">;</span>
<span class="kt">float</span> <span class="n">history_gyr</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>

<span class="kt">float</span> <span class="nf">LPF_gyr</span><span class="p">(</span><span class="kt">float</span> <span class="n">curr_gyr</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">float</span> <span class="n">filtered_gyr</span> <span class="o">=</span> <span class="n">alpha</span> <span class="o">*</span> <span class="n">curr_gyr</span> <span class="o">+</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">alpha</span><span class="p">)</span> <span class="o">*</span> <span class="n">history_gyr</span><span class="p">;</span>
    <span class="n">history_gyr</span> <span class="o">=</span> <span class="n">filtered_gyr</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">filtered_gyr</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<blockquote>
  <p>One way to make the robot spin even slower is to block one set of wheels while turning the others. This means that your robot is now driving in a slight circle (rather than on-axis), which will make post-processing of data slightly more difficult, but allow you to capture data more reliably.</p>
</blockquote>

<p>I didn’t use this method. Instead, I always let the left wheel and right wheel spin under opposite control values.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int16_t</span><span class="p">,</span> <span class="kt">int16_t</span><span class="o">&gt;</span> <span class="n">angle_speed_pid</span><span class="p">(</span><span class="kt">int16_t</span> <span class="n">error</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">make_pair</span><span class="p">(</span><span class="o">-</span><span class="n">control</span><span class="p">,</span> <span class="n">control</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<blockquote>
  <p>Please quantify and/or use graphs to document that your PID controller works well, and upload a video that shows how your robot turns.</p>
</blockquote>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="n">yaw</span> <span class="o">&gt;</span> <span class="mi">400</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">stop</span><span class="p">();</span>
    <span class="n">auto_running</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
<span class="p">}</span>
<span class="n">keepYawSpeed</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="o">-</span><span class="n">filtered_gyr</span><span class="p">);</span>
</code></pre></div></div>

<p><img src="/FastRobots/images/Lab9/ttx.png" alt="ttx" style="zoom:40%;" /></p>

<blockquote>
  <p>Given the slowest speed you are able to achieve, how much does the orientation of the robot change during a single measurement? If you were spinning in the middle of a 4x4m2 empty, square room, what kind of accuracy can you expect?</p>
</blockquote>

<p>About 5 degrees</p>

<h2 id="read-data">Read data</h2>

<p>On every marked point, I collected 2 copy of data,</p>

<p><img src="/FastRobots/images/Lab9/csvfiles.png" alt="csvfiles" style="zoom: 67%;" /></p>

<p>each csv file looks like this,</p>

<p><img src="/FastRobots/images/Lab9/csvcontent.png" alt="csvcontent" style="zoom:50%;" /></p>

<h2 id="plot-polar-graph">Plot Polar Graph</h2>

<p>The following code read raw data files and convert yaw angle and distance towards x and y coordinates.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">poses</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">-3,-2</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">0,0</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">0,3</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">5,-3</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">5,3</span><span class="sh">"</span><span class="p">]</span>

<span class="k">for</span> <span class="n">pos</span> <span class="ow">in</span> <span class="n">poses</span><span class="p">:</span>
    <span class="c1"># create a new polar plot
</span>    <span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">subplot_kw</span><span class="o">=</span><span class="p">{</span><span class="sh">'</span><span class="s">polar</span><span class="sh">'</span><span class="p">:</span> <span class="bp">True</span><span class="p">})</span>

    <span class="n">file_path_1</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">csv_folder</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="sh">"</span><span class="s">-1.csv</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">file_paht_2</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">csv_folder</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="sh">"</span><span class="s">-2.csv</span><span class="sh">"</span><span class="p">)</span>

    <span class="n">df1</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="n">file_path_1</span><span class="p">)</span>
    <span class="n">df2</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="n">file_paht_2</span><span class="p">)</span>

    <span class="n">degree_angles</span> <span class="o">=</span> <span class="n">df1</span><span class="p">[</span><span class="sh">"</span><span class="s">yaw</span><span class="sh">"</span><span class="p">].</span><span class="nf">tolist</span><span class="p">()</span>
    <span class="n">rad_angles</span> <span class="o">=</span> <span class="p">[</span><span class="n">elem</span> <span class="o">*</span> <span class="o">-</span><span class="n">np</span><span class="p">.</span><span class="n">pi</span> <span class="o">/</span> <span class="mi">180</span> <span class="k">for</span> <span class="n">elem</span> <span class="ow">in</span> <span class="n">degree_angles</span><span class="p">]</span>
    <span class="n">distances</span> <span class="o">=</span> <span class="n">df1</span><span class="p">[</span><span class="sh">"</span><span class="s">distance</span><span class="sh">"</span><span class="p">].</span><span class="nf">tolist</span><span class="p">()</span>
    <span class="n">distances</span> <span class="o">=</span> <span class="p">[</span><span class="n">dist</span> <span class="o">+</span> <span class="mi">40</span> <span class="k">for</span> <span class="n">dist</span> <span class="ow">in</span> <span class="n">distances</span><span class="p">]</span>

    <span class="n">ax</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">rad_angles</span><span class="p">,</span> <span class="n">distances</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">"</span><span class="s">blue</span><span class="sh">"</span><span class="p">)</span>

    <span class="n">degree_angles</span> <span class="o">=</span> <span class="n">df2</span><span class="p">[</span><span class="sh">"</span><span class="s">yaw</span><span class="sh">"</span><span class="p">].</span><span class="nf">tolist</span><span class="p">()</span>
    <span class="n">rad_angles</span> <span class="o">=</span> <span class="p">[</span><span class="n">elem</span> <span class="o">*</span> <span class="o">-</span><span class="n">np</span><span class="p">.</span><span class="n">pi</span> <span class="o">/</span> <span class="mi">180</span> <span class="k">for</span> <span class="n">elem</span> <span class="ow">in</span> <span class="n">degree_angles</span><span class="p">]</span>
    <span class="n">distances</span> <span class="o">=</span> <span class="n">df2</span><span class="p">[</span><span class="sh">"</span><span class="s">distance</span><span class="sh">"</span><span class="p">].</span><span class="nf">tolist</span><span class="p">()</span>
    <span class="n">distances</span> <span class="o">=</span> <span class="p">[</span><span class="n">dist</span> <span class="o">+</span> <span class="mi">40</span> <span class="k">for</span> <span class="n">dist</span> <span class="ow">in</span> <span class="n">distances</span><span class="p">]</span>
		
    <span class="c1"># use two different colors to display two series of data
</span>    <span class="n">ax</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">rad_angles</span><span class="p">,</span> <span class="n">distances</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">"</span><span class="s">orange</span><span class="sh">"</span><span class="p">)</span>

    <span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="n">pos</span><span class="p">,</span> <span class="n">loc</span><span class="o">=</span><span class="sh">'</span><span class="s">center</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontweight</span><span class="o">=</span><span class="sh">'</span><span class="s">bold</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div>

<p>The polar plots:</p>

<p><img src="/FastRobots/images/Lab9/-3-2.png" alt="-3-2" style="zoom:50%;" /></p>

<p><img src="/FastRobots/images/Lab9/00.png" alt="00" style="zoom:50%;" /></p>

<p><img src="/FastRobots/images/Lab9/03.png" alt="03" style="zoom:50%;" /></p>

<p><img src="/FastRobots/images/Lab9/5-3.png" alt="5-3" style="zoom:50%;" /></p>

<p><img src="/FastRobots/images/Lab9/53.png" alt="53" style="zoom:50%;" /></p>

<h2 id="merge-and-plot-your-readings">Merge and Plot your readings</h2>

<p>I use five different colors to display data that are read from five different positions.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">poses</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">-3,-2</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">0,0</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">0,3</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">5,-3</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">5,3</span><span class="sh">"</span><span class="p">]</span>
<span class="n">colors</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">blue</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">orange</span><span class="sh">"</span><span class="p">,</span> <span class="sh">'</span><span class="s">red</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">green</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">purple</span><span class="sh">'</span><span class="p">]</span>
<span class="n">suffixes</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">-1.csv</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">-2.csv</span><span class="sh">"</span><span class="p">]</span>

<span class="k">for</span> <span class="n">pos</span><span class="p">,</span> <span class="n">curr_color</span> <span class="ow">in</span> <span class="nf">zip</span><span class="p">(</span><span class="n">poses</span><span class="p">,</span> <span class="n">colors</span><span class="p">):</span>
    <span class="n">x_base</span><span class="p">,</span> <span class="n">y_base</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="n">pos</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">,</span><span class="sh">"</span><span class="p">)))</span>
    <span class="k">for</span> <span class="n">suffix</span> <span class="ow">in</span> <span class="n">suffixes</span><span class="p">:</span>
        <span class="n">file_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">csv_folder</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="n">suffix</span><span class="p">)</span>
        <span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="n">file_path</span><span class="p">)</span>

        <span class="n">degree_angles</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="sh">"</span><span class="s">yaw</span><span class="sh">"</span><span class="p">].</span><span class="nf">tolist</span><span class="p">()</span>
        <span class="n">rad_angles</span> <span class="o">=</span> <span class="p">[</span><span class="n">elem</span> <span class="o">*</span> <span class="o">-</span><span class="n">np</span><span class="p">.</span><span class="n">pi</span> <span class="o">/</span> <span class="mi">180</span> <span class="k">for</span> <span class="n">elem</span> <span class="ow">in</span> <span class="n">degree_angles</span><span class="p">]</span>

        <span class="n">distances</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="sh">"</span><span class="s">distance</span><span class="sh">"</span><span class="p">].</span><span class="nf">tolist</span><span class="p">()</span>
        <span class="n">x_coord</span> <span class="o">=</span> <span class="p">[(</span><span class="n">dist</span> <span class="o">+</span> <span class="mi">40</span><span class="p">)</span> <span class="o">*</span> <span class="n">np</span><span class="p">.</span><span class="nf">cos</span><span class="p">(</span><span class="n">rad_angle</span><span class="p">)</span> <span class="o">+</span> <span class="n">x_base</span> <span class="o">*</span> <span class="mi">304</span> <span class="k">for</span> <span class="n">dist</span><span class="p">,</span> <span class="n">rad_angle</span> <span class="ow">in</span> <span class="nf">zip</span><span class="p">(</span><span class="n">distances</span><span class="p">,</span> <span class="n">rad_angles</span><span class="p">)]</span>
        <span class="n">y_coord</span> <span class="o">=</span> <span class="p">[(</span><span class="n">dist</span> <span class="o">+</span> <span class="mi">40</span><span class="p">)</span> <span class="o">*</span> <span class="n">np</span><span class="p">.</span><span class="nf">sin</span><span class="p">(</span><span class="n">rad_angle</span><span class="p">)</span> <span class="o">+</span> <span class="n">y_base</span> <span class="o">*</span> <span class="mi">304</span> <span class="k">for</span> <span class="n">dist</span><span class="p">,</span> <span class="n">rad_angle</span> <span class="ow">in</span> <span class="nf">zip</span><span class="p">(</span><span class="n">distances</span><span class="p">,</span> <span class="n">rad_angles</span><span class="p">)]</span>

        <span class="n">plt</span><span class="p">.</span><span class="nf">scatter</span><span class="p">(</span><span class="n">x_coord</span><span class="p">,</span> <span class="n">y_coord</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="n">curr_color</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div>

<p>Graph:</p>

<p><img src="/FastRobots/images/Lab9/merge.png" alt="merge" style="zoom:50%;" /></p>

<h2 id="convert-to-line-based-map">Convert to Line-Based Map</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x_wall1</span> <span class="o">=</span> <span class="p">[</span><span class="o">-</span><span class="mi">1721</span><span class="p">,</span> <span class="o">-</span><span class="mi">628</span><span class="p">,</span> <span class="o">-</span><span class="mi">799</span><span class="p">,</span> <span class="mi">1895</span><span class="p">,</span> <span class="mi">2075</span><span class="p">,</span> <span class="mi">539</span><span class="p">,</span> <span class="mi">447</span><span class="p">,</span> <span class="o">-</span><span class="mi">132</span><span class="p">,</span> <span class="o">-</span><span class="mi">31</span><span class="p">,</span> <span class="o">-</span><span class="mi">1392</span><span class="p">,</span> <span class="o">-</span><span class="mi">1721</span><span class="p">]</span>
<span class="n">y_wall1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">227</span><span class="p">,</span> <span class="mi">1248</span><span class="p">,</span> <span class="mi">1454</span><span class="p">,</span> <span class="o">-</span><span class="mi">1127</span><span class="p">,</span> <span class="o">-</span><span class="mi">1319</span><span class="p">,</span> <span class="o">-</span><span class="mi">543</span><span class="p">,</span> <span class="o">-</span><span class="mi">656</span><span class="p">,</span> <span class="o">-</span><span class="mi">1230</span><span class="p">,</span> <span class="o">-</span><span class="mi">1535</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>

<span class="n">x_wall2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">644</span><span class="p">,</span> <span class="mi">1360</span><span class="p">,</span> <span class="mi">1404</span><span class="p">,</span> <span class="mi">728</span><span class="p">,</span> <span class="mi">644</span><span class="p">]</span>
<span class="n">y_wall2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">733</span><span class="p">,</span> <span class="mi">831</span><span class="p">,</span> <span class="mi">296</span><span class="p">,</span> <span class="mi">159</span><span class="p">,</span> <span class="mi">733</span><span class="p">]</span>
</code></pre></div></div>

<p>Line-based map is shown as below,</p>

<p><img src="/FastRobots/images/Lab9/walls.png" alt="walls" style="zoom:50%;" /></p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Control]]></summary></entry><entry><title type="html">Lab8</title><link href="http://localhost:4000/FastRobots/jekyll/update/2024/04/17/Lab8.html" rel="alternate" type="text/html" title="Lab8" /><published>2024-04-17T00:00:00-04:00</published><updated>2024-04-17T00:00:00-04:00</updated><id>http://localhost:4000/FastRobots/jekyll/update/2024/04/17/Lab8</id><content type="html" xml:base="http://localhost:4000/FastRobots/jekyll/update/2024/04/17/Lab8.html"><![CDATA[<h1 id="task-b-orientation-control">Task B: Orientation Control</h1>

<blockquote>
  <p>Your robot must start at the designated line (&lt;4m from the wall), drive fast forward, and when the robot is within 3ft (914mm = 3 floor tiles in the lab) from the wall, initiate a 180 degree turn.</p>
</blockquote>

<h2 id="video">Video</h2>

<iframe width="1580" height="683" src="https://www.youtube.com/embed/Wl64yXqeKkM" title="Fast Robot - U Turn" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>

<h2 id="how-to-achieve-this">How to achieve this</h2>

<h3 id="1-adjust-range-of-gyroscope">1. Adjust range of gyroscope</h3>

<p>The default range for the gyroscope of SparkFun 9DoF IMU is +-250 degrees per second, which is enough for normal rotation. However, in the lab8, the maximum angle speed can reach more than 700 dps, so I have to adjust the full range of the sensor.</p>

<p><img src="/FastRobots/images/Lab8/datasheet.png" alt="datasheet" style="zoom: 40%;" /></p>

<p>According to the datasheet, it has 4 different full-scale ranges to choose for gyroscope. I use the following code to select mode 2,</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ICM_20948_fss_t</span> <span class="n">myFSS</span><span class="p">;</span>
<span class="n">myFSS</span><span class="p">.</span><span class="n">g</span> <span class="o">=</span> <span class="n">dps1000</span><span class="p">;</span> <span class="c1">// (ICM_20948_GYRO_CONFIG_1_FS_SEL_e)</span>
                <span class="c1">// dps250</span>
                <span class="c1">// dps500</span>
                <span class="c1">// dps1000</span>
                <span class="c1">// dps2000</span>
<span class="n">myICM</span><span class="p">.</span><span class="n">setFullScale</span><span class="p">(</span><span class="n">ICM_20948_Internal_Gyr</span><span class="p">,</span> <span class="n">myFSS</span><span class="p">);</span>
</code></pre></div></div>

<h3 id="2-angle-pid-controller">2. Angle PID controller</h3>

<p>I choose these parameters for the angle pid controller,</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">PIDParam</span> <span class="n">angle_param</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">.</span><span class="n">Kp</span> <span class="o">=</span> <span class="mi">50</span><span class="p">,</span>
    <span class="p">.</span><span class="n">Ki</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span>
    <span class="p">.</span><span class="n">Kd</span> <span class="o">=</span> <span class="mi">15</span>
<span class="p">};</span>
</code></pre></div></div>

<p>The pid controller that generate orientation control values,</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int16_t</span><span class="p">,</span> <span class="kt">int16_t</span><span class="o">&gt;</span> <span class="n">angle_pid</span><span class="p">(</span><span class="kt">int16_t</span> <span class="n">error</span><span class="p">)</span> <span class="p">{</span>

    <span class="n">angle_var</span><span class="p">.</span><span class="n">integral</span> <span class="o">+=</span> <span class="n">angle_param</span><span class="p">.</span><span class="n">Ki</span> <span class="o">*</span> <span class="n">error</span><span class="p">;</span>

    <span class="kt">int16_t</span> <span class="n">control</span> <span class="o">=</span> <span class="n">angle_param</span><span class="p">.</span><span class="n">Kp</span> <span class="o">*</span> <span class="n">error</span> 
        <span class="o">+</span> <span class="n">angle_param</span><span class="p">.</span><span class="n">Kd</span> <span class="o">*</span> <span class="p">(</span><span class="n">error</span> <span class="o">-</span> <span class="n">angle_var</span><span class="p">.</span><span class="n">prev_error</span><span class="p">)</span>
        <span class="o">+</span> <span class="n">angle_var</span><span class="p">.</span><span class="n">integral</span><span class="p">;</span>
    
    <span class="k">if</span> <span class="p">(</span><span class="n">control</span> <span class="o">&gt;=</span> <span class="n">MAX_CONTROL</span><span class="p">)</span> <span class="n">control</span> <span class="o">=</span> <span class="n">MAX_CONTROL</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">control</span> <span class="o">&lt;=</span> <span class="n">MIN_CONTROL</span><span class="p">)</span> <span class="n">control</span> <span class="o">=</span> <span class="n">MIN_CONTROL</span><span class="p">;</span>

    <span class="n">angle_var</span><span class="p">.</span><span class="n">prev_error</span> <span class="o">=</span> <span class="n">error</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">make_pair</span><span class="p">(</span><span class="o">-</span><span class="n">control</span><span class="p">,</span> <span class="n">control</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="3-control-straight-power-and-orientation-at-the-same-time">3. Control straight power and orientation at the same time</h3>

<p>During this lab, we need to keep the car moving straightly and doing a sharp U turn then quickly moving back. The function <code class="language-plaintext highlighter-rouge">forwardKeepYaw</code> is designed for this purpose:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">forwardKeepYaw</span><span class="p">(</span><span class="kt">int16_t</span> <span class="n">setpoint_yaw</span><span class="p">,</span> <span class="kt">int16_t</span> <span class="n">yaw</span><span class="p">,</span> <span class="kt">int16_t</span> <span class="n">straight_control</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int16_t</span><span class="p">,</span> <span class="kt">int16_t</span><span class="o">&gt;</span> <span class="n">two_controlls</span> <span class="o">=</span> <span class="n">angle_pid</span><span class="p">(</span><span class="n">yaw</span> <span class="o">-</span> <span class="n">setpoint_yaw</span><span class="p">);</span>

    <span class="c1">// if turning component is too large, straight control cannot be applied too much on motors.</span>
    <span class="kt">int16_t</span> <span class="n">max_straight_component</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">MAX_CONTROL</span> <span class="o">-</span> <span class="n">two_controlls</span><span class="p">.</span><span class="n">first</span><span class="p">,</span> <span class="n">MAX_CONTROL</span> <span class="o">-</span> <span class="n">two_controlls</span><span class="p">.</span><span class="n">second</span><span class="p">);</span>

    <span class="kt">int16_t</span> <span class="n">straight_component</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">straight_control</span><span class="p">,</span> <span class="n">max_straight_component</span><span class="p">);</span>

    <span class="n">ctrl_record</span><span class="p">.</span><span class="n">left_control</span> <span class="o">=</span> <span class="n">two_controlls</span><span class="p">.</span><span class="n">first</span> <span class="o">+</span> <span class="n">straight_component</span><span class="p">;</span>
    <span class="n">ctrl_record</span><span class="p">.</span><span class="n">right_control</span> <span class="o">=</span> <span class="n">two_controlls</span><span class="p">.</span><span class="n">second</span> <span class="o">+</span> <span class="n">straight_component</span><span class="p">;</span>
    <span class="n">left_wheel_control</span><span class="p">(</span><span class="n">two_controlls</span><span class="p">.</span><span class="n">first</span> <span class="o">+</span> <span class="n">straight_component</span><span class="p">);</span>
    <span class="n">right_wheel_control</span><span class="p">(</span><span class="n">two_controlls</span><span class="p">.</span><span class="n">second</span> <span class="o">+</span> <span class="n">straight_component</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="4-start-turning-at-given-distance">4. Start turning at given distance</h3>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="n">distance</span> <span class="o">&gt;</span> <span class="n">goal_distance</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">forwardKeepYaw</span><span class="p">(</span><span class="n">goal_yaw</span><span class="p">,</span> <span class="n">yaw</span><span class="p">,</span> <span class="mi">900</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">else</span> <span class="p">{</span>
    <span class="n">is_turning</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>

    <span class="n">turn_start_ms</span> <span class="o">=</span> <span class="n">curr_ms</span><span class="p">;</span>
    <span class="n">turn_end_yaw</span> <span class="o">=</span> <span class="n">yaw</span> <span class="o">-</span> <span class="mf">180.0</span><span class="p">;</span>

    <span class="n">goal_yaw</span> <span class="o">=</span> <span class="n">turn_end_yaw</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>When current distance is larger than required turning distance, the car moves forward with 90% of throttle. And it immediately set its goal yaw angle to the opposite direction when it reaches within the distance limit.</p>

<h3 id="5-graphs-of-recorded-data">5. Graphs of recorded data</h3>

<p>The graph is drawn by the following code,</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">plot_yaw_graph</span><span class="p">():</span>
    <span class="n">timestamps_s</span> <span class="o">=</span> <span class="p">[</span><span class="n">t</span> <span class="o">/</span> <span class="mf">1000.0</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">timestamps_ms</span><span class="p">]</span>
    
    <span class="n">fig</span><span class="p">,</span> <span class="p">(</span><span class="n">ax1</span><span class="p">,</span> <span class="n">ax2</span><span class="p">,</span> <span class="n">ax3</span><span class="p">,</span> <span class="n">ax4</span><span class="p">)</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">12</span><span class="p">))</span>  <span class="c1"># 3 subgraphs
</span>    
    <span class="n">ax1</span><span class="p">.</span><span class="nf">scatter</span><span class="p">(</span><span class="n">timestamps_s</span><span class="p">,</span> <span class="n">setpoint_yaws</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">Setpoints</span><span class="sh">'</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">red</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">ax1</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">Setpoints Over Time</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">ax1</span><span class="p">.</span><span class="nf">legend</span><span class="p">()</span>
    
    <span class="n">ax2</span><span class="p">.</span><span class="nf">scatter</span><span class="p">(</span><span class="n">timestamps_s</span><span class="p">,</span> <span class="n">yaws</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">Yaws</span><span class="sh">'</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">blue</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">ax2</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">Yaws Over Time</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">ax2</span><span class="p">.</span><span class="nf">legend</span><span class="p">()</span>
    
    <span class="n">ax3</span><span class="p">.</span><span class="nf">scatter</span><span class="p">(</span><span class="n">timestamps_s</span><span class="p">,</span> <span class="n">left_pwms</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">Left PWMs</span><span class="sh">'</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">green</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">ax3</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">Left PWMs Over Time</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">ax3</span><span class="p">.</span><span class="nf">legend</span><span class="p">()</span>
    
    <span class="n">ax3</span><span class="p">.</span><span class="nf">scatter</span><span class="p">(</span><span class="n">timestamps_s</span><span class="p">,</span> <span class="n">right_pwms</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">Right PWMs</span><span class="sh">'</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">yellow</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">ax3</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">Right PWMs Over Time</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">ax3</span><span class="p">.</span><span class="nf">legend</span><span class="p">()</span>

    <span class="n">ax4</span><span class="p">.</span><span class="nf">scatter</span><span class="p">(</span><span class="n">timestamps_s</span><span class="p">,</span> <span class="n">gyr_zs</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">Gyro Z</span><span class="sh">'</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">yellow</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">ax4</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">Gyr Z Over Time</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">ax4</span><span class="p">.</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Time</span><span class="sh">'</span><span class="p">)</span>  <span class="c1"># only set x label on the bottom subgraph
</span>    <span class="n">ax4</span><span class="p">.</span><span class="nf">legend</span><span class="p">()</span>
    
    <span class="n">plt</span><span class="p">.</span><span class="nf">tight_layout</span><span class="p">()</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/FastRobots/images/Lab8/record-graph.png" alt="record-graph" style="zoom:85%;" /></p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Task B: Orientation Control]]></summary></entry><entry><title type="html">Lab7</title><link href="http://localhost:4000/FastRobots/jekyll/update/2024/04/14/Lab7.html" rel="alternate" type="text/html" title="Lab7" /><published>2024-04-14T00:00:00-04:00</published><updated>2024-04-14T00:00:00-04:00</updated><id>http://localhost:4000/FastRobots/jekyll/update/2024/04/14/Lab7</id><content type="html" xml:base="http://localhost:4000/FastRobots/jekyll/update/2024/04/14/Lab7.html"><![CDATA[<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
      TeX: {
        equationNumbers: {
          autoNumber: "AMS"
        }
      },
      extensions: ["tex2jax.js"],
      jax: ["input/TeX", "output/HTML-CSS"],
      tex2jax: {
      inlineMath: [ ['$','$'], ["\\(","\\)"] ],
      displayMath: [ ['$$','$$'], ["\\[","\\]"] ],
      processEscapes: true,
      "HTML-CSS": { fonts: ["TeX"] }
    }
  });
  MathJax.Hub.Register.MessageHook("Math Processing Error",function (message) {
        alert("Math Processing Error: "+message[1]);
      });
  MathJax.Hub.Register.MessageHook("TeX Jax - parse error",function (message) {
        alert("Math Processing Error: "+message[1]);
      });
</script>

<script type="text/javascript" async="" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML"></script>

<h2 id="1-estimate-drag-and-momentum">1. Estimate drag and momentum</h2>

<blockquote>
  <p>Choose your step responce, u(t), to be of similar size to the PWM value you used in Lab 6 (to keep the dynamics similar). Pick something between 50%-100% of the maximum u.</p>
</blockquote>

<p>I choose 80% of the maximum u, so the pwm value is 210 out of 255.</p>

<p>The step response of the car is shown in the following graph:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span><span class="p">,</span> <span class="n">ax1</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">()</span>

<span class="n">color</span> <span class="o">=</span> <span class="sh">'</span><span class="s">tab:red</span><span class="sh">'</span>
<span class="n">ax1</span><span class="p">.</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Time (s)</span><span class="sh">'</span><span class="p">)</span>
<span class="n">ax1</span><span class="p">.</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Distance</span><span class="sh">'</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="n">color</span><span class="p">)</span>
<span class="n">ax1</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">timestamps_s</span><span class="p">,</span> <span class="n">distances</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="n">color</span><span class="p">)</span>
<span class="n">ax1</span><span class="p">.</span><span class="nf">tick_params</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="sh">'</span><span class="s">y</span><span class="sh">'</span><span class="p">,</span> <span class="n">labelcolor</span><span class="o">=</span><span class="n">color</span><span class="p">)</span>

<span class="n">ax2</span> <span class="o">=</span> <span class="n">ax1</span><span class="p">.</span><span class="nf">twinx</span><span class="p">()</span>  
<span class="n">color</span> <span class="o">=</span> <span class="sh">'</span><span class="s">tab:blue</span><span class="sh">'</span>
<span class="n">ax2</span><span class="p">.</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Left PWM</span><span class="sh">'</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="n">color</span><span class="p">)</span>  
<span class="n">ax2</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">timestamps_s</span><span class="p">,</span> <span class="n">left_pwms</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="n">color</span><span class="p">)</span>
<span class="n">ax2</span><span class="p">.</span><span class="nf">tick_params</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="sh">'</span><span class="s">y</span><span class="sh">'</span><span class="p">,</span> <span class="n">labelcolor</span><span class="o">=</span><span class="n">color</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">'</span><span class="s">Distance and PWM vs. Time</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/FastRobots/images/Lab7/step-distance-nointerp.jpeg" alt="step-distance-nointerp" style="zoom:40%;" /></p>

<p>Because the distance sensor is operated in a non-blocking way, there are significant steps in the distance measurements. It brings errors in the velocity calculation. To solve this problem, I use interpolatation tool in numpy to guess the distance data between new sensor reading values.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># find non accurate data points
</span><span class="n">to_delete_idxs</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">length</span><span class="p">):</span>
    <span class="n">curr_dist</span> <span class="o">=</span> <span class="n">distances</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>
    <span class="k">if</span> <span class="n">curr_dist</span> <span class="o">==</span> <span class="n">prev_dist</span><span class="p">:</span>
        <span class="n">to_delete_idxs</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">prev_dist</span> <span class="o">=</span> <span class="n">curr_dist</span>
        
<span class="c1"># interpolation
</span><span class="n">interpolated_distances</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">interp</span><span class="p">(</span><span class="n">timestamps_ms</span><span class="p">,</span> <span class="n">new_timestamps</span><span class="p">,</span> <span class="n">new_distances</span><span class="p">)</span>
</code></pre></div></div>

<p>The new graph is shown as follows:</p>

<p><img src="/FastRobots/images/Lab7/stepresponse-distance.jpeg" alt="stepresponse-distance" style="zoom:40%;" /></p>

<blockquote>
  <p>Make sure your step time is long enough to reach steady state (you likely have to use active breaking of the car to avoid crashing into the wall). Make sure to use a peice of foam to avoid hitting to wall and damaging your car.</p>
</blockquote>

<p>The graph above indicates that the speed of car has reached steady state after 1.0s.</p>

<blockquote>
  <p>Show graphs for the TOF sensor output, the (computed) speed, and the motor input. Please ensure that the x-axis is in seconds.</p>
</blockquote>

<p>I compute the speed based on interpolated distance data points, and use multupolynominal smoothing to make the curve of speed easier to analyze:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># calculate velocity based on distance
</span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">length</span><span class="p">):</span>
    <span class="n">velocities</span><span class="p">.</span><span class="nf">append</span><span class="p">((</span><span class="n">distances</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">distances</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">])</span> <span class="o">/</span> <span class="p">(</span><span class="n">timestamps_ms</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">timestamps_ms</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]))</span>
    
<span class="c1"># polynominal smoothing
</span><span class="n">smooth_velocities</span> <span class="o">=</span> <span class="nf">savgol_filter</span><span class="p">(</span><span class="n">velocities</span><span class="p">,</span> <span class="n">window_length</span><span class="o">=</span><span class="mi">16</span><span class="p">,</span> <span class="n">polyorder</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
</code></pre></div></div>

<p>The graph looks like this:</p>

<p><img src="/FastRobots/images/Lab7/step-vel.jpg" alt="step-vel" style="zoom: 40%;" /></p>

<blockquote>
  <p>Measure the steady state speed, 90% rise time, and the speed at 90% risetime. (Note, this doesn’t have to be 90% rise time. You could also use somewhere between 60-90%, but the speed and time must correspond to get an accurate estimate for m.</p>
</blockquote>

<p><img src="/FastRobots/images/Lab7/step-velocity-calc.jpeg" alt="step-velocity-calc" style="zoom:40%;" /></p>

<p>steady state speed: 2.5 m/s = 2.5 mm/ms</p>

<p>90% rise time: 1.08 s = 1080 ms</p>

<blockquote>
  <p>When sending this data back to your laptop, make sure to save the data in a file so that you can use it even after your Jupyter kernal restarts. Consider writing the data to a <a href="https://docs.python.org/3/library/csv.html">CSV</a> file, <a href="https://docs.python.org/3/library/pickle.html">pickle file</a></p>
</blockquote>

<p>The data is saved to the output.csv file using the following code,</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="c1"># Create a DataFrame
</span><span class="n">data</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">'</span><span class="s">timestamp_ms</span><span class="sh">'</span><span class="p">:</span> <span class="n">timestamps_ms</span><span class="p">,</span>
    <span class="sh">'</span><span class="s">distance</span><span class="sh">'</span><span class="p">:</span> <span class="n">distances</span><span class="p">,</span>
    <span class="sh">'</span><span class="s">left_pwm</span><span class="sh">'</span><span class="p">:</span> <span class="n">left_pwms</span><span class="p">,</span>
    <span class="sh">'</span><span class="s">right_pwm</span><span class="sh">'</span><span class="p">:</span> <span class="n">right_pwms</span>
<span class="p">}</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="c1"># Save the DataFrame to a CSV file
</span><span class="n">df</span><span class="p">.</span><span class="nf">to_csv</span><span class="p">(</span><span class="sh">'</span><span class="s">output.csv</span><span class="sh">'</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</code></pre></div></div>

<p>which looks like this,</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># output.csv
</span><span class="n">timestamp_ms</span><span class="p">,</span><span class="n">distance</span><span class="p">,</span><span class="n">left_pwm</span><span class="p">,</span><span class="n">right_pwm</span>
<span class="mi">2</span><span class="p">,</span><span class="mi">1757</span><span class="p">,</span><span class="mi">213</span><span class="p">,</span><span class="mi">147</span>
<span class="mi">17</span><span class="p">,</span><span class="mi">1761</span><span class="p">,</span><span class="mi">213</span><span class="p">,</span><span class="mi">147</span>
<span class="mi">28</span><span class="p">,</span><span class="mi">1761</span><span class="p">,</span><span class="mi">213</span><span class="p">,</span><span class="mi">147</span>
<span class="mi">44</span><span class="p">,</span><span class="mi">1788</span><span class="p">,</span><span class="mi">213</span><span class="p">,</span><span class="mi">147</span>
<span class="mi">61</span><span class="p">,</span><span class="mi">1772</span><span class="p">,</span><span class="mi">213</span><span class="p">,</span><span class="mi">147</span>
<span class="mi">72</span><span class="p">,</span><span class="mi">1772</span><span class="p">,</span><span class="mi">213</span><span class="p">,</span><span class="mi">147</span>
<span class="mi">88</span><span class="p">,</span><span class="mi">1772</span><span class="p">,</span><span class="mi">213</span><span class="p">,</span><span class="mi">147</span>
<span class="p">...</span><span class="bp">...</span>
</code></pre></div></div>

<p>Video of the car running at full speed toward wall:</p>

<iframe width="1634" height="683" src="https://www.youtube.com/embed/yMFCCUuQPRI" title="Fast robot lab7: run towards the wall" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>

<h2 id="2-initialize-kf-python">2. Initialize KF (Python)</h2>

<blockquote>
  <p>Compute the A and B matrix given the terms you found above, and discretize your matrices. Be sure to note the sampling time in your write-up.</p>

</blockquote>

\[d = \frac{u}{\dot{x}}
 = \frac{1}{2.5 \space mm/ms} = 0.4\]

\[m = \frac{-d \times t_{0.9}}{\ln(1-0.9)} = \frac{-0.4 \times 1080}{-2.3} = 187.8\]

<p>Now we have the estimation of parameter $d$ and $m$, we can calculate the matrix $A$ abd $B$。</p>

\[A =
\begin{bmatrix}
0 &amp; 1 \\
0 &amp; -\frac{d}{m} 
\end{bmatrix} 

= \begin{bmatrix}
0 &amp; 1 \\
0 &amp; -0.00213 \\
\end{bmatrix}\]

\[B = \begin{bmatrix}
0 \\
\frac{1}{m} \\ 
\end{bmatrix} 
= 
\begin{bmatrix}
0 \\
\frac{1}{187.8} \\
\end{bmatrix} 
=
\begin{bmatrix}
0 \\
0.0053 \\ 
\end{bmatrix}\]

<p>Using the following code, I find the average sampling time interval is 8.10 ms,</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">interval_sum</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">length</span><span class="p">):</span>
    <span class="n">interval_sum</span> <span class="o">+=</span> <span class="n">timestamps_ms</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">timestamps_ms</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
<span class="n">interval</span> <span class="o">=</span> <span class="n">interval_sum</span> <span class="o">/</span> <span class="p">(</span><span class="n">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<p>So $\Delta t$ is set to 8.1ms</p>

<p>Descretize the matrices:
\(Ad = I + \Delta t \times A \\
Bd = \Delta t \times B\)</p>

<blockquote>
  <p>Identify your C matrix. Recall that C is a m x n matrix, where n are the dimensions in your state space, and m are the number of states you actually measure.</p>
</blockquote>

\[C = \begin{bmatrix}
-1 &amp; 0
\end{bmatrix}\]

<blockquote>
  <p>Initialize your state vector</p>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([[</span><span class="o">-</span><span class="n">distance</span><span class="p">[</span><span class="mi">0</span><span class="p">]],[</span><span class="mi">0</span><span class="p">]])</span>
</code></pre></div></div>

<blockquote>
  <p>For the Kalman Filter to work well, you will need to specify your process noise and sensor noise covariance matrices.</p>
</blockquote>

\[\Sigma_u =

\begin{bmatrix}
\sigma_1^2 &amp; 0 \\
0 &amp; \sigma_2^2 \\
\end{bmatrix}\]

<p>Position stddev after 1s: $\sqrt{10^2 · \frac{1}{0.008}} = 111.8 \space mm$</p>

<p>Speed stddev after 1s: $\sqrt{10^2 · \frac{1}{0.008}} = 111.8 \space mm/s$
\(\sigma_3^2 = (20 mm)^2\)</p>

<h2 id="3-implement-and-test-your-kalman-filter-in-jupyter-python">3. Implement and test your Kalman Filter in Jupyter (Python)</h2>

<p>Parameter settings are as follows:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">d</span> <span class="o">=</span> <span class="mf">0.4</span>
<span class="n">m</span> <span class="o">=</span> <span class="mf">187.8</span>

<span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="n">d</span><span class="o">/</span><span class="n">m</span><span class="p">]])</span>
<span class="n">B</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([[</span><span class="mi">0</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="o">/</span><span class="n">m</span><span class="p">]])</span>
<span class="n">C</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">]])</span>

<span class="n">sig1</span> <span class="o">=</span> <span class="mi">100</span>
<span class="n">sig2</span> <span class="o">=</span> <span class="mi">100</span>
<span class="n">sig3</span> <span class="o">=</span> <span class="mi">20</span>

<span class="n">Sig_u</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([[</span><span class="n">sig1</span><span class="o">**</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="n">sig2</span><span class="o">**</span><span class="mi">2</span><span class="p">]])</span>
<span class="n">Sig_z</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([[</span><span class="n">sig3</span><span class="o">**</span><span class="mi">2</span><span class="p">]])</span>

<span class="n">delta_t</span> <span class="o">=</span> <span class="mf">8.1</span>

<span class="n">Ad</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">eye</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="n">delta_t</span> <span class="o">*</span> <span class="n">A</span>
<span class="n">Bd</span> <span class="o">=</span> <span class="n">delta_t</span> <span class="o">*</span> <span class="n">B</span>
</code></pre></div></div>

<p>Kalman Filter process:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">kf</span><span class="p">(</span><span class="n">mu</span><span class="p">,</span> <span class="n">sigma</span><span class="p">,</span> <span class="n">u</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
    
    <span class="n">mu_p</span> <span class="o">=</span> <span class="n">Ad</span><span class="p">.</span><span class="nf">dot</span><span class="p">(</span><span class="n">mu</span><span class="p">)</span> <span class="o">+</span> <span class="n">Bd</span><span class="p">.</span><span class="nf">dot</span><span class="p">(</span><span class="n">u</span><span class="p">)</span> 
    <span class="n">sigma_p</span> <span class="o">=</span> <span class="n">Ad</span><span class="p">.</span><span class="nf">dot</span><span class="p">(</span><span class="n">sigma</span><span class="p">.</span><span class="nf">dot</span><span class="p">(</span><span class="n">Ad</span><span class="p">.</span><span class="nf">transpose</span><span class="p">()))</span> <span class="o">+</span> <span class="n">Sig_u</span>
    
    <span class="n">sigma_m</span> <span class="o">=</span> <span class="n">C</span><span class="p">.</span><span class="nf">dot</span><span class="p">(</span><span class="n">sigma_p</span><span class="p">.</span><span class="nf">dot</span><span class="p">(</span><span class="n">C</span><span class="p">.</span><span class="nf">transpose</span><span class="p">()))</span> <span class="o">+</span> <span class="n">Sig_z</span>
    <span class="n">kkf_gain</span> <span class="o">=</span> <span class="n">sigma_p</span><span class="p">.</span><span class="nf">dot</span><span class="p">(</span><span class="n">C</span><span class="p">.</span><span class="nf">transpose</span><span class="p">().</span><span class="nf">dot</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">linalg</span><span class="p">.</span><span class="nf">inv</span><span class="p">(</span><span class="n">sigma_m</span><span class="p">)))</span>

    <span class="n">y_m</span> <span class="o">=</span> <span class="n">y</span> <span class="o">-</span> <span class="n">C</span><span class="p">.</span><span class="nf">dot</span><span class="p">(</span><span class="n">mu_p</span><span class="p">)</span>
    <span class="n">mu</span> <span class="o">=</span> <span class="n">mu_p</span> <span class="o">+</span> <span class="n">kkf_gain</span><span class="p">.</span><span class="nf">dot</span><span class="p">(</span><span class="n">y_m</span><span class="p">)</span>    
    <span class="n">sigma</span> <span class="o">=</span> <span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">eye</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="o">-</span> <span class="n">kkf_gain</span><span class="p">.</span><span class="nf">dot</span><span class="p">(</span><span class="n">C</span><span class="p">)).</span><span class="nf">dot</span><span class="p">(</span><span class="n">sigma_p</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">mu</span><span class="p">,</span> <span class="n">sigma</span>

<span class="c1"># init position state
</span><span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([[</span><span class="o">-</span><span class="n">distances</span><span class="p">[</span><span class="mi">0</span><span class="p">]],[</span><span class="mi">0</span><span class="p">]])</span>
<span class="c1"># init guess of uncertainty
</span><span class="n">sig</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([[</span><span class="mi">5</span><span class="o">**</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="mi">5</span><span class="o">**</span><span class="mi">2</span><span class="p">]])</span>

<span class="n">kf_state</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">u</span><span class="p">,</span> <span class="n">d</span> <span class="ow">in</span> <span class="nf">zip</span><span class="p">(</span><span class="n">left_pwms</span><span class="p">,</span> <span class="n">distances</span><span class="p">):</span>
    <span class="n">x</span><span class="p">,</span> <span class="n">sig</span> <span class="o">=</span> <span class="nf">kf</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">sig</span><span class="p">,</span> <span class="p">[[</span><span class="n">u</span> <span class="o">/</span> <span class="mi">210</span><span class="p">]],</span> <span class="p">[[</span><span class="o">-</span><span class="n">d</span><span class="p">]])</span>
    <span class="n">kf_state</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</code></pre></div></div>

<p>Raw sensor reading value and kalman filter estimation:</p>

<p><img src="/FastRobots/images/Lab7/kalman-filter.png" alt="kalman-filter" style="zoom:40%;" /></p>

<p>The larger <code class="language-plaintext highlighter-rouge">sig_1</code> and <code class="language-plaintext highlighter-rouge">sig_2</code> are, the less we trust the robot model, the larger <code class="language-plaintext highlighter-rouge">sig_3</code> is, the less we trust the sensor reading. By adjusting the deviation value, we can find an appropriate way to combine the information of both snesor reading and model processing.</p>

<p>The prediction matches the sensor reading better as the standard deviation that I calculated for the robot model is large.</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Lab6</title><link href="http://localhost:4000/FastRobots/jekyll/update/2024/04/12/Lab6.html" rel="alternate" type="text/html" title="Lab6" /><published>2024-04-12T00:00:00-04:00</published><updated>2024-04-12T00:00:00-04:00</updated><id>http://localhost:4000/FastRobots/jekyll/update/2024/04/12/Lab6</id><content type="html" xml:base="http://localhost:4000/FastRobots/jekyll/update/2024/04/12/Lab6.html"><![CDATA[<h2 id="prelab">Prelab</h2>

<h3 id="1-clearly-describe-how-you-handle-sending-and-receiving-data-over-bluetooth">1. Clearly describe how you handle sending and receiving data over Bluetooth</h3>

<p>In my code, I record the state of the robot in every loop, including timestamp in millisecond, yaw angle, setpoint of yaw angle and the controller value of both side drivers.</p>

<p>During the auto running process where the robot tries to maintain the given status, the transmission over bluetooth is forbiddened to ensure the high frequency of controll loop.</p>

<p>When the controlling process is over, user can send the command “GET_HISTORY_DATA” over bluetooth which will notify the robot to send all of its history records to the laptop over bluetooth. The jupyter server running on the laptop will use a callback function to deal with the history records, then parse and store them.</p>

<p>Finally, I use matplotlib to visualize the data, which can give us a better view of the system.</p>

<h3 id="2-consider-adding-code-snippets-as-necessary-to-showcase-how-you-implemented-this-on-arduino-and-python">2. Consider adding code snippets as necessary to showcase how you implemented this on Arduino and Python</h3>

<h4 id="arduino">Arduino</h4>

<p>In the loop() function,</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="n">auto_running</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">prev_auto_running</span><span class="p">)</span> <span class="p">{</span>
      <span class="p">...</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="p">{</span>
        <span class="c1">// calculate elapsed time only when auto running</span>
        <span class="n">elapsed_ms</span> <span class="o">=</span> <span class="n">curr_ms</span> <span class="o">-</span> <span class="n">start_ms</span><span class="p">;</span>
      
        <span class="n">distance</span> <span class="o">=</span> <span class="n">readDistance</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> 
        <span class="n">gyr_z</span> <span class="o">=</span> <span class="n">readGyrZ</span><span class="p">();</span>
        <span class="n">yaw</span> <span class="o">-=</span> <span class="n">gyr_z</span> <span class="o">*</span> <span class="p">(</span><span class="n">curr_ms</span> <span class="o">-</span> <span class="n">prev_ms</span><span class="p">)</span> <span class="o">/</span> <span class="mf">1000.0</span><span class="p">;</span>
      
        <span class="c1">// keepDistanceToWall(goal_distance, distance);</span>
        <span class="n">keepYaw</span><span class="p">(</span><span class="n">goal_yaw</span><span class="p">,</span> <span class="p">(</span><span class="kt">int16_t</span><span class="p">)</span><span class="n">yaw</span><span class="p">);</span>
      
        <span class="c1">// save current record to array</span>
        <span class="n">saveCurrRecordToArray</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>I read the distance and gyroscope data in every loop when the robot is in <code class="language-plaintext highlighter-rouge">auto_running</code> state and save current record to an array.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">saveCurrRecordToArray</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">ControllerRecord</span> <span class="n">ctrl_record</span> <span class="o">=</span> <span class="n">getCtrlRecord</span><span class="p">();</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">record_ptr</span> <span class="o">&lt;</span> <span class="n">MAX_RECORDS_LEN</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">records</span><span class="p">[</span><span class="n">record_ptr</span><span class="p">].</span><span class="n">timestamp_ms</span> <span class="o">=</span> <span class="n">elapsed_ms</span><span class="p">;</span>
        <span class="n">records</span><span class="p">[</span><span class="n">record_ptr</span><span class="p">].</span><span class="n">yaw</span> <span class="o">=</span> <span class="n">yaw</span><span class="p">;</span>
        <span class="n">records</span><span class="p">[</span><span class="n">record_ptr</span><span class="p">].</span><span class="n">setpoint_yaw</span> <span class="o">=</span> <span class="n">goal_yaw</span><span class="p">;</span>
      	<span class="p">...</span>
        <span class="n">record_ptr</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In the <code class="language-plaintext highlighter-rouge">handleCommand()</code> function, I add the code to deal with <code class="language-plaintext highlighter-rouge">SEND_HISTORY_DATA</code> command.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">case</span> <span class="n">GET_HISTORY_DATA</span><span class="p">:</span> <span class="p">{</span>
    <span class="c1">// forbidden transfering history data when robot is auto running</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">auto_running</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">tx_estring_value</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">"Failed: auto running, try later"</span><span class="p">);</span>
        <span class="n">tx_characteristic_string</span><span class="p">.</span><span class="n">writeValue</span><span class="p">(</span><span class="n">tx_estring_value</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">const</span> <span class="n">Record</span> <span class="o">*</span><span class="n">records</span><span class="p">;</span>
    <span class="kt">uint16_t</span> <span class="n">records_size</span> <span class="o">=</span> <span class="n">getHistoryRecords</span><span class="p">(</span><span class="o">&amp;</span><span class="n">records</span><span class="p">);</span>
    <span class="n">tx_estring_value</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
  	<span class="p">...</span>

    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">records_size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      	<span class="c1">// send all history records</span>
        <span class="n">putARecordToTxEstring</span><span class="p">(</span><span class="n">records</span> <span class="o">+</span> <span class="n">i</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
        <span class="n">tx_characteristic_string</span><span class="p">.</span><span class="n">writeValue</span><span class="p">(</span><span class="n">tx_estring_value</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
    <span class="p">}</span>
    <span class="k">break</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="python">Python</h4>

<p><code class="language-plaintext highlighter-rouge">parse_str2data</code> is used to parse the string data into parts that contain the original data.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">parse_str2data</span><span class="p">(</span><span class="n">ss</span><span class="p">):</span>
    <span class="n">idx</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="n">ss</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">:</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">timestamp</span><span class="p">,</span> <span class="n">distance</span><span class="p">,</span> <span class="n">setpoint_distance</span><span class="p">,</span> <span class="n">yaw</span><span class="p">,</span> <span class="n">setpoint_yaw</span><span class="p">,</span> \
    	<span class="n">left_ctrl</span><span class="p">,</span> <span class="n">right_ctrl</span><span class="p">,</span> <span class="n">left_pwm</span><span class="p">,</span> <span class="n">right_pwm</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">|</span><span class="sh">'</span><span class="p">)</span>
    <span class="bp">...</span>
    <span class="n">timestamps_ms</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">timestamp</span><span class="p">))</span>
    <span class="n">distances</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">distance</span><span class="p">))</span>
    <span class="n">setpoint_yaws</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">setpoint_yaw</span><span class="p">))</span>
		<span class="bp">...</span>
    <span class="n">right_pwms</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">right_pwm</span><span class="p">))</span>
</code></pre></div></div>

<p>The above function is registered as a callback function to handle RX_STRING</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">notification_handler</span><span class="p">(</span><span class="n">uuid</span><span class="p">,</span> <span class="n">byte_array</span><span class="p">):</span>
    <span class="n">data_str</span> <span class="o">=</span> <span class="n">ble</span><span class="p">.</span><span class="nf">bytearray_to_string</span><span class="p">(</span><span class="n">byte_array</span><span class="p">)</span>
    <span class="nf">parse_str2data</span><span class="p">(</span><span class="n">data_str</span><span class="p">)</span>
<span class="n">ble</span><span class="p">.</span><span class="nf">start_notify</span><span class="p">(</span><span class="n">ble</span><span class="p">.</span><span class="n">uuid</span><span class="p">[</span><span class="sh">'</span><span class="s">RX_STRING</span><span class="sh">'</span><span class="p">],</span> <span class="n">notification_handler</span><span class="p">)</span>
</code></pre></div></div>

<p>Finally the graph is drawed</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">plot_graph</span><span class="p">():</span>
    <span class="n">timestamps_s</span> <span class="o">=</span> <span class="p">[</span><span class="n">t</span> <span class="o">/</span> <span class="mf">1000.0</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">timestamps_ms</span><span class="p">]</span>
    <span class="n">fig</span><span class="p">,</span> <span class="p">(</span><span class="n">ax1</span><span class="p">,</span> <span class="n">ax2</span><span class="p">,</span> <span class="n">ax3</span><span class="p">)</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">))</span>  
    
    <span class="n">ax1</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">timestamps_s</span><span class="p">,</span> <span class="n">setpoint_yaws</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">Setpoints</span><span class="sh">'</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">red</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">ax1</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">Setpoints Over Time</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">ax1</span><span class="p">.</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Setpoints</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">ax1</span><span class="p">.</span><span class="nf">legend</span><span class="p">()</span>
    
    <span class="n">ax2</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">timestamps_s</span><span class="p">,</span> <span class="n">yaws</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">Yaws</span><span class="sh">'</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">blue</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">ax2</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">Yaws Over Time</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">ax2</span><span class="p">.</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Yaws</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">ax2</span><span class="p">.</span><span class="nf">legend</span><span class="p">()</span>
    
    <span class="n">ax3</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">timestamps_s</span><span class="p">,</span> <span class="n">right_controls</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">Controls</span><span class="sh">'</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">green</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">ax3</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">Right Controls Over Time</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">ax3</span><span class="p">.</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Right Controls</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">ax3</span><span class="p">.</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Time</span><span class="sh">'</span><span class="p">)</span> 
    <span class="n">ax3</span><span class="p">.</span><span class="nf">legend</span><span class="p">()</span>
    
    <span class="n">plt</span><span class="p">.</span><span class="nf">tight_layout</span><span class="p">()</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="lab-tasks">Lab Tasks</h2>

<h3 id="1-pid-discussion-kpkikd-values-chosen-why-you-chose-a-combination-of-controllers-etc">1. P/I/D discussion (Kp/Ki/Kd values chosen, why you chose a combination of controllers, etc.)</h3>

<p>I use PID controller, the parameters are set as follows:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">PIDParam</span> <span class="n">angle_param</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">.</span><span class="n">Kp</span> <span class="o">=</span> <span class="mi">35</span><span class="p">,</span>
    <span class="p">.</span><span class="n">Ki</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
    <span class="p">.</span><span class="n">Kd</span> <span class="o">=</span> <span class="mi">15</span>
<span class="p">};</span>

<span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int16_t</span><span class="p">,</span> <span class="kt">int16_t</span><span class="o">&gt;</span> <span class="n">angle_pid</span><span class="p">(</span><span class="kt">int16_t</span> <span class="n">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int16_t</span> <span class="n">control</span> <span class="o">=</span> <span class="n">angle_param</span><span class="p">.</span><span class="n">Kp</span> <span class="o">*</span> <span class="n">error</span> 
        <span class="o">+</span> <span class="n">angle_param</span><span class="p">.</span><span class="n">Kd</span> <span class="o">*</span> <span class="p">(</span><span class="n">error</span> <span class="o">-</span> <span class="n">angle_var</span><span class="p">.</span><span class="n">prev_error</span><span class="p">)</span>
      	<span class="o">+</span> <span class="n">angle_param</span><span class="p">.</span><span class="n">Ki</span> <span class="o">*</span> <span class="n">angle_var</span><span class="p">.</span><span class="n">integral</span><span class="p">;</span>
    <span class="c1">// constrain the control value within limitation</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">control</span> <span class="o">&gt;=</span> <span class="n">MAX_CONTROL</span><span class="p">)</span> <span class="n">control</span> <span class="o">=</span> <span class="n">MAX_CONTROL</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">control</span> <span class="o">&lt;=</span> <span class="n">MIN_CONTROL</span><span class="p">)</span> <span class="n">control</span> <span class="o">=</span> <span class="n">MIN_CONTROL</span><span class="p">;</span>
    <span class="n">angle_var</span><span class="p">.</span><span class="n">prev_error</span> <span class="o">=</span> <span class="n">error</span><span class="p">;</span>
  	<span class="n">angle_var</span><span class="p">.</span><span class="n">integral</span> <span class="o">+=</span> <span class="n">error</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">make_pair</span><span class="p">(</span><span class="o">-</span><span class="n">control</span><span class="p">,</span> <span class="n">control</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">Kp</code> ensures that the robot always return to the original direction when pushed away</p>

<p><code class="language-plaintext highlighter-rouge">Kd</code> prevents overshoot</p>

<p><code class="language-plaintext highlighter-rouge">Ki</code> eliminate the cumulative error</p>

<p>P controller is the most basic controller, but using proportional control itself will lead to high oscillation. So I add the D controller to prevent overshoot. Now that PD controller can handle most situations, but the variable that we try to control may vary a little from the expected value, the I controller solves that. It adds error of all time iterations together in order to magnify the influence of cumulative error to the controller.</p>

<p>So I choose a combination of all three of them to be a PID controller.</p>

<h3 id="2-rangesampling-time-discussion">2. Range/Sampling time discussion</h3>

<h4 id="range">Range</h4>

<p>The default range for the Sparkfun 9DoF IMU is +-250 degrees per second, which is enough for this lab, as the maximum rotation speed is no more than 150 dps.</p>

<p>The smaller sensor range has better accuracy, so I use the default <code class="language-plaintext highlighter-rouge">dps250</code> scale.</p>

<h4 id="sampling-time">Sampling Time</h4>

<p>The robot returns an array of history data that has size 842 over 12 seconds:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ble</span><span class="p">.</span><span class="nf">send_command</span><span class="p">(</span><span class="n">CMD</span><span class="p">.</span><span class="n">GET_HISTORY_DATA</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
<span class="sh">"""</span><span class="s"> 
Size of records array: 842
</span><span class="sh">"""</span>
</code></pre></div></div>

<p>so the approximate sampling rate is 842/12s = 70Hz.</p>

<h3 id="3-graphs-code-videos-images-discussion-of-reaching-task-goal-graph-data-should-at-least-include-theta-vs-time">3. Graphs, code, videos, images, discussion of reaching task goal (Graph data should at least include theta vs time)</h3>

<h4 id="graphs">Graphs</h4>

<p><img src="/FastRobots/images/Lab6/3plots.png" alt="3plots" style="zoom:60%;" /></p>

<h4 id="videos">Videos</h4>

<iframe width="325" height="578" src="https://www.youtube.com/embed/DxC1AkijgFg" title="Robot keep the original direction when pushed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>

<p>and this,</p>

<iframe width="325" height="578" src="https://www.youtube.com/embed/Pz_mTgWw-7Y" title="Change set point of yaws of robot" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>

<h3 id="4-5000-wind-up-implementation-and-discussion">4. (5000) Wind-up implementation and discussion</h3>

<p>There is a limit set for <code class="language-plaintext highlighter-rouge">angle_var.integral</code> so that it will not go extremely high and increase the oscillation.</p>

<p>Add the upper and lower bound of integrator and prevent the problem:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">const</span> <span class="kt">int</span> <span class="n">INTEG_BOUND</span> <span class="o">=</span> <span class="mi">200</span><span class="p">;</span>

<span class="kt">int16_t</span> <span class="n">control</span> <span class="o">=</span> <span class="n">pos_param</span><span class="p">.</span><span class="n">Kp</span> <span class="o">*</span> <span class="n">error</span> <span class="o">+</span> <span class="n">pos_param</span><span class="p">.</span><span class="n">Kd</span> <span class="o">*</span> <span class="p">(</span><span class="n">error</span> <span class="o">-</span> <span class="n">prev_error</span><span class="p">)</span> <span class="o">+</span> <span class="n">Ki</span> <span class="o">*</span> <span class="n">angle_var</span><span class="p">.</span><span class="n">integral</span><span class="p">;</span>

<span class="n">angle_var</span><span class="p">.</span><span class="n">integral</span> <span class="o">+=</span> <span class="n">error</span><span class="p">;</span>
<span class="k">if</span> <span class="p">(</span><span class="n">angle_var</span><span class="p">.</span><span class="n">intergral</span> <span class="o">&gt;</span> <span class="n">INTEG_BOUND</span><span class="p">)</span> <span class="p">{</span>
  	<span class="n">angle_var</span><span class="p">.</span><span class="n">integral</span> <span class="o">=</span> <span class="n">INTEG_BOUND</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">angle_var</span><span class="p">.</span><span class="n">integral</span> <span class="o">&lt;</span> <span class="o">-</span><span class="n">INTEG_BOUND</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">angle_var</span><span class="p">.</span><span class="n">integral</span> <span class="o">=</span> <span class="o">-</span><span class="n">INTEG_BOUND</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">if</span> <span class="p">(</span><span class="n">control</span> <span class="o">&gt;=</span> <span class="n">MAX_CONTROL</span><span class="p">)</span> <span class="n">control</span> <span class="o">=</span> <span class="n">MAX_CONTROL</span><span class="p">;</span>
<span class="k">if</span> <span class="p">(</span><span class="n">control</span> <span class="o">&lt;=</span> <span class="n">MIN_CONTROL</span><span class="p">)</span> <span class="n">control</span> <span class="o">=</span> <span class="n">MIN_CONTROL</span><span class="p">;</span>
<span class="n">prev_error</span> <span class="o">=</span> <span class="n">error</span><span class="p">;</span>
</code></pre></div></div>

<p>The wind-up protection is important, because if the robot was prevented from getting close to the goal yaw angle by some outside force, the integral term will continue accumulating. It will get extremely large or even overflow after a period of time, which will cause problems.</p>

<p>With this protection, the intergal term can be kept within a reasonable range, and can be lowered quickly to correct accumulated errors when the robot rotates without resistance.</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Prelab]]></summary></entry><entry><title type="html">Lab5</title><link href="http://localhost:4000/FastRobots/jekyll/update/2024/03/13/Lab5.html" rel="alternate" type="text/html" title="Lab5" /><published>2024-03-13T00:00:00-04:00</published><updated>2024-03-13T00:00:00-04:00</updated><id>http://localhost:4000/FastRobots/jekyll/update/2024/03/13/Lab5</id><content type="html" xml:base="http://localhost:4000/FastRobots/jekyll/update/2024/03/13/Lab5.html"><![CDATA[<h1 id="prelab">Prelab</h1>

<h2 id="1-clearly-describe-how-you-handle-sending-and-receiving-data-over-bluetooth">1. Clearly describe how you handle sending and receiving data over Bluetooth</h2>

<p>In my code, I record the state of the robot in every loop, including timestamp in millisecond, yaw angle, setpoint of yaw angle and the controller value of both side drivers.</p>

<p>During the auto running process where the robot tries to maintain the given status, the transmission over bluetooth is forbiddened to ensure the high frequency of controll loop.</p>

<p>When the controlling process is over, user can send the command “GET_HISTORY_DATA” over bluetooth which will notify the robot to send all of its history records to the laptop over bluetooth. The jupyter server running on the laptop will use a callback function to deal with the history records, then parse and store them.</p>

<p>Finally, I use matplotlib to visualize the data, which can give us a better view of the system.</p>

<h2 id="2-consider-adding-code-snippets-as-necessary-to-showcase-how-you-implemented-this-on-arduino-and-python">2. Consider adding code snippets as necessary to showcase how you implemented this on Arduino and Python</h2>

<h4 id="arduino">Arduino</h4>

<p>In the loop() function,</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="n">auto_running</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">prev_auto_running</span><span class="p">)</span> <span class="p">{</span>
      <span class="p">......</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="p">{</span>
        <span class="c1">// calculate elapsed time only when auto running</span>
        <span class="n">elapsed_ms</span> <span class="o">=</span> <span class="n">curr_ms</span> <span class="o">-</span> <span class="n">start_ms</span><span class="p">;</span>
        <span class="n">distance</span> <span class="o">=</span> <span class="n">readDistance</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> 
        <span class="c1">// save current record to array</span>
        <span class="n">saveCurrRecordToArray</span><span class="p">();</span>
        <span class="n">keepDistanceToWall</span><span class="p">(</span><span class="n">goal_distance</span><span class="p">,</span> <span class="n">distance</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>I read the distance and gyroscope data in every loop when the robot is in <code class="language-plaintext highlighter-rouge">auto_running</code> state and save current record to an array.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">saveCurrRecordToArray</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">ControllerRecord</span> <span class="n">ctrl_record</span> <span class="o">=</span> <span class="n">getCtrlRecord</span><span class="p">();</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">record_ptr</span> <span class="o">&lt;</span> <span class="n">MAX_RECORDS_LEN</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">records</span><span class="p">[</span><span class="n">record_ptr</span><span class="p">].</span><span class="n">timestamp_ms</span> <span class="o">=</span> <span class="n">elapsed_ms</span><span class="p">;</span>
      	<span class="n">records</span><span class="p">[</span><span class="n">record_ptr</span><span class="p">].</span><span class="n">distance</span> <span class="o">=</span> <span class="n">distance</span><span class="p">;</span>
      	<span class="n">records</span><span class="p">[</span><span class="n">record_ptr</span><span class="p">].</span><span class="n">left_pwm</span> <span class="o">=</span> <span class="n">ctrl_record</span><span class="p">.</span><span class="n">left_pwm</span><span class="p">;</span>
        <span class="n">records</span><span class="p">[</span><span class="n">record_ptr</span><span class="p">].</span><span class="n">right_pwm</span> <span class="o">=</span> <span class="n">ctrl_record</span><span class="p">.</span><span class="n">right_pwm</span><span class="p">;</span>
      	<span class="p">......</span>
        <span class="n">record_ptr</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In the <code class="language-plaintext highlighter-rouge">handleCommand()</code> function, I add the code to deal with <code class="language-plaintext highlighter-rouge">SEND_HISTORY_DATA</code> command.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">case</span> <span class="n">GET_HISTORY_DATA</span><span class="p">:</span> <span class="p">{</span>
		<span class="p">......</span>
    <span class="k">const</span> <span class="n">Record</span> <span class="o">*</span><span class="n">records</span><span class="p">;</span>
    <span class="kt">uint16_t</span> <span class="n">records_size</span> <span class="o">=</span> <span class="n">getHistoryRecords</span><span class="p">(</span><span class="o">&amp;</span><span class="n">records</span><span class="p">);</span>
    <span class="n">tx_estring_value</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
  	<span class="p">......</span>

    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">records_size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      	<span class="c1">// send all history records</span>
        <span class="n">putARecordToTxEstring</span><span class="p">(</span><span class="n">records</span> <span class="o">+</span> <span class="n">i</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
        <span class="n">tx_characteristic_string</span><span class="p">.</span><span class="n">writeValue</span><span class="p">(</span><span class="n">tx_estring_value</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
    <span class="p">}</span>
    <span class="k">break</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="python">Python</h4>

<p><code class="language-plaintext highlighter-rouge">parse_str2data</code> is used to parse the string data into parts that contain the original data.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">parse_str2data</span><span class="p">(</span><span class="n">ss</span><span class="p">):</span>
    <span class="n">idx</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="n">ss</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">:</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">timestamp</span><span class="p">,</span> <span class="n">distance</span><span class="p">,</span> <span class="n">setpoint_distance</span><span class="p">,</span> \
    	<span class="n">left_ctrl</span><span class="p">,</span> <span class="n">right_ctrl</span><span class="p">,</span> <span class="n">left_pwm</span><span class="p">,</span> <span class="n">right_pwm</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">|</span><span class="sh">'</span><span class="p">)</span>
    <span class="p">...</span><span class="bp">...</span>
    <span class="n">timestamps_ms</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">timestamp</span><span class="p">))</span>
    <span class="n">distances</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">distance</span><span class="p">))</span>
		<span class="p">...</span><span class="bp">...</span>
    <span class="n">left_pwms</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">left_pwm</span><span class="p">))</span>
    <span class="n">right_pwms</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">right_pwm</span><span class="p">))</span>
</code></pre></div></div>

<p>The above function is registered as a callback function to handle RX_STRING</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">notification_handler</span><span class="p">(</span><span class="n">uuid</span><span class="p">,</span> <span class="n">byte_array</span><span class="p">):</span>
    <span class="n">data_str</span> <span class="o">=</span> <span class="n">ble</span><span class="p">.</span><span class="nf">bytearray_to_string</span><span class="p">(</span><span class="n">byte_array</span><span class="p">)</span>
    <span class="nf">parse_str2data</span><span class="p">(</span><span class="n">data_str</span><span class="p">)</span>
<span class="n">ble</span><span class="p">.</span><span class="nf">start_notify</span><span class="p">(</span><span class="n">ble</span><span class="p">.</span><span class="n">uuid</span><span class="p">[</span><span class="sh">'</span><span class="s">RX_STRING</span><span class="sh">'</span><span class="p">],</span> <span class="n">notification_handler</span><span class="p">)</span>
</code></pre></div></div>

<p>Finally the graph is drawed with pwm values shown</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">plot_graph</span><span class="p">():</span>
    <span class="n">timestamps_s</span> <span class="o">=</span> <span class="p">[</span><span class="n">t</span> <span class="o">/</span> <span class="mf">1000.0</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">timestamps_ms</span><span class="p">]</span>
   
    <span class="n">fig</span><span class="p">,</span> <span class="n">ax1</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">()</span>
    
    <span class="n">color</span> <span class="o">=</span> <span class="sh">'</span><span class="s">tab:red</span><span class="sh">'</span>
    <span class="n">ax1</span><span class="p">.</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Time (s)</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">ax1</span><span class="p">.</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Distance</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">ax1</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">timestamps_s</span><span class="p">,</span> <span class="n">distances</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="n">color</span><span class="p">)</span>
    <span class="n">ax1</span><span class="p">.</span><span class="nf">tick_params</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="sh">'</span><span class="s">y</span><span class="sh">'</span><span class="p">)</span>
    
    <span class="n">ax1</span><span class="p">.</span><span class="nf">set_ylim</span><span class="p">(</span><span class="n">bottom</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
    <span class="n">ax2</span> <span class="o">=</span> <span class="n">ax1</span><span class="p">.</span><span class="nf">twinx</span><span class="p">()</span>  
    
    <span class="n">color</span> <span class="o">=</span> <span class="sh">'</span><span class="s">tab:blue</span><span class="sh">'</span>
    <span class="n">ax2</span><span class="p">.</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">PWM</span><span class="sh">'</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="n">color</span><span class="p">)</span>  
    <span class="n">ax2</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">timestamps_s</span><span class="p">,</span> <span class="n">right_pwms</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="n">color</span><span class="p">)</span>
    <span class="n">ax2</span><span class="p">.</span><span class="nf">tick_params</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="sh">'</span><span class="s">y</span><span class="sh">'</span><span class="p">,</span> <span class="n">labelcolor</span><span class="o">=</span><span class="n">color</span><span class="p">)</span>
    
    <span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">'</span><span class="s">Distance and PWM vs. Time</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div>

<h1 id="lab-tasks">Lab Tasks</h1>

<h2 id="1-pid-discussion-kpkikd-values-chosen-why-you-chose-a-combination-of-controllers-etc">1. P/I/D discussion (Kp/Ki/Kd values chosen, why you chose a combination of controllers, etc.)</h2>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">float</span> <span class="n">Kp</span> <span class="o">=</span> <span class="mf">1.5</span><span class="p">;</span>
<span class="kt">float</span> <span class="n">Ki</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
<span class="kt">float</span> <span class="n">Kd</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">Kp</code> ensures that the robot have the ability to keep the given distance. The larger <code class="language-plaintext highlighter-rouge">Kp</code> is, the robot moves faster towards the given position. After testing, <code class="language-plaintext highlighter-rouge">Kp = 1.5</code> works best for my robot.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">Kd</code> prevents overshoot. It punish the behavior of moving too fast. If <code class="language-plaintext highlighter-rouge">Kd</code> is too small or set to 0, the robot will oscillate around the given distance. At first I tried <code class="language-plaintext highlighter-rouge">Kd = 5, 10, 15</code>, but the robot will still collide to the wall when the initial speed is high. Finally <code class="language-plaintext highlighter-rouge">Kd = 20</code> works best.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">Ki</code> eliminate the cumulative error. I find that the cumulative error in this Lab is small enough to ignore, so I set <code class="language-plaintext highlighter-rouge">Ki</code> to zero.</p>
  </li>
</ul>

<p>So eventually, the controller type that I use is PD controller.</p>

<h2 id="2-rangesampling-time-discussion">2. Range/Sampling time discussion</h2>

<p>I choose <strong>Medium range</strong> for distance sensor because it provides a relatively large detection range and low delay.</p>

<p>The distance sensor behaves normally (has low standard deviation) in this Lab settings.</p>

<p><img src="/FastRobots/images/Lab5/time-interval.png" alt="time-interval" style="zoom:50%;" /></p>

<p>The sampling time is about 12ms. So the frequency of the main loop() function is about 1000ms/12ms = 83Hz. It is faster than the ToF sensor because I set <code class="language-plaintext highlighter-rouge">blocking=false</code> when reading the distance sensor data. My program just use distance data before if the new data is not ready to read.</p>

<h2 id="3-graphs-code-videos-images-discussion-of-reaching-task-goal-graph-data-should-include-tof-vs-time-and-motor-input-vs-time">3. Graphs, code, videos, images, discussion of reaching task goal (Graph data should include Tof vs time and Motor input vs time)</h2>

<h3 id="codes">Codes</h3>

<p>This is the core function that is called every loop in <code class="language-plaintext highlighter-rouge">main.ino</code>.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">keepDistanceToWall</span><span class="p">(</span><span class="n">goal_distance</span><span class="p">,</span> <span class="n">distance</span><span class="p">);</span>
</code></pre></div></div>

<p>The function is provided by the following code in <code class="language-plaintext highlighter-rouge">controller.cpp</code>:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int16_t</span> <span class="nf">pid</span><span class="p">(</span><span class="kt">int16_t</span> <span class="n">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int16_t</span> <span class="n">control</span> <span class="o">=</span> <span class="n">Kp</span> <span class="o">*</span> <span class="n">error</span> <span class="o">+</span> <span class="n">Kd</span> <span class="o">*</span> <span class="p">(</span><span class="n">error</span> <span class="o">-</span> <span class="n">prev_error</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">control</span> <span class="o">&gt;=</span> <span class="n">MAX_CONTROL</span><span class="p">)</span> <span class="n">control</span> <span class="o">=</span> <span class="n">MAX_CONTROL</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">control</span> <span class="o">&lt;=</span> <span class="n">MIN_CONTROL</span><span class="p">)</span> <span class="n">control</span> <span class="o">=</span> <span class="n">MIN_CONTROL</span><span class="p">;</span>
    <span class="n">prev_error</span> <span class="o">=</span> <span class="n">error</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">control</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">keepDistanceToWall</span><span class="p">(</span><span class="kt">uint16_t</span> <span class="n">setpoint</span><span class="p">,</span> <span class="kt">uint16_t</span> <span class="n">distance</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int16_t</span> <span class="n">control</span> <span class="o">=</span> <span class="n">pid</span><span class="p">(</span><span class="n">distance</span> <span class="o">-</span> <span class="n">setpoint</span><span class="p">);</span>
    <span class="n">straight_control</span><span class="p">(</span><span class="n">control</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">straight_controll()</code> is defined here:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">straight_control</span><span class="p">(</span><span class="kt">int16_t</span> <span class="n">control</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// map control signal to actual pwm in order to </span>
    <span class="c1">// eliminate the influence of dead band</span>
    <span class="n">ctrl_record</span><span class="p">.</span><span class="n">control</span> <span class="o">=</span> <span class="n">control</span><span class="p">;</span>
    <span class="n">left_wheel_control</span><span class="p">(</span><span class="n">control</span><span class="p">);</span>
    <span class="n">right_wheel_control</span><span class="p">(</span><span class="n">control</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">left_wheel_control</span><span class="p">(</span><span class="kt">int16_t</span> <span class="n">control</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">ctrl_record</span><span class="p">.</span><span class="n">left_control</span> <span class="o">=</span> <span class="n">control</span><span class="p">;</span>
    <span class="kt">int16_t</span> <span class="n">left_pwm</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">control</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">left_pwm</span> <span class="o">=</span> <span class="n">ctrl_pwm_map</span><span class="p">(</span><span class="n">control</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1000</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">255</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="p">{</span>
        <span class="n">left_pwm</span> <span class="o">=</span> <span class="n">ctrl_pwm_map</span><span class="p">(</span><span class="n">control</span><span class="p">,</span> <span class="o">-</span><span class="mi">1000</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">255</span><span class="p">,</span> <span class="o">-</span><span class="mi">30</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">left_wheel_move</span><span class="p">(</span><span class="n">left_pwm</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">right_wheel_control</span><span class="p">(</span><span class="kt">int16_t</span> <span class="n">control</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">ctrl_record</span><span class="p">.</span><span class="n">right_control</span> <span class="o">=</span> <span class="n">control</span><span class="p">;</span>
    <span class="kt">int16_t</span> <span class="n">right_pwm</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">control</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">right_pwm</span> <span class="o">=</span> <span class="n">ctrl_pwm_map</span><span class="p">(</span><span class="n">control</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1000</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">255</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="p">{</span>
        <span class="n">right_pwm</span> <span class="o">=</span> <span class="n">ctrl_pwm_map</span><span class="p">(</span><span class="n">control</span><span class="p">,</span> <span class="o">-</span><span class="mi">1000</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">255</span><span class="p">,</span> <span class="o">-</span><span class="mi">28</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">right_wheel_move</span><span class="p">(</span><span class="n">right_pwm</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">left_wheel_control()</code> and <code class="language-plaintext highlighter-rouge">right_wheel_control()</code> have different mapping functions in order to eliminate the influence of the asymmetry of left and right motor output power.</p>

<h3 id="graphs-and-videos">Graphs and Videos</h3>

<h4 id="release-from-a-certain-distance-and-let-it-run-towards-the-wall">Release from a certain distance and let it run towards the wall</h4>

<p><img src="/FastRobots/images/Lab5/distance with pwms.png" alt="distance with pwms" style="zoom:50%;" /></p>

<iframe width="1613" height="683" src="https://www.youtube.com/embed/sGR2bUug3v0" title="Fast Robot Lab5 - 1" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>

<h4 id="use-feet-to-interact-with-it-to-see-its-dynamic-performance">Use feet to interact with it to see its dynamic performance</h4>

<p><img src="/FastRobots/images/Lab5/distance with pwm -2.png" alt="distance with pwm -2" style="zoom:50%;" /></p>

<iframe width="407" height="724" src="https://www.youtube.com/embed/imrV14bbdZE" title="Fast Robot Lab5 - 2" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>

<h2 id="5-5000-wind-up-implementation-and-discussion">5. (5000) Wind-up implementation and discussion</h2>

<p>Add the upper and lower bound of integrator and prevent the problem:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int16_t</span> <span class="n">control</span> <span class="o">=</span> <span class="n">pos_param</span><span class="p">.</span><span class="n">Kp</span> <span class="o">*</span> <span class="n">error</span> <span class="o">+</span> <span class="n">pos_param</span><span class="p">.</span><span class="n">Kd</span> <span class="o">*</span> <span class="p">(</span><span class="n">error</span> <span class="o">-</span> <span class="n">prev_error</span><span class="p">)</span> <span class="o">+</span> <span class="n">Ki</span> <span class="o">*</span> <span class="n">integral</span><span class="p">;</span>

<span class="n">integral</span> <span class="o">+=</span> <span class="n">error</span><span class="p">;</span>
<span class="k">if</span> <span class="p">(</span><span class="n">intergral</span> <span class="o">&gt;</span> <span class="mi">300</span><span class="p">)</span> <span class="n">integral</span> <span class="o">=</span> <span class="mi">300</span><span class="p">;</span>
<span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">integral</span> <span class="o">&lt;</span> <span class="o">-</span><span class="mi">300</span><span class="p">)</span> <span class="n">integral</span> <span class="o">=</span> <span class="o">-</span><span class="mi">300</span><span class="p">;</span>

<span class="k">if</span> <span class="p">(</span><span class="n">control</span> <span class="o">&gt;=</span> <span class="n">MAX_CONTROL</span><span class="p">)</span> <span class="n">control</span> <span class="o">=</span> <span class="n">MAX_CONTROL</span><span class="p">;</span>
<span class="k">if</span> <span class="p">(</span><span class="n">control</span> <span class="o">&lt;=</span> <span class="n">MIN_CONTROL</span><span class="p">)</span> <span class="n">control</span> <span class="o">=</span> <span class="n">MIN_CONTROL</span><span class="p">;</span>
<span class="n">prev_error</span> <span class="o">=</span> <span class="n">error</span><span class="p">;</span>
</code></pre></div></div>

<p>The wind-up protection is important, because if the robot was prevented from getting close to the goal distance by some outside force, so integral term will continue accumulating until getting extremely large or overflow, which will cause problems when it is set free.</p>

<p>With this protection, the intergal term can be kept within a reasonable range, and can be lowered quickly to correct accumulated errors when the robot moves without resistance.</p>

<h2 id="6-simple-linear-extrapolation-algorithm">6. Simple linear extrapolation algorithm</h2>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">uint16_t</span> <span class="n">real_distances</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
<span class="kt">uint32_t</span> <span class="n">real_timestamps</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>

<span class="kt">uint8_t</span> <span class="n">real_ptr</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
		<span class="p">......</span>
      
    <span class="k">if</span> <span class="p">(</span><span class="n">isReady</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span> <span class="p">{</span>
        <span class="n">distance</span> <span class="o">=</span> <span class="n">readDistance</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
        <span class="n">real_distances</span><span class="p">[</span><span class="n">real_ptr</span> <span class="o">%</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">distance</span><span class="p">;</span>
        <span class="n">real_timestamps</span><span class="p">[</span><span class="n">real_ptr</span> <span class="o">%</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">elapsed_ms</span><span class="p">;</span>
        <span class="n">real_ptr</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">real_ptr</span> <span class="o">&lt;=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">distance</span> <span class="o">=</span> <span class="n">real_distances</span><span class="p">[</span><span class="n">real_ptr</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="p">{</span>
            <span class="kt">int</span> <span class="n">t_now</span> <span class="o">=</span> <span class="n">elapsed_ms</span><span class="p">;</span>
            <span class="kt">int</span> <span class="n">t_prev1</span> <span class="o">=</span> <span class="n">real_timestamps</span><span class="p">[(</span><span class="n">real_ptr</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="mi">2</span><span class="p">];</span>
            <span class="kt">int</span> <span class="n">t_prev2</span> <span class="o">=</span> <span class="n">real_timestamps</span><span class="p">[</span><span class="n">real_ptr</span> <span class="o">%</span> <span class="mi">2</span><span class="p">];</span>

            <span class="kt">int</span> <span class="n">d_prev1</span> <span class="o">=</span> <span class="n">real_distances</span><span class="p">[(</span><span class="n">real_ptr</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="mi">2</span><span class="p">];</span>
            <span class="kt">int</span> <span class="n">d_prev2</span> <span class="o">=</span> <span class="n">real_distances</span><span class="p">[</span><span class="n">real_ptr</span> <span class="o">%</span> <span class="mi">2</span><span class="p">];</span>

            <span class="kt">float</span> <span class="n">k</span> <span class="o">=</span> <span class="p">(</span><span class="kt">float</span><span class="p">)(</span><span class="n">t_now</span> <span class="o">-</span> <span class="n">t_prev1</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="kt">float</span><span class="p">)(</span><span class="n">t_prev1</span> <span class="o">-</span> <span class="n">t_prev2</span><span class="p">);</span>
            <span class="n">distance</span> <span class="o">=</span> <span class="n">k</span> <span class="o">*</span> <span class="p">(</span><span class="n">d_prev1</span> <span class="o">-</span> <span class="n">d_prev2</span><span class="p">)</span> <span class="o">+</span> <span class="n">d_prev1</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>  
      
   	<span class="p">......</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The distance data after linear extrapolation looks like this. It increases the oscillation of the distance data, but provide a better estimation compared to just use the last sensor reading.</p>

<p><img src="/FastRobots/images/Lab5/no-better.png" alt="no-better" style="zoom:50%;" /></p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Prelab]]></summary></entry><entry><title type="html">Lab4</title><link href="http://localhost:4000/FastRobots/jekyll/update/2024/03/05/Lab4.html" rel="alternate" type="text/html" title="Lab4" /><published>2024-03-05T00:00:00-05:00</published><updated>2024-03-05T00:00:00-05:00</updated><id>http://localhost:4000/FastRobots/jekyll/update/2024/03/05/Lab4</id><content type="html" xml:base="http://localhost:4000/FastRobots/jekyll/update/2024/03/05/Lab4.html"><![CDATA[<h2 id="prelab">Prelab</h2>

<h3 id="1-diagram-with-your-intended-connections-between-the-motor-drivers-artemis-and-battery-with-specific-pin-numbers">1. Diagram with your intended connections between the motor drivers, Artemis, and battery (with specific pin numbers)</h3>

<p><img src="/FastRobots/images/Lab4/wire.jpg" alt="wire" /></p>

<h3 id="2-battery-discussion">2. Battery discussion</h3>

<p>We use seperate batteries to power artemis and the motors in order to reduce EMI between controller and actuator.</p>

<h2 id="lab-tasks">Lab Tasks</h2>

<h3 id="1-picture-of-your-setup-with-power-supply-and-oscilloscope-hookup">1. Picture of your setup with power supply and oscilloscope hookup</h3>

<p>Picture of power supply:</p>

<p><img src="/FastRobots/images/Lab4/dc.jpg" alt="dc" style="zoom:33%;" /></p>

<p>Oscilloscope hookup:</p>

<p><img src="/FastRobots/images/Lab4/spin.jpg" alt="spin" style="zoom:33%;" /></p>

<h3 id="2-power-supply-setting-discussion">2. Power supply setting discussion</h3>

<p>I use the voltage generator to ouput 3.7V DC power supply to the motor drivers, in order to keep the same as batteries.</p>

<h3 id="3-include-the-code-snippet-for-your-analogwrite-code-that-tests-the-motor-drivers">3. Include the code snippet for your analogWrite code that tests the motor drivers</h3>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// go straight</span>
  <span class="n">analogWrite</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
  <span class="n">analogWrite</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="mi">35</span><span class="p">);</span>

  <span class="n">analogWrite</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
  <span class="n">analogWrite</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">60</span><span class="p">);</span>
  <span class="n">delay</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="4-image-of-your-oscilloscope">4. Image of your oscilloscope</h3>

<p><img src="/FastRobots/images/Lab4/osci.jpg" alt="osci" /></p>

<p>video when adjusting pwm output:</p>

<iframe width="467" height="830" src="https://www.youtube.com/embed/WrhX-cahByo" title="Fast robot lab4 - adjust pwm output" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe>

<h3 id="5-short-video-of-wheels-spinning-as-expected-including-code-snippet-its-running-on">5. Short video of wheels spinning as expected (including code snippet it’s running on)</h3>

<iframe width="560" height="315" src="https://www.youtube.com/embed/fkLowDbxA-E?si=F_uwzXzWtdyvDwg-" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe>

<h3 id="6-short-video-of-both-wheels-spinning-with-battery-driving-the-motor-drivers">6. Short video of both wheels spinning (with battery driving the motor drivers)</h3>

<iframe width="467" height="830" src="https://www.youtube.com/embed/CKZCbataMDc" title="Fast robot lab4 - power on battery" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe>

<h3 id="7-picture-of-all-the-components-secured-in-the-car">7. Picture of all the components secured in the car</h3>

<p><img src="/FastRobots/images/Lab4/comp.jpg" alt="comp" style="zoom:50%;" /></p>

<h3 id="8-lower-limit-pwm-value-discussion">8. Lower limit PWM value discussion</h3>

<p>The lowest pwm value for left wheels is 50;</p>

<p>The lowest pwm avalue for right wheels is 28.</p>

<h3 id="9-calibration-demonstration-discussion-video-code-pictures-as-needed">9. Calibration demonstration (discussion, video, code, pictures as needed)</h3>

<p>I use the code below to calibrate the original output (ranging from 0 ~ 1000) to the new output for pwm (ranging from 0 ~ 255)</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">ctrl_pwm_map</span><span class="p">(</span><span class="kt">int</span> <span class="n">control</span><span class="p">,</span> <span class="kt">int</span> <span class="n">ctrl_min</span><span class="p">,</span> <span class="kt">int</span> <span class="n">ctrl_max</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pwm_min</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pwm_max</span><span class="p">)</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">pwm</span> <span class="o">=</span> <span class="p">(</span><span class="n">control</span> <span class="o">-</span> <span class="n">ctrl_min</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">pwm_max</span> <span class="o">-</span> <span class="n">pwm_min</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="n">ctrl_max</span> <span class="o">-</span> <span class="n">ctrl_min</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwm_min</span><span class="p">;</span>
  <span class="k">return</span> <span class="n">pwm</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">left_pwm</span> <span class="o">=</span> <span class="n">ctrl_pwm_map</span><span class="p">(</span><span class="n">control</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1000</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">255</span><span class="p">);</span>
<span class="n">right_pwm</span> <span class="o">=</span> <span class="n">ctrl_pwm_map</span><span class="p">(</span><span class="n">control</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1000</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">255</span><span class="p">);</span>
</code></pre></div></div>

<h3 id="10-open-loop-code-and-video">10. Open loop code and video</h3>

<iframe width="467" height="830" src="https://www.youtube.com/embed/shiN0Y1AhcQ" title="Fast robot lab4 - car go straight" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe>

<h3 id="11-5000-analogwrite-frequency-discussion-include-screenshots-and-code">11. (5000) analogWrite frequency discussion (include screenshots and code)</h3>

<p>The frequency of analogWrite is fast enough for the motors.</p>

<p>Manually configuring timers to generate a faster PWM signal can:</p>

<ol>
  <li>spare more resource for CPU to carray out other time consuming tasks</li>
  <li>increase the control accuracy for motors</li>
</ol>

<h3 id="12-5000-lowest-pwm-value-speed-once-in-motion-discussion-include-videos-where-appropriate">12. (5000) Lowest PWM value speed (once in motion) discussion (include videos where appropriate)</h3>

<table>
  <thead>
    <tr>
      <th>Condition</th>
      <th>Left Motor</th>
      <th>Right Motor</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>start from rest</td>
      <td>50</td>
      <td>28</td>
    </tr>
    <tr>
      <td>move when running</td>
      <td>45</td>
      <td>24</td>
    </tr>
  </tbody>
</table>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Prelab]]></summary></entry><entry><title type="html">Lab3</title><link href="http://localhost:4000/FastRobots/jekyll/update/2024/02/21/Lab3.html" rel="alternate" type="text/html" title="Lab3" /><published>2024-02-21T00:00:00-05:00</published><updated>2024-02-21T00:00:00-05:00</updated><id>http://localhost:4000/FastRobots/jekyll/update/2024/02/21/Lab3</id><content type="html" xml:base="http://localhost:4000/FastRobots/jekyll/update/2024/02/21/Lab3.html"><![CDATA[<h2 id="prelab">Prelab</h2>

<h3 id="1-note-the-i2c-sensor-address">1. Note the I2C sensor address</h3>

<p><img src="/FastRobots/images/Lab3/i2c addr of ToF sensor.png" alt="i2c addr of ToF sensor" style="zoom: 33%;" /></p>

<p>From the datasheet of VL53L1X Distance Sensor, we can read that the I2C sensor address if <strong>0x29</strong>.</p>

<h3 id="2-briefly-discuss-the-approach-to-using-2-tof-sensors">2. <strong>Briefly</strong> discuss the approach to using 2 ToF sensors</h3>

<p>Although the lab guide suggests using <code class="language-plaintext highlighter-rouge">SparkFun VL53L1X 4m Laser Distance Sensor</code> library, it doesnot have a clear and direct example that shows how to use more than 1 ToF sensors simaltaneously. So I choose to use the <code class="language-plaintext highlighter-rouge">VL53L1X</code> developed by Pololu.</p>

<p><img src="/FastRobots/images/Lab3/vl53l1x.png" alt="vl53l1x" style="zoom:50%;" /></p>

<p>Load the <code class="language-plaintext highlighter-rouge">ContinuousMultipleSensors.ino</code> file from its Examples. It provide the sketch of using mulitple ToF sensors. I do the following job to make it compatible with my own robot.</p>

<h4 id="1-solder-two-seperate-wires-to-their-shutdown-pins">(1) Solder two seperate wires to their shutdown pins</h4>

<p><img src="/FastRobots/images/Lab3/shutdown pin wires.jpg" alt="shutdown pin wires" style="zoom: 20%;" /></p>

<ul>
  <li>Green wire connects pin 15 and the XSHUT of front ToF sensor</li>
  <li>Yellow wire connects pin 16 and the XSHUT of side ToF sensor</li>
</ul>

<h4 id="2-configure-shutdown-pins-number-and-reset-their-address">(2) Configure shutdown pins number and reset their address</h4>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">const</span> <span class="kt">uint8_t</span> <span class="n">xshutPins</span><span class="p">[</span><span class="n">sensorCount</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">16</span> <span class="p">};</span>

<span class="k">for</span> <span class="p">(</span><span class="kt">uint8_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">sensorCount</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
<span class="p">{</span>
  <span class="c1">// Stop driving this sensor's XSHUT low. This should allow the carrier</span>
  <span class="c1">// board to pull it high. (We do NOT want to drive XSHUT high since it is</span>
  <span class="c1">// not level shifted.) Then wait a bit for the sensor to start up.</span>
  <span class="n">pinMode</span><span class="p">(</span><span class="n">xshutPins</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">INPUT</span><span class="p">);</span>
  <span class="p">......</span>
    
  <span class="c1">// reset sensor I2C address</span>
  <span class="n">sensors</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">setAddress</span><span class="p">(</span><span class="mh">0x2A</span> <span class="o">+</span> <span class="n">i</span><span class="p">);</span>
  <span class="p">......</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="3-briefly-discuss-placement-of-sensors-on-robot-and-scenarios-where-you-will-miss-obstacles">3. <strong>Briefly</strong> discuss placement of sensors on robot and scenarios where you will miss obstacles</h3>

<p>One installed on the front of the robot and the other on the right side of the robot.</p>

<p>Scenarios that may miss obstables:</p>

<ul>
  <li>The obstacles are on the left or on the back of the robot</li>
  <li>The obstacles are too high or too low</li>
</ul>

<h3 id="4-sketch-of-wiring-diagram">4. Sketch of wiring diagram</h3>

<p><img src="/FastRobots/images/Lab3/2tof.jpg" alt="2tof" style="zoom: 33%;" /></p>

<h2 id="lab-tasks">Lab Tasks</h2>

<h3 id="1-picture-of-your-tof-sensor-connected-to-your-qwiic-breakout-board">1. Picture of your ToF sensor connected to your QWIIC breakout board</h3>

<p><img src="/FastRobots/images/Lab3/breaout board.jpg" alt="breaout board" style="zoom:25%;" /></p>

<h3 id="2-screenshot-of-artemis-scanning-for-i2c-device-and-discussion-on-i2c-address">2. Screenshot of Artemis scanning for I2C device (and discussion on I2C address)</h3>

<p>I add the following code to display the process of scanning for I2C devices:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="p">(</span><span class="kt">uint8_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">sensorCount</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
<span class="p">{</span>
	<span class="p">......</span>

  <span class="kt">uint8_t</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">sensors</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">getAddress</span><span class="p">();</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">printf</span><span class="p">(</span><span class="s">"Detected sensor %d with address %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">addr</span><span class="p">);</span>
  <span class="p">......</span>

  <span class="c1">// Each sensor must have its address changed to a unique value other than</span>
  <span class="c1">// the default of 0x29 (except for the last one, which could be left at</span>
  <span class="c1">// the default). To make it simple, we'll just count up from 0x2A.</span>
  <span class="n">sensors</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">setAddress</span><span class="p">(</span><span class="mh">0x2A</span> <span class="o">+</span> <span class="n">i</span><span class="p">);</span>

  <span class="n">Serial</span><span class="p">.</span><span class="n">printf</span><span class="p">(</span><span class="s">"Set new address %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="mh">0x2A</span> <span class="o">+</span> <span class="n">i</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The screenshot:</p>

<p><img src="/FastRobots/images/Lab3/scan i2c devices.png" alt="scan i2c devices" style="zoom:45%;" /></p>

<p>41 in decimal is 0x29 in hexadecimal, which is same as the initial i2c address.</p>

<p>The newly set address is 42 and 43, which correspond to 0x2A and 0x2B.</p>

<p>Now the 2 ToF sensors have two different I2C address, so they can all be read on the same time.</p>

<h3 id="3-discussion-and-pictures-of-sensor-data-with-chosen-mode">3. Discussion and pictures of sensor data with chosen mode</h3>

<p>From 100mm to 1000mm, I sampled 20 data points at each position with three diffrent modes, and plot them on the graph.</p>

<p><img src="/FastRobots/images/Lab3/3modes-compare.png" alt="3modes-compare" style="zoom:33%;" /></p>

<p>The short mode has least standard deviation. The deviation of sample datapoints at each position of short mode is plotted below:</p>

<p><img src="/FastRobots/images/Lab3/std_dev.png" alt="std_dev" style="zoom: 33%;" /></p>

<p>It can be seen from the plot that when the distance is larger than 1.3m, the standard deviation of the data points has a large leap. So if we choose Short Mode, we’d better keep the obstacles within 1.3m of the ToF sensor.</p>

<h3 id="4-2-tof-sensors-discussion-and-screenshot-of-sensors-working-in-parallel">4. 2 ToF sensors: Discussion and screenshot of sensors working in parallel</h3>

<p>Two ToF sensors are connected through Qwiic connect system to the Artemis board, with the help of a multiport board. However, the default address of I2C address are the same for two ToF sensors, so we need to modify the hardware to support two sensors working in parellel.</p>

<p>The first thing I do is solder two seperate wires to each of the sensor’s XSHUT pin. And they are all pulled LOW in order to disable the sensors. Then one by one, stop driving the XSHUT pin LOW, which will enable a certain sensor. After that, setting the Distance Mode of current sensor and assign a new address to it, so that later we can directly call the sensors without manipulating the XSHUT pins.</p>

<p>Now all the sensors can work in the same time. Below is the screenshot:</p>

<p><img src="/FastRobots/images/Lab3/paralell.png" alt="paralell" style="zoom: 40%;" /></p>

<h3 id="5-tof-sensor-speed-discussion-on-speed-and-limiting-factor-include-code-snippet-of-how-you-do-this">5. Tof sensor speed: Discussion on speed and limiting factor; include code snippet of how you do this</h3>

<p>I record the distance data to an array without blocking the main loop of the program,</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Record</span> <span class="n">records</span><span class="p">[</span><span class="n">MAX_RECORDS_LEN</span><span class="p">];</span>

<span class="kt">uint16_t</span> <span class="n">record_ptr</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">saveCurrRecordToArray</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">ControllerRecord</span> <span class="n">ctrl_record</span> <span class="o">=</span> <span class="n">getCtrlRecord</span><span class="p">();</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">record_ptr</span> <span class="o">&lt;</span> <span class="n">MAX_RECORDS_LEN</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">records</span><span class="p">[</span><span class="n">record_ptr</span><span class="p">].</span><span class="n">timestamp_ms</span> <span class="o">=</span> <span class="n">elapsed_ms</span><span class="p">;</span>
        <span class="n">records</span><span class="p">[</span><span class="n">record_ptr</span><span class="p">].</span><span class="n">distance</span> <span class="o">=</span> <span class="n">distance</span><span class="p">;</span>
        <span class="n">record_ptr</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
		<span class="p">......</span>
    <span class="c1">// While central is connected</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">central</span><span class="p">.</span><span class="n">connected</span><span class="p">())</span> <span class="p">{</span>
          <span class="p">......</span>
          <span class="n">curr_ms</span> <span class="o">=</span> <span class="n">millis</span><span class="p">();</span>
          <span class="n">elapsed_ms</span> <span class="o">=</span> <span class="n">curr_ms</span> <span class="o">-</span> <span class="n">start_ms</span><span class="p">;</span>

          <span class="n">distance</span> <span class="o">=</span> <span class="n">readDistance</span><span class="p">();</span> 
          <span class="n">saveCurrRecordToArray</span><span class="p">();</span>
          <span class="p">......</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>And send the recored data to laptop over bluetooth:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">handleCommand</span><span class="p">()</span> <span class="p">{</span>
  	<span class="p">......</span>
  	<span class="k">switch</span> <span class="p">(</span><span class="n">cmd_type</span><span class="p">)</span> <span class="p">{</span>
        <span class="p">......</span>
        <span class="k">case</span> <span class="n">GET_HISTORY_DATA</span><span class="p">:</span> <span class="p">{</span>
          
            <span class="k">const</span> <span class="n">Record</span> <span class="o">*</span><span class="n">records</span><span class="p">;</span>
            <span class="kt">uint16_t</span> <span class="n">records_size</span> <span class="o">=</span> <span class="n">getHistoryRecords</span><span class="p">(</span><span class="o">&amp;</span><span class="n">records</span><span class="p">);</span>

            <span class="n">tx_estring_value</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
            <span class="n">tx_estring_value</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">"Size of records array: "</span><span class="p">);</span>
            <span class="n">tx_estring_value</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">records_size</span><span class="p">);</span>
            <span class="n">tx_characteristic_string</span><span class="p">.</span><span class="n">writeValue</span><span class="p">(</span><span class="n">tx_estring_value</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>

            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">records_size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">putARecordToTxEstring</span><span class="p">(</span><span class="n">records</span> <span class="o">+</span> <span class="n">i</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
                <span class="n">tx_characteristic_string</span><span class="p">.</span><span class="n">writeValue</span><span class="p">(</span><span class="n">tx_estring_value</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
            <span class="p">}</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="p">......</span>
		<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>When the Distance Mode changes or the parameter inside <code class="language-plaintext highlighter-rouge">sensors[i].startContinuous(period_ms);</code> changes, the average of sensor reading intervals are subject to change. I tested several groups of data and list them in the tables below.</p>

<table>
  <thead>
    <tr>
      <th>Distance Mode: Long</th>
      <th>startContinuous(50)</th>
      <th>startContinuous(100)</th>
      <th>startContinuous(200)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Average Interval (ms):</td>
      <td>92</td>
      <td>92</td>
      <td>186</td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th>Distance Mode: Medium</th>
      <th>startContinuous(33)</th>
      <th>startContinuous(100)</th>
      <th>startContinuous(200)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Average Interval (ms):</td>
      <td>61</td>
      <td>92</td>
      <td>185</td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th>Distance Mode: Short</th>
      <th>startContinuous(20)</th>
      <th>startContinuous(100)</th>
      <th>startContinuous(200)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Average Interval (ms):</td>
      <td>37</td>
      <td>92</td>
      <td>185</td>
    </tr>
  </tbody>
</table>

<p>We can conclude that there are 3 factors that limit ToF sensor speed:</p>

<ul>
  <li><strong>Frequency of the main loop</strong>: If their are too many code in the main loop, or some code block the running of the main loop function, the reading of ToF sensors will be delayed.</li>
  <li><strong>Parameter in the sensor.startContinuous()</strong>: The smaller the parameter is, the faster the sensor reads, but there is a lower bound affected by distance mode.</li>
  <li><strong>Tof sensor speed</strong>: When set to Short, sensor has the highest possible reading speed, when set to Long, sensor has the lowest possible reading speed.</li>
</ul>

<p>The minimal sensor reading interval is 37ms, which is 27Hz.</p>

<h3 id="6-time-v-distance-include-graph-of-data-sent-over-bluetooth-2-sensors">6. Time v Distance: Include graph of data sent over bluetooth (2 sensors)</h3>

<p><img src="/FastRobots/images/Lab3/2-distance.png" alt="2-distance" style="zoom:50%;" /></p>

<h3 id="7-5000-discussion-on-infrared-transmission-based-sensors">7. (5000) Discussion on infrared transmission based sensors</h3>

<p>Infrared (IR) distance sensors are a popular choice for many applications due to their non-contact nature, which makes them ideal for measuring distances without physically touching the object.</p>

<p>There are different types of IR based sensors:</p>

<ol>
  <li><strong>Infrared Time-of-Flight (ToF) Sensors</strong>
    <ul>
      <li>Pros: High accuracy and precision; Immune to ambient light; Good range</li>
      <li>Cons: High Cost; Sensitive to materials</li>
    </ul>
  </li>
  <li><strong>Infrared Reflective Sensors</strong>
    <ul>
      <li>Pros: Cost-effective; Easy to integrate and use</li>
      <li>Cons: Limited range; Sensitive to ambient light</li>
    </ul>
  </li>
  <li><strong>Infrared Array Sensors</strong>
    <ul>
      <li>Pros: Spatial awareness</li>
      <li>Cons: High complexity and cost</li>
    </ul>
  </li>
</ol>

<h3 id="8-5000-sensitivity-of-sensors-to-colors-and-textures">8. (5000) Sensitivity of sensors to colors and textures</h3>

<h4 id="principle-analysis">Principle Analysis</h4>

<p>The design of the infrared depth sensor is based on the principle of Time of Flight (TOF), that is, the sensor emits the modulated near-infrared light, which is reflected after the object, and the sensor calculates the distance from the object by calculating the time difference or phase difference between the emission and reflection of the light.</p>

<p><img src="/FastRobots/images/Lab3/tof-1.png" alt="tof-1" style="zoom: 33%;" /></p>

<p>Because the light is infrared, not in the spectrum of visable light, the color of the reflection plane will not have a direct impact on the IR sensor.</p>

<p>But if the plane is too smooth that it causes speccular reflection instead of diffuse reflection, it is very likely that the receivers will not detect any light from the smooth surface.</p>

<p><img src="/FastRobots/images/Lab3/tof-2.png" alt="tof-2" style="zoom:50%;" /></p>

<h4 id="colors">Colors</h4>

<p>I tried 3 different colors: orange, blue and green. Below is the comparison:</p>

<p><img src="/FastRobots/images/Lab3/colors.png" alt="colors" style="zoom:50%;" /></p>

<p>We can see that the colors have little influence on the accuracy of the ToF sensors.</p>

<h4 id="textures">Textures</h4>

<p>I tried 3 different textures: white wall, glass (the screen of my iPad) and metal (the back panel of my iPad), and below is the distance sensor reading:</p>

<p><img src="/FastRobots/images/Lab3/textures.png" alt="textures" style="zoom:50%;" /></p>

<p>On the conditions of wall and metal, the ToF sensor works normally. Howver, when the reflection plane is glass, the accuracy of the ToF sensors drops sharply, which means the data of ToF sensor have large standard deviation, adding uncertainty to the data.</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Prelab]]></summary></entry></feed>