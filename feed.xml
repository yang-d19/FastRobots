<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/FastRobots/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/FastRobots/" rel="alternate" type="text/html" /><updated>2024-02-09T15:49:18-05:00</updated><id>http://localhost:4000/FastRobots/feed.xml</id><title type="html">Fast Robots 2024 Spring</title><subtitle>This website displays the content in the course Fast Robots (Cornell ECE 5160 Spring 2024).</subtitle><entry><title type="html">Lab1</title><link href="http://localhost:4000/FastRobots/jekyll/update/2024/01/26/Lab1.html" rel="alternate" type="text/html" title="Lab1" /><published>2024-01-26T23:46:21-05:00</published><updated>2024-01-26T23:46:21-05:00</updated><id>http://localhost:4000/FastRobots/jekyll/update/2024/01/26/Lab1</id><content type="html" xml:base="http://localhost:4000/FastRobots/jekyll/update/2024/01/26/Lab1.html"><![CDATA[<h2 id="prelab">Prelab</h2>

<blockquote>
  <p>Setup: Briefly describe the steps taken to set up your computer for Lab 2, showing any results (i.e. MAC address printing)</p>
</blockquote>

<p>In the serial monitor of Arduino, MAC address of the bluetooth device is printed:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Advertising BLE with MAC: c0:89:f0:6b:6:4b
</code></pre></div></div>

<p>In the <code class="language-plaintext highlighter-rouge">connection.yaml</code> file of the jupyter notebook, I set the MAC address of the target bluetooth device as following:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>artemis_address: 'C0:89:F0:6B:06:4B'
</code></pre></div></div>

<p>The uuid of the bluetooth is also reset with the newly generated one.</p>

<p><img src="/FastRobots/images/Lab1/generate-uuid.png" alt="uuid" /></p>

<blockquote>
  <p>Codebase: Add a brief explanation of your understanding of the codebase and how Bluetooth works between your computer and the Artemis</p>
</blockquote>

<p>The codebase scans all nearby devices and pair to the exact atemis board with the unique uuid that I generated.</p>

<p>Some of the connection process varies by the different operating systems that users may have on their computer.</p>

<p>Then all common functions are provided through the class <code class="language-plaintext highlighter-rouge">ArtemisBLEController</code>, which supports reading and writing data to the ble, and creates a notifier and callback function to process the data received by itself.</p>

<h2 id="tasks">Tasks</h2>

<h3 id="11">1.1</h3>

<blockquote>
  <p>Hook the Artemis board up to your computer, and follow the instructions from bulletpoint 2 above (“Introduction” and “Arduino Installation”).</p>
</blockquote>

<p>Required libraries are downloaded successfully.</p>

<h3 id="12">1.2</h3>

<blockquote>
  <p>From the setup instructions linked above, follow the instructions in “Example: Blink it Up”.</p>
</blockquote>

<p><img src="/FastRobots/images/Lab1/upload.png" alt="upload" /></p>

<h3 id="13">1.3</h3>

<blockquote>
  <p>In File-&gt;Examples-&gt;Artemis Examples, run Example4_Serial. (Note: to view the output and provide input open the serial monitor in the upper right hand corner of the script window.)</p>
</blockquote>

<p><img src="/FastRobots/images/Lab1/serial-echo.png" alt="serial-echo" /></p>

<h3 id="14">1.4</h3>

<blockquote>
  <p>In File-&gt;Examples-&gt;Artemis Examples, run Example2_analogRead to test your temperature sensor. Try blowing on or touching the chip to change its temperature. It may take a while to transfer your heat.</p>
</blockquote>

<p><img src="/FastRobots/images/Lab1/tmp-read.png" alt="tmp-read" /></p>

<h3 id="15">1.5</h3>

<blockquote>
  <p>In File-&gt;Examples-&gt;PDM, run Example1_MicrophoneOutput to test your microphone. E.g. try whistling or speaking to change the highest frequency.</p>
</blockquote>

<p><img src="/FastRobots/images/Lab1/microphone.png" alt="microphone" /></p>

<h3 id="21">2.1</h3>

<blockquote>
  <p>Send an <em>ECHO</em> command with a string value from the computer to the Artemis board, and receive an augmented string on the computer.</p>
</blockquote>

<p>The arduino side:</p>

<p><img src="/FastRobots/images/Lab1/task1-arduino.png" alt="task1-arduino" /></p>

<p>The jupyter notebook side:</p>

<p><img src="/FastRobots/images/Lab1/task1-jupyter.png" alt="task1-jupyter" /></p>

<h3 id="22">2.2</h3>

<blockquote>
  <p>Add a command GET_TIME_MILLIS which makes the robot reply write a string such as “T:123456” to the string characteristic.</p>
</blockquote>

<p>In the arduino side:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">case</span> <span class="n">GET_TIME_MILLIS</span><span class="p">:</span> <span class="p">{</span>
    <span class="k">const</span> <span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="n">millis</span><span class="p">();</span>
    <span class="n">tx_estring_value</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
    <span class="n">tx_estring_value</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">"T: "</span><span class="p">);</span>
    <span class="n">tx_estring_value</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">t</span><span class="p">);</span>
    <span class="n">tx_characteristic_string</span><span class="p">.</span><span class="n">writeValue</span><span class="p">(</span><span class="n">tx_estring_value</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
    <span class="k">break</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The jupyter side:</p>

<p><img src="/FastRobots/images/Lab1/task2-get-ms.png" alt="task2-get-ms" /></p>

<h3 id="23">2.3</h3>

<blockquote>
  <p>Setup a notification handler in Python to receive the string value (the <strong>BLEStringCharactersitic</strong> in Arduino) from the Artemis board. In the callback function, extract the time from the string.</p>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">notification_handler</span><span class="p">(</span><span class="n">uuid</span><span class="p">,</span> <span class="n">byte_array</span><span class="p">):</span>
    <span class="n">time_ms_str</span> <span class="o">=</span> <span class="n">ble</span><span class="p">.</span><span class="nf">bytearray_to_string</span><span class="p">(</span><span class="n">byte_array</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">time_ms_str</span><span class="p">)</span>
    
<span class="n">ble</span><span class="p">.</span><span class="nf">start_notify</span><span class="p">(</span><span class="n">ble</span><span class="p">.</span><span class="n">uuid</span><span class="p">[</span><span class="sh">'</span><span class="s">RX_STRING</span><span class="sh">'</span><span class="p">],</span> <span class="n">notification_handler</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="24">2.4</h3>

<blockquote>
  <p>Write a loop that gets the current time in milliseconds and sends it to your laptop to be received and processed by the notification handler. Collect these values for a few seconds and use the time stamps to determine how fast messages can be sent. What is the effective data transfer rate of this method?</p>
</blockquote>

<p>In the arduino side, send current time in millisecond form in the write_data() function.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">write_data</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">currentMillis</span> <span class="o">=</span> <span class="n">millis</span><span class="p">();</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">currentMillis</span> <span class="o">-</span> <span class="n">previousMillis</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
      
        <span class="n">tx_estring_value</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
        <span class="n">tx_estring_value</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">"T: "</span><span class="p">);</span>
        <span class="n">tx_estring_value</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="k">const</span> <span class="kt">int</span><span class="p">)</span><span class="n">currentMillis</span><span class="p">);</span>
        <span class="n">tx_characteristic_string</span><span class="p">.</span><span class="n">writeValue</span><span class="p">(</span><span class="n">tx_estring_value</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>

        <span class="n">previousMillis</span> <span class="o">=</span> <span class="n">currentMillis</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In the loop() function, call write_data() function</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// Listen for connections</span>
    <span class="n">BLEDevice</span> <span class="n">central</span> <span class="o">=</span> <span class="n">BLE</span><span class="p">.</span><span class="n">central</span><span class="p">();</span>
    <span class="c1">// If a central is connected to the peripheral</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">central</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">"Connected to: "</span><span class="p">);</span>
        <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">central</span><span class="p">.</span><span class="n">address</span><span class="p">());</span>
        <span class="c1">// While central is connected</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">central</span><span class="p">.</span><span class="n">connected</span><span class="p">())</span> <span class="p">{</span>
            <span class="c1">// Send data</span>
            <span class="n">write_data</span><span class="p">();</span>
            <span class="c1">// Read data</span>
            <span class="n">read_data</span><span class="p">();</span>
        <span class="p">}</span>
        <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"Disconnected"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Result:</p>

<p><img src="/FastRobots/images/Lab1/callback-time-ms-string.png" alt="" /></p>

<p>The average time interval is 12.54 ms</p>

<p>Effective data transfer rate is 80 msg/second</p>

<h3 id="25">2.5</h3>

<blockquote>
  <p>Now create an array that can store time stamps. This array should be defined globally so that other functions can access it if need be. In the loop, rather than send each time stamp, place each time stamp into the array. (Note: you’ll need some extra logic to determine when your array is full so you don’t “over fill” the array.) Then add a command SEND_TIME_DATA which loops the array and sends each data point as a string to your laptop to be processed. (You can store these values in a list in python to determine if all the data was sent over.)</p>
</blockquote>

<p>Arduino:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="n">end_pt</span> <span class="o">&lt;</span> <span class="n">buffer_size</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">time_stamps</span><span class="p">[</span><span class="n">end_pt</span><span class="p">]</span> <span class="o">=</span> <span class="n">currentMillis</span><span class="p">;</span>
  <span class="n">end_pt</span><span class="o">++</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">case</span> <span class="n">SEND_TIME_DATA</span><span class="p">:</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">end_pt</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">tx_estring_value</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
      <span class="n">tx_estring_value</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">"T: "</span><span class="p">);</span>
      <span class="n">tx_estring_value</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">time_stamps</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
      <span class="n">tx_characteristic_string</span><span class="p">.</span><span class="n">writeValue</span><span class="p">(</span><span class="n">tx_estring_value</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
    <span class="p">}</span>
    <span class="c1">// reset the buffer</span>
    <span class="n">end_pt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">break</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="26">2.6</h3>

<blockquote>
  <p>Add a second array that is the same size as the time stamp array. Use this array to store temperature readings. Each element in both arrays should correspond, e.e., the first time stamp was recorded at the same time as the first temperature reading. Then add a command GET_TEMP_READINGS that loops through both arrays concurrently and sends each temperature reading with a time stamp. The notification handler should parse these strings and add populate the data into two lists.</p>
</blockquote>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="n">end_pt</span> <span class="o">&lt;</span> <span class="n">buffer_size</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">time_stamps</span><span class="p">[</span><span class="n">end_pt</span><span class="p">]</span> <span class="o">=</span> <span class="n">currentMillis</span><span class="p">;</span>
    <span class="n">temperatures</span><span class="p">[</span><span class="n">end_pt</span><span class="p">]</span> <span class="o">=</span> <span class="n">getTempDegF</span><span class="p">();</span>
    <span class="n">end_pt</span><span class="o">++</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">case</span> <span class="n">GET_TEMP_READINGS</span><span class="p">:</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">end_pt</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">tx_estring_value</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>

      <span class="n">tx_estring_value</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">time_stamps</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
      <span class="n">tx_estring_value</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">"|"</span><span class="p">);</span>
      <span class="n">tx_estring_value</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">temperatures</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>

      <span class="n">tx_characteristic_string</span><span class="p">.</span><span class="n">writeValue</span><span class="p">(</span><span class="n">tx_estring_value</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
    <span class="p">}</span>
    <span class="c1">// reset the buffer</span>
    <span class="n">end_pt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">break</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In jupyter notebook, parse the received data to two lists:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">parse_to_time_temp</span><span class="p">(</span><span class="n">ss</span><span class="p">):</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">ss</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">|</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">time_ms</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="n">temperature</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
    <span class="n">time_stamps</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">time_ms</span><span class="p">)</span>
    <span class="n">temperatures</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">temperature</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">time (ms): </span><span class="si">{</span><span class="n">time_ms</span><span class="si">}</span><span class="s">   temp (F): </span><span class="si">{</span><span class="n">temperature</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<p>Some of the temperature data:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>time (ms): 691528   temp (F): 68.990
time (ms): 692029   temp (F): 72.865
time (ms): 692530   temp (F): 69.571
time (ms): 693031   temp (F): 70.23
time (ms): 693534   temp (F): 68.602
time (ms): 694035   temp (F): 70.23
time (ms): 694536   temp (F): 69.54
time (ms): 695037   temp (F): 69.765
time (ms): 695538   temp (F): 69.571
time (ms): 696039   temp (F): 69.829
time (ms): 696540   temp (F): 69.54
time (ms): 697041   temp (F): 69.700
time (ms): 697542   temp (F): 69.442
time (ms): 698043   temp (F): 69.765
time (ms): 698545   temp (F): 68.990
time (ms): 699046   temp (F): 68.667
time (ms): 699547   temp (F): 70.411
</code></pre></div></div>

<h3 id="27">2.7</h3>

<blockquote>
  <p>Discuss the differences between these two methods, the advantages and disadvantages of both and the potential scenarios that you might choose one method over the other. How “quickly” can the second method record data? The Artemis board has 384 kB of RAM. Approximately how much data can you store to send without running out of memory?</p>
</blockquote>

<p>The efficiency of the first method is lower than the second method, because it has to wait the previous message to be sent before sending the next message, causing delay in data transmission.</p>

<p>The second method can record data to the highest speed.</p>

<p>1 int consumes 4B space, 1 float consumes 4B</p>

<p>384 kB / 8B = 48k</p>

<p>So the largest data buffer length is 48k.</p>

<h3 id="additional-tasks-for-5000-level-students">Additional tasks for 5000-level students</h3>

<h3 id="1">1</h3>

<blockquote>
  <p><strong>Effective Data Rate And Overhead</strong>: Send a message from the computer and receive a reply from the Artemis board. Note the respective times for each event, calculate the data rate for 5-byte replies and 120-byte replies. Do many short packets introduce a lot of overhead? Do larger replies help to reduce overhead? You may also test additional reply sizes. Please include at least one plot to support your write-up.</p>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">start_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">*</span> <span class="mi">1000</span>

<span class="k">for</span> <span class="nb">len</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">120</span><span class="p">,</span> <span class="mi">240</span><span class="p">]:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">msg len = </span><span class="si">{</span><span class="nb">len</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">avg_rrt</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">20</span><span class="p">):</span>
        <span class="n">send_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">*</span> <span class="mi">1000</span>
        <span class="n">ble</span><span class="p">.</span><span class="nf">send_command</span><span class="p">(</span><span class="n">CMD</span><span class="p">.</span><span class="n">GET_REPLY_LEN</span><span class="p">,</span> <span class="nb">len</span><span class="p">)</span>
        <span class="n">s</span> <span class="o">=</span> <span class="n">ble</span><span class="p">.</span><span class="nf">receive_string</span><span class="p">(</span><span class="n">ble</span><span class="p">.</span><span class="n">uuid</span><span class="p">[</span><span class="sh">'</span><span class="s">RX_STRING</span><span class="sh">'</span><span class="p">])</span>
        <span class="n">recv_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">*</span> <span class="mi">1000</span>
        
        <span class="n">rrt</span> <span class="o">=</span> <span class="n">recv_time</span> <span class="o">-</span> <span class="n">send_time</span>
        <span class="n">avg_rrt</span> <span class="o">+=</span> <span class="n">rrt</span>
        <span class="c1"># print(rrt)
</span>        
    <span class="n">avg_rrt</span> <span class="o">/=</span> <span class="mi">20</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">avg rrt = </span><span class="si">{</span><span class="n">avg_rrt</span><span class="si">}</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<p>Result:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>msg len = 5
avg rrt = 118.93128662109375

msg len = 10
avg rrt = 119.98502197265626

msg len = 20
avg rrt = 119.98466796875

msg len = 40
avg rrt = 120.075537109375

msg len = 80
avg rrt = 121.49056396484374

msg len = 120
avg rrt = 124.49266357421875

msg len = 240
avg rrt = 121.423779296875
</code></pre></div></div>

<p><img src="/FastRobots/images/Lab1/chart.png" alt="chart" /></p>

<p>Large replies doesnot reduce overhead significantly.</p>

<h3 id="2">2</h3>

<blockquote>
  <p><strong>Reliability</strong>: What happens when you send data at a higher rate from the robot to the computer? Does the computer read all the data published (without missing anything) from the Artemis board? Include your answer in the write-up.</p>
</blockquote>

<p>If data was sent too fast, the buffer of the bluetooth receiver may be overflowed and some data will be discarded. So some of the data will be missed.</p>

<h2 id="discussion">Discussion</h2>

<blockquote>
  <p>Briefly describe what you’ve learned, challenges that you faced, and/or any unique solutions used to fix problems. It is important to keep these writeups succinct. You will not get extra points for writing more words if the content doesn’t contribute to communicating your understanding of the lab material.</p>
</blockquote>

<ol>
  <li>
    <p>The compiling process on M1 Mac is extremely slow and requires patience.</p>
  </li>
  <li>
    <p>The communication rate between computer and ble is important, they need to match each other.</p>
  </li>
  <li>
    <p>If not set the uuid properly, python program on my computer may connect to some other’s ble device.</p>
  </li>
  <li>
    <p>Jupyter notebook is hard to manipulate in some scenarios. Many of its control logic differs from normal python script.</p>
  </li>
</ol>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Prelab]]></summary></entry></feed>