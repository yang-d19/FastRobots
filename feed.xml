<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/FastRobots/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/FastRobots/" rel="alternate" type="text/html" /><updated>2024-04-16T03:18:19-04:00</updated><id>http://localhost:4000/FastRobots/feed.xml</id><title type="html">Fast Robots 2024 Spring</title><subtitle>This website displays the content in the course Fast Robots (Cornell ECE 5160 Spring 2024).</subtitle><entry><title type="html">Lab7</title><link href="http://localhost:4000/FastRobots/jekyll/update/2024/04/14/Lab7.html" rel="alternate" type="text/html" title="Lab7" /><published>2024-04-14T00:00:00-04:00</published><updated>2024-04-14T00:00:00-04:00</updated><id>http://localhost:4000/FastRobots/jekyll/update/2024/04/14/Lab7</id><content type="html" xml:base="http://localhost:4000/FastRobots/jekyll/update/2024/04/14/Lab7.html"><![CDATA[<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
      TeX: {
        equationNumbers: {
          autoNumber: "AMS"
        }
      },
      extensions: ["tex2jax.js"],
      jax: ["input/TeX", "output/HTML-CSS"],
      tex2jax: {
      inlineMath: [ ['$','$'], ["\\(","\\)"] ],
      displayMath: [ ['$$','$$'], ["\\[","\\]"] ],
      processEscapes: true,
      "HTML-CSS": { fonts: ["TeX"] }
    }
  });
  MathJax.Hub.Register.MessageHook("Math Processing Error",function (message) {
        alert("Math Processing Error: "+message[1]);
      });
  MathJax.Hub.Register.MessageHook("TeX Jax - parse error",function (message) {
        alert("Math Processing Error: "+message[1]);
      });
</script>

<script type="text/javascript" async="" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML"></script>

<h2 id="1-estimate-drag-and-momentum">1. Estimate drag and momentum</h2>

<blockquote>
  <p>Choose your step responce, u(t), to be of similar size to the PWM value you used in Lab 6 (to keep the dynamics similar). Pick something between 50%-100% of the maximum u.</p>
</blockquote>

<p>I choose 80% of the maximum u, so the pwm value is 210 out of 255.</p>

<p>The step response of the car is shown in the following graph:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span><span class="p">,</span> <span class="n">ax1</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">()</span>

<span class="n">color</span> <span class="o">=</span> <span class="sh">'</span><span class="s">tab:red</span><span class="sh">'</span>
<span class="n">ax1</span><span class="p">.</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Time (s)</span><span class="sh">'</span><span class="p">)</span>
<span class="n">ax1</span><span class="p">.</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Distance</span><span class="sh">'</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="n">color</span><span class="p">)</span>
<span class="n">ax1</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">timestamps_s</span><span class="p">,</span> <span class="n">distances</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="n">color</span><span class="p">)</span>
<span class="n">ax1</span><span class="p">.</span><span class="nf">tick_params</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="sh">'</span><span class="s">y</span><span class="sh">'</span><span class="p">,</span> <span class="n">labelcolor</span><span class="o">=</span><span class="n">color</span><span class="p">)</span>

<span class="n">ax2</span> <span class="o">=</span> <span class="n">ax1</span><span class="p">.</span><span class="nf">twinx</span><span class="p">()</span>  
<span class="n">color</span> <span class="o">=</span> <span class="sh">'</span><span class="s">tab:blue</span><span class="sh">'</span>
<span class="n">ax2</span><span class="p">.</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Left PWM</span><span class="sh">'</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="n">color</span><span class="p">)</span>  
<span class="n">ax2</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">timestamps_s</span><span class="p">,</span> <span class="n">left_pwms</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="n">color</span><span class="p">)</span>
<span class="n">ax2</span><span class="p">.</span><span class="nf">tick_params</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="sh">'</span><span class="s">y</span><span class="sh">'</span><span class="p">,</span> <span class="n">labelcolor</span><span class="o">=</span><span class="n">color</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">'</span><span class="s">Distance and PWM vs. Time</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/FastRobots/images/Lab7/step-distance-nointerp.jpeg" alt="step-distance-nointerp" style="zoom:40%;" /></p>

<p>Because the distance sensor is operated in a non-blocking way, there are significant steps in the distance measurements. It brings errors in the velocity calculation. To solve this problem, I use interpolatation tool in numpy to guess the distance data between new sensor reading values.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># find non accurate data points
</span><span class="n">to_delete_idxs</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">length</span><span class="p">):</span>
    <span class="n">curr_dist</span> <span class="o">=</span> <span class="n">distances</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>
    <span class="k">if</span> <span class="n">curr_dist</span> <span class="o">==</span> <span class="n">prev_dist</span><span class="p">:</span>
        <span class="n">to_delete_idxs</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">prev_dist</span> <span class="o">=</span> <span class="n">curr_dist</span>
        
<span class="c1"># interpolation
</span><span class="n">interpolated_distances</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">interp</span><span class="p">(</span><span class="n">timestamps_ms</span><span class="p">,</span> <span class="n">new_timestamps</span><span class="p">,</span> <span class="n">new_distances</span><span class="p">)</span>
</code></pre></div></div>

<p>The new graph is shown as follows:</p>

<p><img src="/FastRobots/images/Lab7/stepresponse-distance.jpeg" alt="stepresponse-distance" style="zoom:40%;" /></p>

<blockquote>
  <p>Make sure your step time is long enough to reach steady state (you likely have to use active breaking of the car to avoid crashing into the wall). Make sure to use a peice of foam to avoid hitting to wall and damaging your car.</p>
</blockquote>

<p>The graph above indicates that the speed of car has reached steady state after 1.0s.</p>

<blockquote>
  <p>Show graphs for the TOF sensor output, the (computed) speed, and the motor input. Please ensure that the x-axis is in seconds.</p>
</blockquote>

<p>I compute the speed based on interpolated distance data points, and use multupolynominal smoothing to make the curve of speed easier to analyze:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># calculate velocity based on distance
</span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">length</span><span class="p">):</span>
    <span class="n">velocities</span><span class="p">.</span><span class="nf">append</span><span class="p">((</span><span class="n">distances</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">distances</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">])</span> <span class="o">/</span> <span class="p">(</span><span class="n">timestamps_ms</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">timestamps_ms</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]))</span>
    
<span class="c1"># polynominal smoothing
</span><span class="n">smooth_velocities</span> <span class="o">=</span> <span class="nf">savgol_filter</span><span class="p">(</span><span class="n">velocities</span><span class="p">,</span> <span class="n">window_length</span><span class="o">=</span><span class="mi">16</span><span class="p">,</span> <span class="n">polyorder</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
</code></pre></div></div>

<p>The graph looks like this:</p>

<p><img src="/FastRobots/images/Lab7/step-vel.jpg" alt="step-vel" style="zoom: 40%;" /></p>

<blockquote>
  <p>Measure the steady state speed, 90% rise time, and the speed at 90% risetime. (Note, this doesn’t have to be 90% rise time. You could also use somewhere between 60-90%, but the speed and time must correspond to get an accurate estimate for m.</p>
</blockquote>

<p><img src="/FastRobots/images/Lab7/step-velocity-calc.jpeg" alt="step-velocity-calc" style="zoom:40%;" /></p>

<p>steady state speed: 2.5 m/s = 2.5 mm/ms</p>

<p>90% rise time: 1.08 s = 1080 ms</p>

<blockquote>
  <p>When sending this data back to your laptop, make sure to save the data in a file so that you can use it even after your Jupyter kernal restarts. Consider writing the data to a <a href="https://docs.python.org/3/library/csv.html">CSV</a> file, <a href="https://docs.python.org/3/library/pickle.html">pickle file</a></p>
</blockquote>

<p>The data is saved to the output.csv file using the following code,</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="c1"># Create a DataFrame
</span><span class="n">data</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">'</span><span class="s">timestamp_ms</span><span class="sh">'</span><span class="p">:</span> <span class="n">timestamps_ms</span><span class="p">,</span>
    <span class="sh">'</span><span class="s">distance</span><span class="sh">'</span><span class="p">:</span> <span class="n">distances</span><span class="p">,</span>
    <span class="sh">'</span><span class="s">left_pwm</span><span class="sh">'</span><span class="p">:</span> <span class="n">left_pwms</span><span class="p">,</span>
    <span class="sh">'</span><span class="s">right_pwm</span><span class="sh">'</span><span class="p">:</span> <span class="n">right_pwms</span>
<span class="p">}</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="c1"># Save the DataFrame to a CSV file
</span><span class="n">df</span><span class="p">.</span><span class="nf">to_csv</span><span class="p">(</span><span class="sh">'</span><span class="s">output.csv</span><span class="sh">'</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</code></pre></div></div>

<p>which looks like this,</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># output.csv
</span><span class="n">timestamp_ms</span><span class="p">,</span><span class="n">distance</span><span class="p">,</span><span class="n">left_pwm</span><span class="p">,</span><span class="n">right_pwm</span>
<span class="mi">2</span><span class="p">,</span><span class="mi">1757</span><span class="p">,</span><span class="mi">213</span><span class="p">,</span><span class="mi">147</span>
<span class="mi">17</span><span class="p">,</span><span class="mi">1761</span><span class="p">,</span><span class="mi">213</span><span class="p">,</span><span class="mi">147</span>
<span class="mi">28</span><span class="p">,</span><span class="mi">1761</span><span class="p">,</span><span class="mi">213</span><span class="p">,</span><span class="mi">147</span>
<span class="mi">44</span><span class="p">,</span><span class="mi">1788</span><span class="p">,</span><span class="mi">213</span><span class="p">,</span><span class="mi">147</span>
<span class="mi">61</span><span class="p">,</span><span class="mi">1772</span><span class="p">,</span><span class="mi">213</span><span class="p">,</span><span class="mi">147</span>
<span class="mi">72</span><span class="p">,</span><span class="mi">1772</span><span class="p">,</span><span class="mi">213</span><span class="p">,</span><span class="mi">147</span>
<span class="mi">88</span><span class="p">,</span><span class="mi">1772</span><span class="p">,</span><span class="mi">213</span><span class="p">,</span><span class="mi">147</span>
<span class="p">...</span><span class="bp">...</span>
</code></pre></div></div>

<p>Video of the car running at full speed toward wall:</p>

<iframe width="1634" height="683" src="https://www.youtube.com/embed/yMFCCUuQPRI" title="Fast robot lab7: run towards the wall" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>

<h2 id="2-initialize-kf-python">2. Initialize KF (Python)</h2>

<blockquote>
  <p>Compute the A and B matrix given the terms you found above, and discretize your matrices. Be sure to note the sampling time in your write-up.</p>

</blockquote>

\[d = \frac{u}{\dot{x}}
 = \frac{1}{2.5 \space mm/ms} = 0.4\]

\[m = \frac{-d \times t_{0.9}}{\ln(1-0.9)} = \frac{-0.4 \times 1080}{-2.3} = 187.8\]

<p>Now we have the estimation of parameter $d$ and $m$, we can calculate the matrix $A$ abd $B$。</p>

\[A =
\begin{bmatrix}
0 &amp; 1 \\
0 &amp; -\frac{d}{m} 
\end{bmatrix} 

= \begin{bmatrix}
0 &amp; 1 \\
0 &amp; -0.00213 \\
\end{bmatrix}\]

\[B = \begin{bmatrix}
0 \\
\frac{1}{m} \\ 
\end{bmatrix} 
= 
\begin{bmatrix}
0 \\
\frac{1}{187.8} \\
\end{bmatrix} 
=
\begin{bmatrix}
0 \\
0.0053 \\ 
\end{bmatrix}\]

<p>Using the following code, I find the average sampling time interval is 8.10 ms,</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">interval_sum</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">length</span><span class="p">):</span>
    <span class="n">interval_sum</span> <span class="o">+=</span> <span class="n">timestamps_ms</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">timestamps_ms</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
<span class="n">interval</span> <span class="o">=</span> <span class="n">interval_sum</span> <span class="o">/</span> <span class="p">(</span><span class="n">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<p>So $\Delta t$ is set to 8.1ms</p>

<p>Descretize the matrices:
\(Ad = I + \Delta t \times A \\
Bd = \Delta t \times B\)</p>

<blockquote>
  <p>Identify your C matrix. Recall that C is a m x n matrix, where n are the dimensions in your state space, and m are the number of states you actually measure.</p>
</blockquote>

\[C = \begin{bmatrix}
-1 &amp; 0
\end{bmatrix}\]

<blockquote>
  <p>Initialize your state vector</p>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([[</span><span class="o">-</span><span class="n">distance</span><span class="p">[</span><span class="mi">0</span><span class="p">]],[</span><span class="mi">0</span><span class="p">]])</span>
</code></pre></div></div>

<blockquote>
  <p>For the Kalman Filter to work well, you will need to specify your process noise and sensor noise covariance matrices.</p>
</blockquote>

\[\Sigma_u =

\begin{bmatrix}
\sigma_1^2 &amp; 0 \\
0 &amp; \sigma_2^2 \\
\end{bmatrix}\]

<p>Position stddev after 1s: $\sqrt{10^2 · \frac{1}{0.008}} = 111.8 \space mm$</p>

<p>Speed stddev after 1s: $\sqrt{10^2 · \frac{1}{0.008}} = 111.8 \space mm/s$
\(\sigma_3^2 = (20 mm)^2\)</p>

<h2 id="3-implement-and-test-your-kalman-filter-in-jupyter-python">3. Implement and test your Kalman Filter in Jupyter (Python)</h2>

<p>Parameter settings are as follows:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">d</span> <span class="o">=</span> <span class="mf">0.4</span>
<span class="n">m</span> <span class="o">=</span> <span class="mf">187.8</span>

<span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="n">d</span><span class="o">/</span><span class="n">m</span><span class="p">]])</span>
<span class="n">B</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([[</span><span class="mi">0</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="o">/</span><span class="n">m</span><span class="p">]])</span>
<span class="n">C</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">]])</span>

<span class="n">sig1</span> <span class="o">=</span> <span class="mi">100</span>
<span class="n">sig2</span> <span class="o">=</span> <span class="mi">100</span>
<span class="n">sig3</span> <span class="o">=</span> <span class="mi">20</span>

<span class="n">Sig_u</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([[</span><span class="n">sig1</span><span class="o">**</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="n">sig2</span><span class="o">**</span><span class="mi">2</span><span class="p">]])</span>
<span class="n">Sig_z</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([[</span><span class="n">sig3</span><span class="o">**</span><span class="mi">2</span><span class="p">]])</span>

<span class="n">delta_t</span> <span class="o">=</span> <span class="mf">8.1</span>

<span class="n">Ad</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">eye</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="n">delta_t</span> <span class="o">*</span> <span class="n">A</span>
<span class="n">Bd</span> <span class="o">=</span> <span class="n">delta_t</span> <span class="o">*</span> <span class="n">B</span>
</code></pre></div></div>

<p>Kalman Filter process:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">kf</span><span class="p">(</span><span class="n">mu</span><span class="p">,</span> <span class="n">sigma</span><span class="p">,</span> <span class="n">u</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
    
    <span class="n">mu_p</span> <span class="o">=</span> <span class="n">Ad</span><span class="p">.</span><span class="nf">dot</span><span class="p">(</span><span class="n">mu</span><span class="p">)</span> <span class="o">+</span> <span class="n">Bd</span><span class="p">.</span><span class="nf">dot</span><span class="p">(</span><span class="n">u</span><span class="p">)</span> 
    <span class="n">sigma_p</span> <span class="o">=</span> <span class="n">Ad</span><span class="p">.</span><span class="nf">dot</span><span class="p">(</span><span class="n">sigma</span><span class="p">.</span><span class="nf">dot</span><span class="p">(</span><span class="n">Ad</span><span class="p">.</span><span class="nf">transpose</span><span class="p">()))</span> <span class="o">+</span> <span class="n">Sig_u</span>
    
    <span class="n">sigma_m</span> <span class="o">=</span> <span class="n">C</span><span class="p">.</span><span class="nf">dot</span><span class="p">(</span><span class="n">sigma_p</span><span class="p">.</span><span class="nf">dot</span><span class="p">(</span><span class="n">C</span><span class="p">.</span><span class="nf">transpose</span><span class="p">()))</span> <span class="o">+</span> <span class="n">Sig_z</span>
    <span class="n">kkf_gain</span> <span class="o">=</span> <span class="n">sigma_p</span><span class="p">.</span><span class="nf">dot</span><span class="p">(</span><span class="n">C</span><span class="p">.</span><span class="nf">transpose</span><span class="p">().</span><span class="nf">dot</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">linalg</span><span class="p">.</span><span class="nf">inv</span><span class="p">(</span><span class="n">sigma_m</span><span class="p">)))</span>

    <span class="n">y_m</span> <span class="o">=</span> <span class="n">y</span> <span class="o">-</span> <span class="n">C</span><span class="p">.</span><span class="nf">dot</span><span class="p">(</span><span class="n">mu_p</span><span class="p">)</span>
    <span class="n">mu</span> <span class="o">=</span> <span class="n">mu_p</span> <span class="o">+</span> <span class="n">kkf_gain</span><span class="p">.</span><span class="nf">dot</span><span class="p">(</span><span class="n">y_m</span><span class="p">)</span>    
    <span class="n">sigma</span> <span class="o">=</span> <span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">eye</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="o">-</span> <span class="n">kkf_gain</span><span class="p">.</span><span class="nf">dot</span><span class="p">(</span><span class="n">C</span><span class="p">)).</span><span class="nf">dot</span><span class="p">(</span><span class="n">sigma_p</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">mu</span><span class="p">,</span> <span class="n">sigma</span>

<span class="c1"># init position state
</span><span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([[</span><span class="o">-</span><span class="n">distances</span><span class="p">[</span><span class="mi">0</span><span class="p">]],[</span><span class="mi">0</span><span class="p">]])</span>
<span class="c1"># init guess of uncertainty
</span><span class="n">sig</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([[</span><span class="mi">5</span><span class="o">**</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="mi">5</span><span class="o">**</span><span class="mi">2</span><span class="p">]])</span>

<span class="n">kf_state</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">u</span><span class="p">,</span> <span class="n">d</span> <span class="ow">in</span> <span class="nf">zip</span><span class="p">(</span><span class="n">left_pwms</span><span class="p">,</span> <span class="n">distances</span><span class="p">):</span>
    <span class="n">x</span><span class="p">,</span> <span class="n">sig</span> <span class="o">=</span> <span class="nf">kf</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">sig</span><span class="p">,</span> <span class="p">[[</span><span class="n">u</span> <span class="o">/</span> <span class="mi">210</span><span class="p">]],</span> <span class="p">[[</span><span class="o">-</span><span class="n">d</span><span class="p">]])</span>
    <span class="n">kf_state</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</code></pre></div></div>

<p>Raw sensor reading value and kalman filter estimation:</p>

<p><img src="/FastRobots/images/Lab7/kalman-filter.png" alt="kalman-filter" style="zoom:40%;" /></p>

<p>The larger <code class="language-plaintext highlighter-rouge">sig_1</code> and <code class="language-plaintext highlighter-rouge">sig_2</code> are, the less we trust the robot model, the larger <code class="language-plaintext highlighter-rouge">sig_3</code> is, the less we trust the sensor reading. By adjusting the deviation value, we can find an appropriate way to combine the information of both snesor reading and model processing.</p>

<p>The prediction matches the sensor reading better as the standard deviation that I calculated for the robot model is large.</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Lab6</title><link href="http://localhost:4000/FastRobots/jekyll/update/2024/04/12/Lab6.html" rel="alternate" type="text/html" title="Lab6" /><published>2024-04-12T00:00:00-04:00</published><updated>2024-04-12T00:00:00-04:00</updated><id>http://localhost:4000/FastRobots/jekyll/update/2024/04/12/Lab6</id><content type="html" xml:base="http://localhost:4000/FastRobots/jekyll/update/2024/04/12/Lab6.html"><![CDATA[<h2 id="prelab">Prelab</h2>

<h3 id="1-clearly-describe-how-you-handle-sending-and-receiving-data-over-bluetooth">1. Clearly describe how you handle sending and receiving data over Bluetooth</h3>

<p>In my code, I record the state of the robot in every loop, including timestamp in millisecond, yaw angle, setpoint of yaw angle and the controller value of both side drivers.</p>

<p>During the auto running process where the robot tries to maintain the given status, the transmission over bluetooth is forbiddened to ensure the high frequency of controll loop.</p>

<p>When the controlling process is over, user can send the command “GET_HISTORY_DATA” over bluetooth which will notify the robot to send all of its history records to the laptop over bluetooth. The jupyter server running on the laptop will use a callback function to deal with the history records, then parse and store them.</p>

<p>Finally, I use matplotlib to visualize the data, which can give us a better view of the system.</p>

<h3 id="2-consider-adding-code-snippets-as-necessary-to-showcase-how-you-implemented-this-on-arduino-and-python">2. Consider adding code snippets as necessary to showcase how you implemented this on Arduino and Python</h3>

<h4 id="arduino">Arduino</h4>

<p>In the loop() function,</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="n">auto_running</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">prev_auto_running</span><span class="p">)</span> <span class="p">{</span>
      <span class="p">...</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="p">{</span>
        <span class="c1">// calculate elapsed time only when auto running</span>
        <span class="n">elapsed_ms</span> <span class="o">=</span> <span class="n">curr_ms</span> <span class="o">-</span> <span class="n">start_ms</span><span class="p">;</span>
      
        <span class="n">distance</span> <span class="o">=</span> <span class="n">readDistance</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> 
        <span class="n">gyr_z</span> <span class="o">=</span> <span class="n">readGyrZ</span><span class="p">();</span>
        <span class="n">yaw</span> <span class="o">-=</span> <span class="n">gyr_z</span> <span class="o">*</span> <span class="p">(</span><span class="n">curr_ms</span> <span class="o">-</span> <span class="n">prev_ms</span><span class="p">)</span> <span class="o">/</span> <span class="mf">1000.0</span><span class="p">;</span>
      
        <span class="c1">// keepDistanceToWall(goal_distance, distance);</span>
        <span class="n">keepYaw</span><span class="p">(</span><span class="n">goal_yaw</span><span class="p">,</span> <span class="p">(</span><span class="kt">int16_t</span><span class="p">)</span><span class="n">yaw</span><span class="p">);</span>
      
        <span class="c1">// save current record to array</span>
        <span class="n">saveCurrRecordToArray</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>I read the distance and gyroscope data in every loop when the robot is in <code class="language-plaintext highlighter-rouge">auto_running</code> state and save current record to an array.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">saveCurrRecordToArray</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">ControllerRecord</span> <span class="n">ctrl_record</span> <span class="o">=</span> <span class="n">getCtrlRecord</span><span class="p">();</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">record_ptr</span> <span class="o">&lt;</span> <span class="n">MAX_RECORDS_LEN</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">records</span><span class="p">[</span><span class="n">record_ptr</span><span class="p">].</span><span class="n">timestamp_ms</span> <span class="o">=</span> <span class="n">elapsed_ms</span><span class="p">;</span>
        <span class="n">records</span><span class="p">[</span><span class="n">record_ptr</span><span class="p">].</span><span class="n">yaw</span> <span class="o">=</span> <span class="n">yaw</span><span class="p">;</span>
        <span class="n">records</span><span class="p">[</span><span class="n">record_ptr</span><span class="p">].</span><span class="n">setpoint_yaw</span> <span class="o">=</span> <span class="n">goal_yaw</span><span class="p">;</span>
      	<span class="p">...</span>
        <span class="n">record_ptr</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In the <code class="language-plaintext highlighter-rouge">handleCommand()</code> function, I add the code to deal with <code class="language-plaintext highlighter-rouge">SEND_HISTORY_DATA</code> command.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">case</span> <span class="n">GET_HISTORY_DATA</span><span class="p">:</span> <span class="p">{</span>
    <span class="c1">// forbidden transfering history data when robot is auto running</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">auto_running</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">tx_estring_value</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">"Failed: auto running, try later"</span><span class="p">);</span>
        <span class="n">tx_characteristic_string</span><span class="p">.</span><span class="n">writeValue</span><span class="p">(</span><span class="n">tx_estring_value</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">const</span> <span class="n">Record</span> <span class="o">*</span><span class="n">records</span><span class="p">;</span>
    <span class="kt">uint16_t</span> <span class="n">records_size</span> <span class="o">=</span> <span class="n">getHistoryRecords</span><span class="p">(</span><span class="o">&amp;</span><span class="n">records</span><span class="p">);</span>
    <span class="n">tx_estring_value</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
  	<span class="p">...</span>

    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">records_size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      	<span class="c1">// send all history records</span>
        <span class="n">putARecordToTxEstring</span><span class="p">(</span><span class="n">records</span> <span class="o">+</span> <span class="n">i</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
        <span class="n">tx_characteristic_string</span><span class="p">.</span><span class="n">writeValue</span><span class="p">(</span><span class="n">tx_estring_value</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
    <span class="p">}</span>
    <span class="k">break</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="python">Python</h4>

<p><code class="language-plaintext highlighter-rouge">parse_str2data</code> is used to parse the string data into parts that contain the original data.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">parse_str2data</span><span class="p">(</span><span class="n">ss</span><span class="p">):</span>
    <span class="n">idx</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="n">ss</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">:</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">timestamp</span><span class="p">,</span> <span class="n">distance</span><span class="p">,</span> <span class="n">setpoint_distance</span><span class="p">,</span> <span class="n">yaw</span><span class="p">,</span> <span class="n">setpoint_yaw</span><span class="p">,</span> \
    	<span class="n">left_ctrl</span><span class="p">,</span> <span class="n">right_ctrl</span><span class="p">,</span> <span class="n">left_pwm</span><span class="p">,</span> <span class="n">right_pwm</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">|</span><span class="sh">'</span><span class="p">)</span>
    <span class="bp">...</span>
    <span class="n">timestamps_ms</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">timestamp</span><span class="p">))</span>
    <span class="n">distances</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">distance</span><span class="p">))</span>
    <span class="n">setpoint_yaws</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">setpoint_yaw</span><span class="p">))</span>
		<span class="bp">...</span>
    <span class="n">right_pwms</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">right_pwm</span><span class="p">))</span>
</code></pre></div></div>

<p>The above function is registered as a callback function to handle RX_STRING</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">notification_handler</span><span class="p">(</span><span class="n">uuid</span><span class="p">,</span> <span class="n">byte_array</span><span class="p">):</span>
    <span class="n">data_str</span> <span class="o">=</span> <span class="n">ble</span><span class="p">.</span><span class="nf">bytearray_to_string</span><span class="p">(</span><span class="n">byte_array</span><span class="p">)</span>
    <span class="nf">parse_str2data</span><span class="p">(</span><span class="n">data_str</span><span class="p">)</span>
<span class="n">ble</span><span class="p">.</span><span class="nf">start_notify</span><span class="p">(</span><span class="n">ble</span><span class="p">.</span><span class="n">uuid</span><span class="p">[</span><span class="sh">'</span><span class="s">RX_STRING</span><span class="sh">'</span><span class="p">],</span> <span class="n">notification_handler</span><span class="p">)</span>
</code></pre></div></div>

<p>Finally the graph is drawed</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">plot_graph</span><span class="p">():</span>
    <span class="n">timestamps_s</span> <span class="o">=</span> <span class="p">[</span><span class="n">t</span> <span class="o">/</span> <span class="mf">1000.0</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">timestamps_ms</span><span class="p">]</span>
    <span class="n">fig</span><span class="p">,</span> <span class="p">(</span><span class="n">ax1</span><span class="p">,</span> <span class="n">ax2</span><span class="p">,</span> <span class="n">ax3</span><span class="p">)</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">))</span>  
    
    <span class="n">ax1</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">timestamps_s</span><span class="p">,</span> <span class="n">setpoint_yaws</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">Setpoints</span><span class="sh">'</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">red</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">ax1</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">Setpoints Over Time</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">ax1</span><span class="p">.</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Setpoints</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">ax1</span><span class="p">.</span><span class="nf">legend</span><span class="p">()</span>
    
    <span class="n">ax2</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">timestamps_s</span><span class="p">,</span> <span class="n">yaws</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">Yaws</span><span class="sh">'</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">blue</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">ax2</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">Yaws Over Time</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">ax2</span><span class="p">.</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Yaws</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">ax2</span><span class="p">.</span><span class="nf">legend</span><span class="p">()</span>
    
    <span class="n">ax3</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">timestamps_s</span><span class="p">,</span> <span class="n">right_controls</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">Controls</span><span class="sh">'</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">green</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">ax3</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">Right Controls Over Time</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">ax3</span><span class="p">.</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Right Controls</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">ax3</span><span class="p">.</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Time</span><span class="sh">'</span><span class="p">)</span> 
    <span class="n">ax3</span><span class="p">.</span><span class="nf">legend</span><span class="p">()</span>
    
    <span class="n">plt</span><span class="p">.</span><span class="nf">tight_layout</span><span class="p">()</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="lab-tasks">Lab Tasks</h2>

<h3 id="1-pid-discussion-kpkikd-values-chosen-why-you-chose-a-combination-of-controllers-etc">1. P/I/D discussion (Kp/Ki/Kd values chosen, why you chose a combination of controllers, etc.)</h3>

<p>I use PID controller, the parameters are set as follows:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">PIDParam</span> <span class="n">angle_param</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">.</span><span class="n">Kp</span> <span class="o">=</span> <span class="mi">35</span><span class="p">,</span>
    <span class="p">.</span><span class="n">Ki</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
    <span class="p">.</span><span class="n">Kd</span> <span class="o">=</span> <span class="mi">15</span>
<span class="p">};</span>

<span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int16_t</span><span class="p">,</span> <span class="kt">int16_t</span><span class="o">&gt;</span> <span class="n">angle_pid</span><span class="p">(</span><span class="kt">int16_t</span> <span class="n">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int16_t</span> <span class="n">control</span> <span class="o">=</span> <span class="n">angle_param</span><span class="p">.</span><span class="n">Kp</span> <span class="o">*</span> <span class="n">error</span> 
        <span class="o">+</span> <span class="n">angle_param</span><span class="p">.</span><span class="n">Kd</span> <span class="o">*</span> <span class="p">(</span><span class="n">error</span> <span class="o">-</span> <span class="n">angle_var</span><span class="p">.</span><span class="n">prev_error</span><span class="p">)</span>
      	<span class="o">+</span> <span class="n">angle_param</span><span class="p">.</span><span class="n">Ki</span> <span class="o">*</span> <span class="n">angle_var</span><span class="p">.</span><span class="n">integral</span><span class="p">;</span>
    <span class="c1">// constrain the control value within limitation</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">control</span> <span class="o">&gt;=</span> <span class="n">MAX_CONTROL</span><span class="p">)</span> <span class="n">control</span> <span class="o">=</span> <span class="n">MAX_CONTROL</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">control</span> <span class="o">&lt;=</span> <span class="n">MIN_CONTROL</span><span class="p">)</span> <span class="n">control</span> <span class="o">=</span> <span class="n">MIN_CONTROL</span><span class="p">;</span>
    <span class="n">angle_var</span><span class="p">.</span><span class="n">prev_error</span> <span class="o">=</span> <span class="n">error</span><span class="p">;</span>
  	<span class="n">angle_var</span><span class="p">.</span><span class="n">integral</span> <span class="o">+=</span> <span class="n">error</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">make_pair</span><span class="p">(</span><span class="o">-</span><span class="n">control</span><span class="p">,</span> <span class="n">control</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">Kp</code> ensures that the robot always return to the original direction when pushed away</p>

<p><code class="language-plaintext highlighter-rouge">Kd</code> prevents overshoot</p>

<p><code class="language-plaintext highlighter-rouge">Ki</code> eliminate the cumulative error</p>

<h3 id="2-rangesampling-time-discussion">2. Range/Sampling time discussion</h3>

<p>The robot returns an array of history data that has size 842 over 12 seconds:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ble</span><span class="p">.</span><span class="nf">send_command</span><span class="p">(</span><span class="n">CMD</span><span class="p">.</span><span class="n">GET_HISTORY_DATA</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
<span class="sh">"""</span><span class="s"> 
Size of records array: 842
</span><span class="sh">"""</span>
</code></pre></div></div>

<p>so the approximate sampling rate is 842/12s = 70Hz</p>

<h3 id="3-graphs-code-videos-images-discussion-of-reaching-task-goal">3. Graphs, code, videos, images, discussion of reaching task goal</h3>

<h4 id="graphs">Graphs</h4>

<p><img src="/FastRobots/images/Lab6/3plots.png" alt="3plots" style="zoom:50%;" /></p>

<h4 id="videos">Videos</h4>

<iframe width="325" height="578" src="https://www.youtube.com/embed/DxC1AkijgFg" title="Robot keep the original direction when pushed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>

<p>and this,</p>

<iframe width="325" height="578" src="https://www.youtube.com/embed/Pz_mTgWw-7Y" title="Change set point of yaws of robot" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>

<h3 id="4-5000-wind-up-implementation-and-discussion">4. (5000) Wind-up implementation and discussion</h3>

<p>There is a limit set for <code class="language-plaintext highlighter-rouge">angle_var.integral</code> so that it will not go extremely high and increase the oscillation.</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Prelab]]></summary></entry><entry><title type="html">Lab5</title><link href="http://localhost:4000/FastRobots/jekyll/update/2024/03/13/Lab5.html" rel="alternate" type="text/html" title="Lab5" /><published>2024-03-13T00:00:00-04:00</published><updated>2024-03-13T00:00:00-04:00</updated><id>http://localhost:4000/FastRobots/jekyll/update/2024/03/13/Lab5</id><content type="html" xml:base="http://localhost:4000/FastRobots/jekyll/update/2024/03/13/Lab5.html"><![CDATA[<p>Sensor range: 0 ~ 4000mm</p>

<p>Set point: 304 mm</p>

<p>control variable range?: -1000 ~ +1000</p>

<p>map: -1000 ~ 0 -&gt; -255 ~ -20</p>

<p>When blocking = false, all test result are 2ms</p>

<p>So all the tests below are blocking = true by default</p>

<h3 id="distance-mode-long">Distance Mode: Long</h3>

<p>**Continous time interval: 50 **</p>

<ul>
  <li>92 ms (92, 93, 92, 92, 93)</li>
</ul>

<p><strong>Continous time interval: 100</strong></p>

<ul>
  <li>92ms (92, 93, 92, 93, 92)</li>
</ul>

<h3 id="distance-mode-medium">Distance Mode: Medium</h3>

<p><strong>Continous time interval: 33</strong></p>

<ul>
  <li>61ms (61, 61, 61, 61, 61)</li>
</ul>

<p><strong>Continous time interval: 100</strong></p>

<ul>
  <li>92ms (93, 92, 93)</li>
</ul>

<p><strong>Continous time interval: 200</strong></p>

<ul>
  <li>185ms (185, 184, 185)</li>
</ul>

<h3 id="distance-mode-short">Distance Mode: Short</h3>

<p><strong>Continous time interval: 20</strong></p>

<ul>
  <li>37ms (37, 37, 37)</li>
</ul>

<p><strong>Continous time interval: 100</strong></p>

<ul>
  <li>92ms (94, 92, 92)</li>
</ul>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Sensor range: 0 ~ 4000mm]]></summary></entry><entry><title type="html">Lab4</title><link href="http://localhost:4000/FastRobots/jekyll/update/2024/03/05/Lab4.html" rel="alternate" type="text/html" title="Lab4" /><published>2024-03-05T00:00:00-05:00</published><updated>2024-03-05T00:00:00-05:00</updated><id>http://localhost:4000/FastRobots/jekyll/update/2024/03/05/Lab4</id><content type="html" xml:base="http://localhost:4000/FastRobots/jekyll/update/2024/03/05/Lab4.html"><![CDATA[<h2 id="prelab">Prelab</h2>

<h3 id="1-diagram-with-your-intended-connections-between-the-motor-drivers-artemis-and-battery-with-specific-pin-numbers">1. Diagram with your intended connections between the motor drivers, Artemis, and battery (with specific pin numbers)</h3>

<p><img src="/FastRobots/images/Lab4/wire.jpg" alt="wire" /></p>

<h3 id="2-battery-discussion">2. Battery discussion</h3>

<p>We use seperate batteries to power artemis and the motors in order to reduce EMI between controller and actuator.</p>

<h2 id="lab-tasks">Lab Tasks</h2>

<h3 id="1-picture-of-your-setup-with-power-supply-and-oscilloscope-hookup">1. Picture of your setup with power supply and oscilloscope hookup</h3>

<p>Picture of power supply:</p>

<p><img src="/FastRobots/images/Lab4/dc.jpg" alt="dc" style="zoom:33%;" /></p>

<p>Oscilloscope hookup:</p>

<p><img src="/FastRobots/images/Lab4/spin.jpg" alt="spin" style="zoom:33%;" /></p>

<h3 id="2-power-supply-setting-discussion">2. Power supply setting discussion</h3>

<p>I use the voltage generator to ouput 3.7V DC power supply to the motor drivers, in order to keep the same as batteries.</p>

<h3 id="3-include-the-code-snippet-for-your-analogwrite-code-that-tests-the-motor-drivers">3. Include the code snippet for your analogWrite code that tests the motor drivers</h3>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// go straight</span>
  <span class="n">analogWrite</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
  <span class="n">analogWrite</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="mi">35</span><span class="p">);</span>

  <span class="n">analogWrite</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
  <span class="n">analogWrite</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">60</span><span class="p">);</span>
  <span class="n">delay</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="4-image-of-your-oscilloscope">4. Image of your oscilloscope</h3>

<p><img src="/FastRobots/images/Lab4/osci.jpg" alt="osci" /></p>

<p>video when adjusting pwm output:</p>

<iframe width="467" height="830" src="https://www.youtube.com/embed/WrhX-cahByo" title="Fast robot lab4 - adjust pwm output" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe>

<h3 id="5-short-video-of-wheels-spinning-as-expected-including-code-snippet-its-running-on">5. Short video of wheels spinning as expected (including code snippet it’s running on)</h3>

<iframe width="560" height="315" src="https://www.youtube.com/embed/fkLowDbxA-E?si=F_uwzXzWtdyvDwg-" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe>

<h3 id="6-short-video-of-both-wheels-spinning-with-battery-driving-the-motor-drivers">6. Short video of both wheels spinning (with battery driving the motor drivers)</h3>

<iframe width="467" height="830" src="https://www.youtube.com/embed/CKZCbataMDc" title="Fast robot lab4 - power on battery" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe>

<h3 id="7-picture-of-all-the-components-secured-in-the-car">7. Picture of all the components secured in the car</h3>

<p><img src="/FastRobots/images/Lab4/comp.jpg" alt="comp" style="zoom:50%;" /></p>

<h3 id="8-lower-limit-pwm-value-discussion">8. Lower limit PWM value discussion</h3>

<p>The lowest pwm value for left wheels is 50;</p>

<p>The lowest pwm avalue for right wheels is 28.</p>

<h3 id="9-calibration-demonstration-discussion-video-code-pictures-as-needed">9. Calibration demonstration (discussion, video, code, pictures as needed)</h3>

<p>I use the code below to calibrate the original output (ranging from 0 ~ 1000) to the new output for pwm (ranging from 0 ~ 255)</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">ctrl_pwm_map</span><span class="p">(</span><span class="kt">int</span> <span class="n">control</span><span class="p">,</span> <span class="kt">int</span> <span class="n">ctrl_min</span><span class="p">,</span> <span class="kt">int</span> <span class="n">ctrl_max</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pwm_min</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pwm_max</span><span class="p">)</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">pwm</span> <span class="o">=</span> <span class="p">(</span><span class="n">control</span> <span class="o">-</span> <span class="n">ctrl_min</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">pwm_max</span> <span class="o">-</span> <span class="n">pwm_min</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="n">ctrl_max</span> <span class="o">-</span> <span class="n">ctrl_min</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwm_min</span><span class="p">;</span>
  <span class="k">return</span> <span class="n">pwm</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">left_pwm</span> <span class="o">=</span> <span class="n">ctrl_pwm_map</span><span class="p">(</span><span class="n">control</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1000</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">255</span><span class="p">);</span>
<span class="n">right_pwm</span> <span class="o">=</span> <span class="n">ctrl_pwm_map</span><span class="p">(</span><span class="n">control</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1000</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">255</span><span class="p">);</span>
</code></pre></div></div>

<h3 id="10-open-loop-code-and-video">10. Open loop code and video</h3>

<iframe width="467" height="830" src="https://www.youtube.com/embed/shiN0Y1AhcQ" title="Fast robot lab4 - car go straight" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe>

<h3 id="11-5000-analogwrite-frequency-discussion-include-screenshots-and-code">11. (5000) analogWrite frequency discussion (include screenshots and code)</h3>

<p>The frequency of analogWrite is fast enough for the motors.</p>

<p>Manually configuring timers to generate a faster PWM signal can:</p>

<ol>
  <li>spare more resource for CPU to carray out other time consuming tasks</li>
  <li>increase the control accuracy for motors</li>
</ol>

<h3 id="12-5000-lowest-pwm-value-speed-once-in-motion-discussion-include-videos-where-appropriate">12. (5000) Lowest PWM value speed (once in motion) discussion (include videos where appropriate)</h3>

<table>
  <thead>
    <tr>
      <th>Condition</th>
      <th>Left Motor</th>
      <th>Right Motor</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>start from rest</td>
      <td>50</td>
      <td>28</td>
    </tr>
    <tr>
      <td>move when running</td>
      <td>45</td>
      <td>24</td>
    </tr>
  </tbody>
</table>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Prelab]]></summary></entry><entry><title type="html">Lab3</title><link href="http://localhost:4000/FastRobots/jekyll/update/2024/02/21/Lab3.html" rel="alternate" type="text/html" title="Lab3" /><published>2024-02-21T00:00:00-05:00</published><updated>2024-02-21T00:00:00-05:00</updated><id>http://localhost:4000/FastRobots/jekyll/update/2024/02/21/Lab3</id><content type="html" xml:base="http://localhost:4000/FastRobots/jekyll/update/2024/02/21/Lab3.html"><![CDATA[<h1 id="lab3">Lab3</h1>

<h2 id="prelab">Prelab</h2>

<h3 id="1-note-the-i2c-sensor-address">1. Note the I2C sensor address</h3>

<p><img src="../images/Lab3/i2c addr of ToF sensor.png" alt="i2c addr of ToF sensor" style="zoom:50%;" /></p>

<p>The I2C sensor address if 0x29</p>

<h3 id="2-briefly-discuss-the-approach-to-using-2-tof-sensors">2. <strong>Briefly</strong> discuss the approach to using 2 ToF sensors</h3>

<h3 id="3-briefly-discuss-placement-of-sensors-on-robot-and-scenarios-where-you-will-miss-obstacles">3. <strong>Briefly</strong> discuss placement of sensors on robot and scenarios where you will miss obstacles</h3>

<h3 id="4-sketch-of-wiring-diagram">4. Sketch of wiring diagram</h3>

<h2 id="lab-tasks">Lab Tasks</h2>

<h3 id="1-picture-of-your-tof-sensor-connected-to-your-qwiic-breakout-board">1. Picture of your ToF sensor connected to your QWIIC breakout board</h3>

<h3 id="2-screenshot-of-artemis-scanning-for-i2c-device-and-discussion-on-i2c-address">2. Screenshot of Artemis scanning for I2C device (and discussion on I2C address)</h3>

<h3 id="3-discussion-and-pictures-of-sensor-data-with-chosen-mode">3. Discussion and pictures of sensor data with chosen mode</h3>

<h3 id="4-2-tof-sensors-discussion-and-screenshot-of-sensors-working-in-parallel">4. 2 ToF sensors: Discussion and screenshot of sensors working in parallel</h3>

<h3 id="5-tof-sensor-speed-discussion-on-speed-and-limiting-factor-include-code-snippet-of-how-you-do-this">5. Tof sensor speed: Discussion on speed and limiting factor; include code snippet of how you do this</h3>

<h3 id="6-time-v-distance-include-graph-of-data-sent-over-bluetooth-2-sensors">6. Time v Distance: Include graph of data sent over bluetooth (2 sensors)</h3>

<h3 id="7-5000-discussion-on-infrared-transmission-based-sensors">7. (5000) Discussion on infrared transmission based sensors</h3>

<h3 id="8-5000-sensitivity-of-sensors-to-colors-and-textures">8. (5000) Sensitivity of sensors to colors and textures</h3>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Lab3]]></summary></entry><entry><title type="html">Lab2</title><link href="http://localhost:4000/FastRobots/jekyll/update/2024/02/20/Lab2.html" rel="alternate" type="text/html" title="Lab2" /><published>2024-02-20T23:46:21-05:00</published><updated>2024-02-20T23:46:21-05:00</updated><id>http://localhost:4000/FastRobots/jekyll/update/2024/02/20/Lab2</id><content type="html" xml:base="http://localhost:4000/FastRobots/jekyll/update/2024/02/20/Lab2.html"><![CDATA[<h1 id="lab-2">Lab 2</h1>

<h2 id="setup-the-imu">Setup the IMU</h2>

<h3 id="1-picture-of-your-artemis-imu-connections">1. Picture of your Artemis IMU connections</h3>

<p><img src="/FastRobots/images/Lab2/imu connection.jpg" alt="imu connection" style="zoom: 15%;" /></p>

<h3 id="2-show-that-the-imu-example-code-works">2. Show that the IMU example code works</h3>

<p>I add the LED blink when Artemis power on.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span>
<span class="p">{</span>
  <span class="c1">// Blink the LED 3 times slowly on start up</span>
  <span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">while</span> <span class="p">(</span><span class="n">cnt</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">digitalWrite</span><span class="p">(</span><span class="n">LED_BUILTIN</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>  
    <span class="n">delay</span><span class="p">(</span><span class="mi">800</span><span class="p">);</span>
    <span class="n">digitalWrite</span><span class="p">(</span><span class="n">LED_BUILTIN</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>  
    <span class="n">delay</span><span class="p">(</span><span class="mi">800</span><span class="p">);</span>
    <span class="n">cnt</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="p">...</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="3-ad0_val-definition-discussion">3. AD0_VAL definition discussion</h3>

<p>According to the description in the <code class="language-plaintext highlighter-rouge">IMU_Example.ino</code> : “On the SparkFun 9DoF IMU breakout the default is 1, and when the ADR jumper is closed the value becomes 0”. However, we can’t read the data from IMU when <code class="language-plaintext highlighter-rouge">AD0_VAL</code> is set to the default value 1, which throws the message:</p>

<p><img src="/FastRobots/images/Lab2/data underflow.png" alt="data underflow" style="zoom:50%;" /></p>

<p>When modified that value to 0, the data from IMU can now be read normally.</p>

<h3 id="4-acceleration-and-gyroscope-data-discussion">4. Acceleration and gyroscope data discussion</h3>

<p>The gyroscope data is close to zero when holding still. Gyro data for a given axis increases when rotating around the axis.</p>

<h2 id="accelerometer">Accelerometer</h2>

<h3 id="1-image-of-output-at--90-0-90-degrees-for-pitch-and-roll-include-equations">1. Image of output at {-90, 0, 90} degrees for pitch and roll (include equations)</h3>

<p>I add two functions:</p>

<p><code class="language-plaintext highlighter-rouge">convert2Attitude</code> converts the raw accelerometer data  to pitch and roll angle.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">convert2Attitude</span><span class="p">(</span><span class="n">ICM_20948_I2C</span> <span class="o">*</span><span class="n">sensor</span><span class="p">,</span> <span class="n">Attitude</span><span class="o">*</span> <span class="n">att</span><span class="p">)</span> <span class="p">{</span>
  <span class="kt">float</span> <span class="n">pitch_rad</span> <span class="o">=</span> <span class="n">atan2</span><span class="p">(</span><span class="n">sensor</span><span class="o">-&gt;</span><span class="n">accX</span><span class="p">(),</span> <span class="o">-</span><span class="n">sensor</span><span class="o">-&gt;</span><span class="n">accZ</span><span class="p">());</span>
  <span class="kt">float</span> <span class="n">roll_rad</span> <span class="o">=</span> <span class="n">atan2</span><span class="p">(</span><span class="n">sensor</span><span class="o">-&gt;</span><span class="n">accY</span><span class="p">(),</span> <span class="o">-</span><span class="n">sensor</span><span class="o">-&gt;</span><span class="n">accZ</span><span class="p">());</span>
  <span class="n">att</span><span class="o">-&gt;</span><span class="n">pitch</span> <span class="o">=</span> <span class="n">pitch_rad</span> <span class="o">*</span> <span class="mi">180</span><span class="p">.</span><span class="mi">0</span> <span class="o">/</span> <span class="n">M_PI</span><span class="p">;</span>
  <span class="n">att</span><span class="o">-&gt;</span><span class="n">roll</span> <span class="o">=</span> <span class="n">roll_rad</span> <span class="o">*</span> <span class="mi">180</span><span class="p">.</span><span class="mi">0</span> <span class="o">/</span> <span class="n">M_PI</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">printAttitude</code> prints formatted attitude values.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">printAttitude</span><span class="p">(</span><span class="n">Attitude</span> <span class="o">*</span><span class="n">att</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">SERIAL_PORT</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">"Pitch [ "</span><span class="p">);</span>
  <span class="n">printFormattedFloat</span><span class="p">(</span><span class="n">att</span><span class="o">-&gt;</span><span class="n">pitch</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
  <span class="n">SERIAL_PORT</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">" ], Roll [ "</span><span class="p">);</span>
  <span class="n">printFormattedFloat</span><span class="p">(</span><span class="n">att</span><span class="o">-&gt;</span><span class="n">roll</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
  <span class="n">SERIAL_PORT</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">" ]"</span><span class="p">);</span>
  <span class="n">SERIAL_PORT</span><span class="p">.</span><span class="n">println</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>0 degree pitch &amp; roll</li>
</ul>

<p><img src="/FastRobots/images/Lab2/0 pitch and roll.png" alt="0 pitch and roll" style="zoom:50%;" /></p>

<ul>
  <li>90 degrees pitch</li>
</ul>

<p><img src="/FastRobots/images/Lab2/pitch 90.png" alt="pitch 90" style="zoom:50%;" /></p>

<ul>
  <li>-90 degrees pitch</li>
</ul>

<p><img src="/FastRobots/images/Lab2/pitch -90.png" alt="pitch -90" style="zoom:50%;" /></p>

<ul>
  <li>90 degrees roll</li>
</ul>

<p><img src="/FastRobots/images/Lab2/roll 90.png" alt="roll 90" style="zoom:50%;" /></p>

<ul>
  <li>-90 degrees roll</li>
</ul>

<p><img src="/FastRobots/images/Lab2/roll -90.png" alt="roll -90" style="zoom:50%;" /></p>

<h3 id="2-accelerometer-accuracy-discussion">2. Accelerometer accuracy discussion</h3>

<p>The pitch and roll data calculated by accelerometer data has large noise, it vibrates a lot even when the IMU is hold still.</p>

<p><img src="/FastRobots/images/Lab2/serial plot for accel.png" alt="serial plot for accel" style="zoom: 33%;" /></p>

<h3 id="3-noise-in-the-frequency-spectrum-analysis">3. Noise in the frequency spectrum analysis</h3>

<h4 id="a-include-graphs-for-your-fourier-transform">(a) Include graphs for your fourier transform</h4>

<p><img src="/FastRobots/images/Lab2/pitch roll fft.png" alt="pitch roll fft" style="zoom: 45%;" /></p>

<h4 id="b-discuss-the-results">(b) Discuss the results</h4>

<p>There exists a lot of high frequency noise in the accelerometer data. However, we can only operate the car in a relatively low frequency, for example, no more than 10Hz. So a low pass filter is needed.</p>

<h2 id="gyroscope">Gyroscope</h2>

<h3 id="1-include-documentation-for-pitch-roll-and-yaw-with-images-of-the-results-of-different-imu-positions">1. Include documentation for pitch, roll, and yaw with images of the results of different IMU positions</h3>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">myICM</span><span class="p">.</span><span class="n">dataReady</span><span class="p">())</span>
    <span class="p">{</span>
        <span class="n">prev_time</span> <span class="o">=</span> <span class="n">curr_time</span><span class="p">;</span>
        <span class="n">curr_time</span> <span class="o">=</span> <span class="n">millis</span><span class="p">();</span>

        <span class="p">...</span>

        <span class="kt">float</span> <span class="n">gyr_x</span> <span class="o">=</span> <span class="n">myICM</span><span class="p">.</span><span class="n">gyrX</span><span class="p">();</span>
        <span class="n">att</span><span class="p">.</span><span class="n">roll</span> <span class="o">-=</span> <span class="n">gyr_x</span> <span class="o">*</span> <span class="p">(</span><span class="n">curr_time</span> <span class="o">-</span> <span class="n">prev_time</span><span class="p">)</span> <span class="o">/</span> <span class="mi">1000</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>
        <span class="kt">float</span> <span class="n">gyr_y</span> <span class="o">=</span> <span class="n">myICM</span><span class="p">.</span><span class="n">gyrY</span><span class="p">();</span>
        <span class="n">att</span><span class="p">.</span><span class="n">pitch</span> <span class="o">-=</span> <span class="n">gyr_y</span> <span class="o">*</span> <span class="p">(</span><span class="n">curr_time</span> <span class="o">-</span> <span class="n">prev_time</span><span class="p">)</span> <span class="o">/</span> <span class="mi">1000</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>
        <span class="kt">float</span> <span class="n">gyr_z</span> <span class="o">=</span> <span class="n">myICM</span><span class="p">.</span><span class="n">gyrZ</span><span class="p">();</span>
        <span class="n">att</span><span class="p">.</span><span class="n">yaw</span> <span class="o">-=</span> <span class="n">gyr_z</span> <span class="o">*</span> <span class="p">(</span><span class="n">curr_time</span> <span class="o">-</span> <span class="n">prev_time</span><span class="p">)</span> <span class="o">/</span> <span class="mi">1000</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>

        <span class="n">printAttitude</span><span class="p">(</span><span class="o">&amp;</span><span class="n">att</span><span class="p">);</span>

    <span class="p">}</span>
    <span class="p">...</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The serial plotter shows the curve of the angular data calculated by gyroscope.</p>

<p><img src="/FastRobots/images/Lab2/seiral plot for gyro.png" alt="seiral plot for gyro" style="zoom: 33%;" /></p>

<p>The angular data calculated by gyroscope has less noise but will drift over time.</p>

<h3 id="2-demonstrate-the-accuracy-and-range-of-the-complementary-filter-and-discuss-any-design-choices">2. Demonstrate the accuracy and range of the complementary filter, and discuss any design choices</h3>

<p><img src="/FastRobots/images/Lab2/serial compl.png" alt="serial compl" style="zoom: 33%;" /></p>

<p>Complementary filter has less noise than pure accelerometer data, and will not drift over time like pure gyroscope data.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">att</span><span class="p">.</span><span class="n">roll</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">alpha</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">att</span><span class="p">.</span><span class="n">roll</span> <span class="o">+</span> <span class="n">gyr_x</span> <span class="o">*</span> <span class="n">dt</span><span class="p">)</span> <span class="o">+</span> <span class="n">alpha</span> <span class="o">*</span> <span class="n">acc_x</span><span class="p">;</span>
<span class="n">att</span><span class="p">.</span><span class="n">pitch</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">alpha</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">att</span><span class="p">.</span><span class="n">pitch</span> <span class="o">+</span> <span class="n">gyr_y</span> <span class="o">*</span> <span class="n">dt</span><span class="p">)</span> <span class="o">+</span> <span class="n">alpha</span> <span class="o">*</span> <span class="n">acc_y</span><span class="p">;</span>
<span class="n">att</span><span class="p">.</span><span class="n">yaw</span> <span class="o">=</span> <span class="n">att</span><span class="p">.</span><span class="n">yaw</span> <span class="o">+</span> <span class="n">gyr_z</span><span class="p">;</span>
</code></pre></div></div>

<p>I choose the parameter alpha in complementary filter to be 0.01;</p>

<h2 id="sample-data">Sample Data</h2>

<h3 id="1-speed-of-sampling-discussion">1. Speed of sampling discussion</h3>

<p>By removing all the delay() and Serial.print() statements in the code, the code can run at about 250Hz. By storing time stamp and sensor data in a buffer, the code can run even faster, at a frequency of 330Hz.</p>

<p>This rapid sampling rate can lead to an accumulation of data within a short period of time. The data was organized as string arrays and transmitted to Jupyter through bluetooth.</p>

<h3 id="2-demonstrate-collected-and-stored-time-stamped-imu-data-in-arrays">2. Demonstrate collected and stored time-stamped IMU data in arrays</h3>

<p>The data stored in Arduino in this form, with buffer size 2000;</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">Attitude</span> <span class="p">{</span>
  <span class="kt">float</span> <span class="n">roll</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="kt">float</span> <span class="n">pitch</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="kt">float</span> <span class="n">yaw</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">};</span>

<span class="n">Attitude</span> <span class="n">att</span><span class="p">;</span>

<span class="k">const</span> <span class="kt">int</span> <span class="n">buffer_size</span> <span class="o">=</span> <span class="mi">2000</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">end_pt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">time_stamps</span><span class="p">[</span><span class="n">buffer_size</span><span class="p">];</span>
<span class="n">Attitude</span> <span class="n">atts</span><span class="p">[</span><span class="n">buffer_size</span><span class="p">];</span>
</code></pre></div></div>

<p>The data stored in Jupyter has this form:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">parse_to_time_data</span><span class="p">(</span><span class="n">ss</span><span class="p">):</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">ss</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">|</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">time_ms</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="n">roll</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
    <span class="n">pitch</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
    <span class="n">yaw</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
    <span class="n">time_stamps</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">time_ms</span><span class="p">)</span>
    <span class="n">roll_arr</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">roll</span><span class="p">)</span>
    <span class="n">pitch_arr</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">pitch</span><span class="p">)</span>
    <span class="n">yaw_arr</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">yaw</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="3-demonstrate-5s-of-imu-data-sent-over-bluetooth">3. Demonstrate 5s of IMU data sent over Bluetooth</h3>

<p>Each IMU data frame haws 3 float variable and 1 int variable, which takes 14B space, the sample rate was set to about 300Hz, which takes 4.2KB/s. The Artemis has 384KB of RAM, so there is enough space for 5s of IMU data to be transmitted through Bluetooth.</p>

<p><img src="/FastRobots/images/Lab2/ble-ts-data.png" alt="ble-ts-data" style="zoom:50%;" /></p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Lab 2]]></summary></entry><entry><title type="html">Lab1</title><link href="http://localhost:4000/FastRobots/jekyll/update/2024/01/26/Lab1.html" rel="alternate" type="text/html" title="Lab1" /><published>2024-01-26T23:46:21-05:00</published><updated>2024-01-26T23:46:21-05:00</updated><id>http://localhost:4000/FastRobots/jekyll/update/2024/01/26/Lab1</id><content type="html" xml:base="http://localhost:4000/FastRobots/jekyll/update/2024/01/26/Lab1.html"><![CDATA[<h2 id="prelab">Prelab</h2>

<blockquote>
  <p>Setup: Briefly describe the steps taken to set up your computer for Lab 2, showing any results (i.e. MAC address printing)</p>
</blockquote>

<p>In the serial monitor of Arduino, MAC address of the bluetooth device is printed:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Advertising BLE with MAC: c0:89:f0:6b:6:4b
</code></pre></div></div>

<p>In the <code class="language-plaintext highlighter-rouge">connection.yaml</code> file of the jupyter notebook, I set the MAC address of the target bluetooth device as following:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>artemis_address: 'C0:89:F0:6B:06:4B'
</code></pre></div></div>

<p>The uuid of the bluetooth is also reset with the newly generated one.</p>

<p><img src="/FastRobots/images/Lab1/generate-uuid.png" alt="uuid" /></p>

<blockquote>
  <p>Codebase: Add a brief explanation of your understanding of the codebase and how Bluetooth works between your computer and the Artemis</p>
</blockquote>

<p>The codebase scans all nearby devices and pair to the exact atemis board with the unique uuid that I generated.</p>

<p>Some of the connection process varies by the different operating systems that users may have on their computer.</p>

<p>Then all common functions are provided through the class <code class="language-plaintext highlighter-rouge">ArtemisBLEController</code>, which supports reading and writing data to the ble, and creates a notifier and callback function to process the data received by itself.</p>

<h2 id="tasks">Tasks</h2>

<h3 id="11">1.1</h3>

<blockquote>
  <p>Hook the Artemis board up to your computer, and follow the instructions from bulletpoint 2 above (“Introduction” and “Arduino Installation”).</p>
</blockquote>

<p>Required libraries are downloaded successfully.</p>

<h3 id="12">1.2</h3>

<blockquote>
  <p>From the setup instructions linked above, follow the instructions in “Example: Blink it Up”.</p>
</blockquote>

<p><img src="/FastRobots/images/Lab1/upload.png" alt="upload" /></p>

<h3 id="13">1.3</h3>

<blockquote>
  <p>In File-&gt;Examples-&gt;Artemis Examples, run Example4_Serial. (Note: to view the output and provide input open the serial monitor in the upper right hand corner of the script window.)</p>
</blockquote>

<p><img src="/FastRobots/images/Lab1/serial-echo.png" alt="serial-echo" /></p>

<h3 id="14">1.4</h3>

<blockquote>
  <p>In File-&gt;Examples-&gt;Artemis Examples, run Example2_analogRead to test your temperature sensor. Try blowing on or touching the chip to change its temperature. It may take a while to transfer your heat.</p>
</blockquote>

<p><img src="/FastRobots/images/Lab1/tmp-read.png" alt="tmp-read" /></p>

<h3 id="15">1.5</h3>

<blockquote>
  <p>In File-&gt;Examples-&gt;PDM, run Example1_MicrophoneOutput to test your microphone. E.g. try whistling or speaking to change the highest frequency.</p>
</blockquote>

<p><img src="/FastRobots/images/Lab1/microphone.png" alt="microphone" /></p>

<h3 id="21">2.1</h3>

<blockquote>
  <p>Send an <em>ECHO</em> command with a string value from the computer to the Artemis board, and receive an augmented string on the computer.</p>
</blockquote>

<p>The arduino side:</p>

<p><img src="/FastRobots/images/Lab1/task1-arduino.png" alt="task1-arduino" /></p>

<p>The jupyter notebook side:</p>

<p><img src="/FastRobots/images/Lab1/task1-jupyter.png" alt="task1-jupyter" /></p>

<h3 id="22">2.2</h3>

<blockquote>
  <p>Add a command GET_TIME_MILLIS which makes the robot reply write a string such as “T:123456” to the string characteristic.</p>
</blockquote>

<p>In the arduino side:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">case</span> <span class="n">GET_TIME_MILLIS</span><span class="p">:</span> <span class="p">{</span>
    <span class="k">const</span> <span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="n">millis</span><span class="p">();</span>
    <span class="n">tx_estring_value</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
    <span class="n">tx_estring_value</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">"T: "</span><span class="p">);</span>
    <span class="n">tx_estring_value</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">t</span><span class="p">);</span>
    <span class="n">tx_characteristic_string</span><span class="p">.</span><span class="n">writeValue</span><span class="p">(</span><span class="n">tx_estring_value</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
    <span class="k">break</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The jupyter side:</p>

<p><img src="/FastRobots/images/Lab1/task2-get-ms.png" alt="task2-get-ms" /></p>

<h3 id="23">2.3</h3>

<blockquote>
  <p>Setup a notification handler in Python to receive the string value (the <strong>BLEStringCharactersitic</strong> in Arduino) from the Artemis board. In the callback function, extract the time from the string.</p>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">notification_handler</span><span class="p">(</span><span class="n">uuid</span><span class="p">,</span> <span class="n">byte_array</span><span class="p">):</span>
    <span class="n">time_ms_str</span> <span class="o">=</span> <span class="n">ble</span><span class="p">.</span><span class="nf">bytearray_to_string</span><span class="p">(</span><span class="n">byte_array</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">time_ms_str</span><span class="p">)</span>
    
<span class="n">ble</span><span class="p">.</span><span class="nf">start_notify</span><span class="p">(</span><span class="n">ble</span><span class="p">.</span><span class="n">uuid</span><span class="p">[</span><span class="sh">'</span><span class="s">RX_STRING</span><span class="sh">'</span><span class="p">],</span> <span class="n">notification_handler</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="24">2.4</h3>

<blockquote>
  <p>Write a loop that gets the current time in milliseconds and sends it to your laptop to be received and processed by the notification handler. Collect these values for a few seconds and use the time stamps to determine how fast messages can be sent. What is the effective data transfer rate of this method?</p>
</blockquote>

<p>In the arduino side, send current time in millisecond form in the write_data() function.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">write_data</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">currentMillis</span> <span class="o">=</span> <span class="n">millis</span><span class="p">();</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">currentMillis</span> <span class="o">-</span> <span class="n">previousMillis</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
      
        <span class="n">tx_estring_value</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
        <span class="n">tx_estring_value</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">"T: "</span><span class="p">);</span>
        <span class="n">tx_estring_value</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="k">const</span> <span class="kt">int</span><span class="p">)</span><span class="n">currentMillis</span><span class="p">);</span>
        <span class="n">tx_characteristic_string</span><span class="p">.</span><span class="n">writeValue</span><span class="p">(</span><span class="n">tx_estring_value</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>

        <span class="n">previousMillis</span> <span class="o">=</span> <span class="n">currentMillis</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In the loop() function, call write_data() function</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// Listen for connections</span>
    <span class="n">BLEDevice</span> <span class="n">central</span> <span class="o">=</span> <span class="n">BLE</span><span class="p">.</span><span class="n">central</span><span class="p">();</span>
    <span class="c1">// If a central is connected to the peripheral</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">central</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">"Connected to: "</span><span class="p">);</span>
        <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">central</span><span class="p">.</span><span class="n">address</span><span class="p">());</span>
        <span class="c1">// While central is connected</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">central</span><span class="p">.</span><span class="n">connected</span><span class="p">())</span> <span class="p">{</span>
            <span class="c1">// Send data</span>
            <span class="n">write_data</span><span class="p">();</span>
            <span class="c1">// Read data</span>
            <span class="n">read_data</span><span class="p">();</span>
        <span class="p">}</span>
        <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"Disconnected"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Result:</p>

<p><img src="/FastRobots/images/Lab1/callback-time-ms-string.png" alt="" /></p>

<p>The average time interval is 12.54 ms</p>

<p>Effective data transfer rate is 80 msg/second</p>

<h3 id="25">2.5</h3>

<blockquote>
  <p>Now create an array that can store time stamps. This array should be defined globally so that other functions can access it if need be. In the loop, rather than send each time stamp, place each time stamp into the array. (Note: you’ll need some extra logic to determine when your array is full so you don’t “over fill” the array.) Then add a command SEND_TIME_DATA which loops the array and sends each data point as a string to your laptop to be processed. (You can store these values in a list in python to determine if all the data was sent over.)</p>
</blockquote>

<p>Arduino:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="n">end_pt</span> <span class="o">&lt;</span> <span class="n">buffer_size</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">time_stamps</span><span class="p">[</span><span class="n">end_pt</span><span class="p">]</span> <span class="o">=</span> <span class="n">currentMillis</span><span class="p">;</span>
  <span class="n">end_pt</span><span class="o">++</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">case</span> <span class="n">SEND_TIME_DATA</span><span class="p">:</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">end_pt</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">tx_estring_value</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
      <span class="n">tx_estring_value</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">"T: "</span><span class="p">);</span>
      <span class="n">tx_estring_value</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">time_stamps</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
      <span class="n">tx_characteristic_string</span><span class="p">.</span><span class="n">writeValue</span><span class="p">(</span><span class="n">tx_estring_value</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
    <span class="p">}</span>
    <span class="c1">// reset the buffer</span>
    <span class="n">end_pt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">break</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="26">2.6</h3>

<blockquote>
  <p>Add a second array that is the same size as the time stamp array. Use this array to store temperature readings. Each element in both arrays should correspond, e.e., the first time stamp was recorded at the same time as the first temperature reading. Then add a command GET_TEMP_READINGS that loops through both arrays concurrently and sends each temperature reading with a time stamp. The notification handler should parse these strings and add populate the data into two lists.</p>
</blockquote>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="n">end_pt</span> <span class="o">&lt;</span> <span class="n">buffer_size</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">time_stamps</span><span class="p">[</span><span class="n">end_pt</span><span class="p">]</span> <span class="o">=</span> <span class="n">currentMillis</span><span class="p">;</span>
    <span class="n">temperatures</span><span class="p">[</span><span class="n">end_pt</span><span class="p">]</span> <span class="o">=</span> <span class="n">getTempDegF</span><span class="p">();</span>
    <span class="n">end_pt</span><span class="o">++</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">case</span> <span class="n">GET_TEMP_READINGS</span><span class="p">:</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">end_pt</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">tx_estring_value</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>

      <span class="n">tx_estring_value</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">time_stamps</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
      <span class="n">tx_estring_value</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">"|"</span><span class="p">);</span>
      <span class="n">tx_estring_value</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">temperatures</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>

      <span class="n">tx_characteristic_string</span><span class="p">.</span><span class="n">writeValue</span><span class="p">(</span><span class="n">tx_estring_value</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
    <span class="p">}</span>
    <span class="c1">// reset the buffer</span>
    <span class="n">end_pt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">break</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In jupyter notebook, parse the received data to two lists:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">parse_to_time_temp</span><span class="p">(</span><span class="n">ss</span><span class="p">):</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">ss</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">|</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">time_ms</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="n">temperature</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
    <span class="n">time_stamps</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">time_ms</span><span class="p">)</span>
    <span class="n">temperatures</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">temperature</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">time (ms): </span><span class="si">{</span><span class="n">time_ms</span><span class="si">}</span><span class="s">   temp (F): </span><span class="si">{</span><span class="n">temperature</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<p>Some of the temperature data:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>time (ms): 691528   temp (F): 68.990
time (ms): 692029   temp (F): 72.865
time (ms): 692530   temp (F): 69.571
time (ms): 693031   temp (F): 70.23
time (ms): 693534   temp (F): 68.602
time (ms): 694035   temp (F): 70.23
time (ms): 694536   temp (F): 69.54
time (ms): 695037   temp (F): 69.765
time (ms): 695538   temp (F): 69.571
time (ms): 696039   temp (F): 69.829
time (ms): 696540   temp (F): 69.54
time (ms): 697041   temp (F): 69.700
time (ms): 697542   temp (F): 69.442
time (ms): 698043   temp (F): 69.765
time (ms): 698545   temp (F): 68.990
time (ms): 699046   temp (F): 68.667
time (ms): 699547   temp (F): 70.411
</code></pre></div></div>

<h3 id="27">2.7</h3>

<blockquote>
  <p>Discuss the differences between these two methods, the advantages and disadvantages of both and the potential scenarios that you might choose one method over the other. How “quickly” can the second method record data? The Artemis board has 384 kB of RAM. Approximately how much data can you store to send without running out of memory?</p>
</blockquote>

<p>The efficiency of the first method is lower than the second method, because it has to wait the previous message to be sent before sending the next message, causing delay in data transmission.</p>

<p>The second method can record data to the highest speed.</p>

<p>1 int consumes 4B space, 1 float consumes 4B</p>

<p>384 kB / 8B = 48k</p>

<p>So the largest data buffer length is 48k.</p>

<h3 id="additional-tasks-for-5000-level-students">Additional tasks for 5000-level students</h3>

<h3 id="1">1</h3>

<blockquote>
  <p><strong>Effective Data Rate And Overhead</strong>: Send a message from the computer and receive a reply from the Artemis board. Note the respective times for each event, calculate the data rate for 5-byte replies and 120-byte replies. Do many short packets introduce a lot of overhead? Do larger replies help to reduce overhead? You may also test additional reply sizes. Please include at least one plot to support your write-up.</p>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">start_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">*</span> <span class="mi">1000</span>

<span class="k">for</span> <span class="nb">len</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">120</span><span class="p">,</span> <span class="mi">240</span><span class="p">]:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">msg len = </span><span class="si">{</span><span class="nb">len</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">avg_rrt</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">20</span><span class="p">):</span>
        <span class="n">send_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">*</span> <span class="mi">1000</span>
        <span class="n">ble</span><span class="p">.</span><span class="nf">send_command</span><span class="p">(</span><span class="n">CMD</span><span class="p">.</span><span class="n">GET_REPLY_LEN</span><span class="p">,</span> <span class="nb">len</span><span class="p">)</span>
        <span class="n">s</span> <span class="o">=</span> <span class="n">ble</span><span class="p">.</span><span class="nf">receive_string</span><span class="p">(</span><span class="n">ble</span><span class="p">.</span><span class="n">uuid</span><span class="p">[</span><span class="sh">'</span><span class="s">RX_STRING</span><span class="sh">'</span><span class="p">])</span>
        <span class="n">recv_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">*</span> <span class="mi">1000</span>
        
        <span class="n">rrt</span> <span class="o">=</span> <span class="n">recv_time</span> <span class="o">-</span> <span class="n">send_time</span>
        <span class="n">avg_rrt</span> <span class="o">+=</span> <span class="n">rrt</span>
        <span class="c1"># print(rrt)
</span>        
    <span class="n">avg_rrt</span> <span class="o">/=</span> <span class="mi">20</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">avg rrt = </span><span class="si">{</span><span class="n">avg_rrt</span><span class="si">}</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<p>Result:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>msg len = 5
avg rrt = 118.93128662109375

msg len = 10
avg rrt = 119.98502197265626

msg len = 20
avg rrt = 119.98466796875

msg len = 40
avg rrt = 120.075537109375

msg len = 80
avg rrt = 121.49056396484374

msg len = 120
avg rrt = 124.49266357421875

msg len = 240
avg rrt = 121.423779296875
</code></pre></div></div>

<p><img src="/FastRobots/images/Lab1/chart.png" alt="chart" /></p>

<p>Large replies doesnot reduce overhead significantly.</p>

<h3 id="2">2</h3>

<blockquote>
  <p><strong>Reliability</strong>: What happens when you send data at a higher rate from the robot to the computer? Does the computer read all the data published (without missing anything) from the Artemis board? Include your answer in the write-up.</p>
</blockquote>

<p>If data was sent too fast, the buffer of the bluetooth receiver may be overflowed and some data will be discarded. So some of the data will be missed.</p>

<h2 id="discussion">Discussion</h2>

<blockquote>
  <p>Briefly describe what you’ve learned, challenges that you faced, and/or any unique solutions used to fix problems. It is important to keep these writeups succinct. You will not get extra points for writing more words if the content doesn’t contribute to communicating your understanding of the lab material.</p>
</blockquote>

<ol>
  <li>
    <p>The compiling process on M1 Mac is extremely slow and requires patience.</p>
  </li>
  <li>
    <p>The communication rate between computer and ble is important, they need to match each other.</p>
  </li>
  <li>
    <p>If not set the uuid properly, python program on my computer may connect to some other’s ble device.</p>
  </li>
  <li>
    <p>Jupyter notebook is hard to manipulate in some scenarios. Many of its control logic differs from normal python script.</p>
  </li>
</ol>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Prelab]]></summary></entry></feed>